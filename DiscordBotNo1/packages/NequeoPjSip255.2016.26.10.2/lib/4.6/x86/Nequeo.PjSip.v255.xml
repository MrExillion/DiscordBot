<?xml version="1.0"?>
<doc>
    <assembly>
        "Nequeo.PjSip"
    </assembly>
    <members>
        <member name="M:Nequeo.Net.PjSip.MediaCoordinate.set_Y(System.Int32)">
            <summary>
Gets or sets the Y position of the coordinate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaCoordinate.get_Y">
            <summary>
Gets or sets the Y position of the coordinate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaCoordinate.set_X(System.Int32)">
            <summary>
Gets or sets the X position of the coordinate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaCoordinate.get_X">
            <summary>
Gets or sets the X position of the coordinate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRedirectedParam.set_Redirect(&lt;unknown type&gt;)">
            <summary>
Gets or sets the redirect options.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRedirectedParam.get_Redirect">
            <summary>
Gets or sets the redirect options.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRedirectedParam.set_TargetUri(System.String)">
            <summary>
Gets or sets the current target to be tried.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRedirectedParam.get_TargetUri">
            <summary>
Gets or sets the current target to be tried.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRedirectedParam.set_EventType(&lt;unknown type&gt;)">
            <summary>
Gets or sets the sip event type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRedirectedParam.get_EventType">
            <summary>
Gets or sets the sip event type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRedirectedParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRedirectedParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRedirectedParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRedirectedParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallStateParam.set_EventType(&lt;unknown type&gt;)">
            <summary>
Gets or sets the sip event type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallStateParam.get_EventType">
            <summary>
Gets or sets the sip event type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallStateParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallStateParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallStateParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallStateParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipHeader.set_Value(System.String)">
            <summary>
Gets or sets the header value.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipHeader.get_Value">
            <summary>
Gets or sets the header value.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipHeader.set_Name(System.String)">
            <summary>
Gets or sets the header name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipHeader.get_Name">
            <summary>
Gets or sets the header name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatCheckStunServersCompleteParam.set_SocketAddress(System.String)">
            <summary>
Gets or sets the server IP address and port in "IP:port" format. This will only
contain value if status is successful.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatCheckStunServersCompleteParam.get_SocketAddress">
            <summary>
Gets or sets the server IP address and port in "IP:port" format. This will only
contain value if status is successful.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatCheckStunServersCompleteParam.set_Name(System.String)">
            <summary>
Gets or sets the server name that yields successful result. This will only
contain value if status is successful.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatCheckStunServersCompleteParam.get_Name">
            <summary>
Gets or sets the server name that yields successful result. This will only
contain value if status is successful.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatCheckStunServersCompleteParam.set_Status(System.Int32)">
            <summary>
Gets or sets the status of the detection process.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatCheckStunServersCompleteParam.get_Status">
            <summary>
Gets or sets the status of the detection process.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.OnSelectAccount_Handler(pj.OnSelectAccountParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On SelectAccount function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.OnTimer_Handler(pj.OnTimerParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Timer function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.OnTransportState_Handler(pj.OnTransportStateParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On TransportState function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.OnNatCheckStunServersComplete_Handler(pj.OnNatCheckStunServersCompleteParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On NatCheckStunServersComplete function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.OnNatDetectionComplete_Handler(pj.OnNatDetectionCompleteParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On NatDetectionComplete function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.MarshalString(System.String,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.MarshalString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.GetTransportInfo(System.Int32)">
            <summary>
Get the transport information.
</summary>
            <param name="transportID">The transport id.</param>
            <returns>The transport information.</returns>
            <summary>
Get the transport information.
</summary>
            <param name="transportID">The transport id.</param>
            <returns>The transport information.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.GetTransportIdList">
            <summary>
Get the list of transport ids.
</summary>
            <returns>The list of transport ids.</returns>
            <summary>
Get the list of transport ids.
</summary>
            <returns>The list of transport ids.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.Destroy">
            <summary>
Cleanup all resources.
</summary>
            <summary>
Cleanup all resources.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.StopThreads">
            <summary>
Stop all threads.
</summary>
            <summary>
Stop all threads.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.GetMediaManager(Nequeo.Net.PjSip.Account)">
            <summary>
Get the media manager.
</summary>
            <param name="account">The audio media device.</param>
            <returns>The media manager.</returns>
            <summary>
Get the media manager.
</summary>
            <param name="account">The audio media device.</param>
            <returns>The media manager.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.MediaActivePorts">
            <summary>
Get the number of active media ports.
</summary>
            <returns>The number of active ports.</returns>
            <summary>
Get the number of active media ports.
</summary>
            <returns>The number of active ports.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.AddAudioPlaybackDevice(Nequeo.Net.PjSip.AudioMedia)">
            <summary>
Add audio media device to the application.
</summary>
            <param name="audioMedia">The audio media device.</param>
            <summary>
Add audio media device to the application.
</summary>
            <param name="audioMedia">The audio media device.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.AddAudioCaptureDevice(Nequeo.Net.PjSip.AudioMedia)">
            <summary>
Add audio media device to the application.
</summary>
            <param name="audioMedia">The audio media device.</param>
            <summary>
Add audio media device to the application.
</summary>
            <param name="audioMedia">The audio media device.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.SetPriorityVideoCodec(System.String,System.Byte)">
            <summary>
Change video codec priority.
</summary>
            <param name="codecID">Codec ID, which is a string that uniquely identify
the codec(such as "H263/90000").</param>
            <param name="priority">Codec priority, 0-255, where zero means to disable
the codec.</param>
            <summary>
Change video codec priority.
</summary>
            <param name="codecID">Codec ID, which is a string that uniquely identify
the codec(such as "H263/90000").</param>
            <param name="priority">Codec priority, 0-255, where zero means to disable
the codec.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.SetPriorityAudioCodec(System.String,System.Byte)">
            <summary>
Change audio codec priority.
</summary>
            <param name="codecID">which is a string that uniquely identify
the codec(such as "speex/8000").</param>
            <param name="priority">Codec priority, 0-255, where zero means to disable
the codec.</param>
            <summary>
Change audio codec priority.
</summary>
            <param name="codecID">which is a string that uniquely identify
the codec(such as "speex/8000").</param>
            <param name="priority">Codec priority, 0-255, where zero means to disable
the codec.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.GetVideoCodecInfo">
            <summary>
Get all supported video codecs in the system.
</summary>
            <returns>The supported video codecs in the system.</returns>
            <summary>
Get all supported video codecs in the system.
</summary>
            <returns>The supported video codecs in the system.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.GetAudioCodecInfo">
            <summary>
Get all supported audio codecs in the system.
</summary>
            <returns>The supported audio codecs in the system.</returns>
            <summary>
Get all supported codecs in the system.
</summary>
            <returns>The supported codecs in the system.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.Initialise(&lt;unknown type&gt;,&lt;unknown type&gt;,Nequeo.Net.PjSip.EndPointConfig)">
            <summary>
Start the application.
</summary>
            <param name="useIPv6">Use IPv6.</param>
            <param name="transportType">The transport type flags.</param>
            <param name="config">The endpoint configuration.</param>
            <summary>
Start the application.
</summary>
            <param name="useIPv6">Use IPv6.</param>
            <param name="transportType">The transport type flags.</param>
            <param name="config">The endpoint configuration.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.Initialise(&lt;unknown type&gt;,&lt;unknown type&gt;)">
            <summary>
Start the application.
</summary>
            <param name="useIPv6">Use IPv6.</param>
            <param name="transportType">The transport type flags.</param>
            <summary>
Start the application.
</summary>
            <param name="useIPv6">Use IPv6.</param>
            <param name="transportType">The transport type flags.</param>
        </member>
        <member name="E:Nequeo.Net.PjSip.Endpoint.OnSelectAccount">
            <summary>
This callback can be used by application to override the account
to be used to handle an incoming message. Initially, the account to
be used will be calculated automatically by the library.This initial
account will be used if application does not implement this callback,
or application sets an invalid account upon returning from this
callback.
Note that currently the incoming messages requiring account assignment
are INVITE, MESSAGE, SUBSCRIBE, and unsolicited NOTIFY.This callback
may be called before the callback of the SIP event itself, i.e:
incoming call, pager, subscription, or unsolicited - event.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Endpoint.OnTimer">
            <summary>
Callback when a timer has fired. The timer was scheduled by
utilTimerSchedule().
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Endpoint.OnTransportState">
            <summary>
This callback is called when transport state has changed.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Endpoint.OnNatCheckStunServersComplete">
            <summary>
Callback when the Endpoint has finished performing STUN server
checking that is initiated when calling libInit(), or by
calling natCheckStunServers().
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Endpoint.OnNatDetectionComplete">
            <summary>
Callback when the Endpoint has finished performing NAT type
detection that is initiated with natDetectType().
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.Finalize">
            <summary>
Sip endpoint finalizer.
</summary>
            <summary>
Sip endpoint finalizer.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.Dispose">
            <summary>
Sip endpoint deconstructor.
</summary>
            <summary>
Sip endpoint.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Endpoint.#ctor">
            <summary>
Sip endpoint.
</summary>
            <summary>
Sip endpoint.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.Endpoint">
            <summary>
Sip endpoint.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnNatCheckStunServersCompleteParam.SocketAddress">
            <summary>
Gets or sets the server IP address and port in "IP:port" format. This will only
contain value if status is successful.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnNatCheckStunServersCompleteParam.Name">
            <summary>
Gets or sets the server name that yields successful result. This will only
contain value if status is successful.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnNatCheckStunServersCompleteParam.Status">
            <summary>
Gets or sets the status of the detection process.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatCheckStunServersCompleteParam.#ctor">
            <summary>
The Endpoint has finished performing STUN server
checking that is initiated when calling libInit(), or by
calling natCheckStunServers().
</summary>
            <summary>
The Endpoint has finished performing STUN server
checking that is initiated when calling libInit(), or by
calling natCheckStunServers().
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnNatCheckStunServersCompleteParam">
            <summary>
The Endpoint has finished performing STUN server
checking that is initiated when calling libInit(), or by
calling natCheckStunServers().
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.GetStunNatTypeEx(pj_stun_nat_type)">
            <summary>
Get StunNatType.
</summary>
            <param name="stunNatType">The current StunNatType.</param>
            <returns>The StunNatType.</returns>
            <summary>
Get StunNatType.
</summary>
            <param name="stunNatType">The current StunNatType.</param>
            <returns>The StunNatType.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.GetTransportStateEx(pjsip_transport_state)">
            <summary>
Get TransportState.
</summary>
            <param name="transportState">The current TransportState.</param>
            <returns>The TransportState.</returns>
            <summary>
Get TransportState.
</summary>
            <param name="transportState">The current TransportState.</param>
            <returns>The TransportState.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.Set_OnSelectAccount_Function(=FUNC:System.Void(pj.OnSelectAccountParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on SelectAccount function callback.
</summary>
            <param name="onSelectAccountCallBack">The on SelectAccount function callback.</param>
            <summary>
Set the on SelectAccount function callback.
</summary>
            <param name="onSelectAccountCallBack">The on SelectAccount function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.Set_OnTimer_Function(=FUNC:System.Void(pj.OnTimerParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on Timer function callback.
</summary>
            <param name="onTimerCallBack">The on Timer function callback.</param>
            <summary>
Set the on Timer function callback.
</summary>
            <param name="onTimerCallBack">The on Timer function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.Set_OnTransportState_Function(=FUNC:System.Void(pj.OnTransportStateParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on TransportState function callback.
</summary>
            <param name="onTransportStateCallBack">The on TransportState function callback.</param>
            <summary>
Set the on TransportState function callback.
</summary>
            <param name="onTransportStateCallBack">The on TransportState function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.Set_OnNatCheckStunServersComplete_Function(=FUNC:System.Void(pj.OnNatCheckStunServersCompleteParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on NatCheckStunServersComplete function callback.
</summary>
            <param name="onNatCheckStunServersCompleteCallBack">The on NatCheckStunServersComplete function callback.</param>
            <summary>
Set the on NatCheckStunServersComplete function callback.
</summary>
            <param name="onNatCheckStunServersCompleteCallBack">The on NatCheckStunServersComplete function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.Set_OnNatDetectionComplete_Function(=FUNC:System.Void(pj.OnNatDetectionCompleteParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on NatDetectionComplete function callback.
</summary>
            <param name="onNatDetectionCompleteCallBack">The on NatDetectionComplete function callback.</param>
            <summary>
Set the on NatDetectionComplete function callback.
</summary>
            <param name="onNatDetectionCompleteCallBack">The on NatDetectionComplete function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.onSelectAccount(pj.OnSelectAccountParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This callback can be used by application to override the account
to be used to handle an incoming message. Initially, the account to
be used will be calculated automatically by the library.This initial
account will be used if application does not implement this callback,
or application sets an invalid account upon returning from this
callback.
Note that currently the incoming messages requiring account assignment
are INVITE, MESSAGE, SUBSCRIBE, and unsolicited NOTIFY.This callback
may be called before the callback of the SIP event itself, i.e:
incoming call, pager, subscription, or unsolicited - event.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
This callback can be used by application to override the account
to be used to handle an incoming message.Initially, the account to
be used will be calculated automatically by the library.This initial
account will be used if application does not implement this callback,
or application sets an invalid account upon returning from this
callback.
Note that currently the incoming messages requiring account assignment
are INVITE, MESSAGE, SUBSCRIBE, and unsolicited NOTIFY.This callback
may be called before the callback of the SIP event itself, i.e:
incoming call, pager, subscription, or unsolicited - event.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.onTimer(pj.OnTimerParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Callback when a timer has fired. The timer was scheduled by
utilTimerSchedule().
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Callback when a timer has fired. The timer was scheduled by
utilTimerSchedule().
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.onTransportState(pj.OnTransportStateParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This callback is called when transport state has changed.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
This callback is called when transport state has changed.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.onNatCheckStunServersComplete(pj.OnNatCheckStunServersCompleteParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Callback when the Endpoint has finished performing STUN server
checking that is initiated when calling libInit(), or by
calling natCheckStunServers().
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Callback when the Endpoint has finished performing STUN server
checking that is initiated when calling libInit(), or by
calling natCheckStunServers().
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.onNatDetectionComplete(pj.OnNatDetectionCompleteParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Callback when the Endpoint has finished performing NAT type
detection that is initiated with natDetectType().
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Callback when the Endpoint has finished performing NAT type
detection that is initiated with natDetectType().
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.AddAudioMedia(pj.AudioMedia*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Add audio media device to the application.
</summary>
            <param name="audioMedia">The audio media device.</param>
            <summary>
Add audio media device to the application.
</summary>
            <param name="audioMedia">The audio media device.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.SetPriorityVideoCodec(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
            <summary>
Change video codec priority.
</summary>
            <param name="codecID">Codec ID, which is a string that uniquely identify
the codec(such as "H263/90000"). Please see pjsua
manual or pjmedia codec reference for details.</param>
            <param name="priority">Codec priority, 0-255, where zero means to disable
the codec.</param>
            <summary>
Change video codec priority.
</summary>
            <param name="codecID">Codec ID, which is a string that uniquely identify
the codec(such as "H263/90000"). Please see pjsua
manual or pjmedia codec reference for details.</param>
            <param name="priority">Codec priority, 0-255, where zero means to disable
the codec.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.SetPriorityAudioCodec(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
            <summary>
Change audio codec priority.
</summary>
            <param name="codecID">which is a string that uniquely identify
the codec(such as "speex/8000").</param>
            <param name="priority">Codec priority, 0-255, where zero means to disable
the codec.</param>
            <summary>
Change audio codec priority.
</summary>
            <param name="codecID">which is a string that uniquely identify
the codec(such as "speex/8000").</param>
            <param name="priority">Codec priority, 0-255, where zero means to disable
the codec.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.GetTransportIdList">
            <summary>
Get the list of transport ids.
</summary>
            <returns>The list of transport ids.</returns>
            <summary>
Get the list of transport ids.
</summary>
            <returns>The list of transport ids.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.GetVideoCodecInfo">
            <summary>
Get all supported video codecs in the system.
</summary>
            <returns>The supported video codecs in the system.</returns>
            <summary>
Get all supported video codecs in the system.
</summary>
            <returns>The supported video codecs in the system.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.GetAudioCodecInfo">
            <summary>
Get all supported audio codecs in the system.
</summary>
            <returns>The supported audio codecs in the system.</returns>
            <summary>
Get all supported audio codecs in the system.
</summary>
            <returns>The supported audio codecs in the system.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.MediaActivePorts">
            <summary>
Get the number of active media ports.
</summary>
            <returns>The number of active ports.</returns>
            <summary>
Get the number of active media ports.
</summary>
            <returns>The number of active ports.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.GetVideoDevManager">
            <summary>
Get the video deveice manager.
</summary>
            <returns>The video device manager.</returns>
            <summary>
Get the video deveice manager.
</summary>
            <returns>The video device manager.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.GetAudioDevManager">
            <summary>
Get the audio deveice manager.
</summary>
            <returns>The audio device manager.</returns>
            <summary>
Get the audio deveice manager.
</summary>
            <returns>The audio device manager.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.Initialise(pjsua_ipv6_use,&lt;unknown type&gt;,Nequeo.Net.PjSip.EndPointConfiguration!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Start the application.
</summary>
            <param name="useIPv6">Use IPv6.</param>
            <param name="transportType">The transport type flags.</param>
            <param name="configuration">Endpoint configuration.</param>
            <summary>
Start the application.
</summary>
            <param name="useIPv6">Use IPv6.</param>
            <param name="transportType">The transport type flags.</param>
            <param name="configuration">Endpoint configuration.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.Initialise(pjsua_ipv6_use,&lt;unknown type&gt;)">
            <summary>
Start the application.
</summary>
            <param name="useIPv6">Use IPv6.</param>
            <param name="transportType">The transport type flags.</param>
            <summary>
Start the application.
</summary>
            <param name="useIPv6">Use IPv6.</param>
            <param name="transportType">The transport type flags.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.Dispose">
            <summary>
Endpoint callbacks.
</summary>
            <summary>
Endpoint callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndpointCallback.#ctor">
            <summary>
Endpoint callbacks.
</summary>
            <summary>
Endpoint callbacks.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.EndpointCallback">
            <summary>
Endpoint callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TimeVal.set_Milliseconds(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Gets or sets the milliseconds fraction of the time.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TimeVal.get_Milliseconds">
            <summary>
Gets or sets the milliseconds fraction of the time.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TimeVal.set_Seconds(System.Int32!System.Runtime.CompilerServices.IsLong)">
            <summary>
Gets or sets the seconds part of the time.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TimeVal.get_Seconds">
            <summary>
Gets or sets the seconds part of the time.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.set_MediaFormats(Nequeo.Net.PjSip.MediaFormat[])">
            <summary>
Gets or sets the array of media formats.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.get_MediaFormats">
            <summary>
Gets or sets the array of media formats.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.set_Caps(System.UInt32)">
            <summary>
Gets or sets the device capabilities, as bitmask combination.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.get_Caps">
            <summary>
Gets or sets the device capabilities, as bitmask combination.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.set_Direction(&lt;unknown type&gt;)">
            <summary>
Gets or sets the supported direction of the video device, i.e. whether it supports
capture only, render only, or both.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.get_Direction">
            <summary>
Gets or sets the supported direction of the video device, i.e. whether it supports
capture only, render only, or both.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.set_Driver(System.String)">
            <summary>
Gets or sets the underlying driver name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.get_Driver">
            <summary>
Gets or sets the underlying driver name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.set_Name(System.String)">
            <summary>
Gets or sets the device name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.get_Name">
            <summary>
Gets or sets the device name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.set_Id(System.Int32)">
            <summary>
Gets or sets the device id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.get_Id">
            <summary>
Gets or sets the device id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaEventParam.set_Event(Nequeo.Net.PjSip.MediaEvent)">
            <summary>
Gets or sets the media event.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaEventParam.get_Event">
            <summary>
Gets or sets the media event.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaEventParam.set_MediaIndex(System.UInt32)">
            <summary>
Gets or sets the media stream index.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaEventParam.get_MediaIndex">
            <summary>
Gets or sets the media stream index.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaEventParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaEventParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaEventParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaEventParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTransportStateParam.set_State(&lt;unknown type&gt;)">
            <summary>
Gets or sets the transport current state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTransportStateParam.get_State">
            <summary>
Gets or sets the transport current state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTransportStateParam.set_LastError(System.Int32)">
            <summary>
Gets or sets the last error code related to the transport state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTransportStateParam.get_LastError">
            <summary>
Gets or sets the last error code related to the transport state.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnTransportStateParam.State">
            <summary>
Gets or sets the transport current state.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnTransportStateParam.LastError">
            <summary>
Gets or sets the last error code related to the transport state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTransportStateParam.#ctor">
            <summary>
This callback is called when transport state has changed.
</summary>
            <summary>
This callback is called when transport state has changed.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnTransportStateParam">
            <summary>
This callback is called when transport state has changed.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.TransportState">
            <summary>
Transport state types.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_TP_STATE_DESTROY">
            <summary>
Transport destroy, when transport is about to be destroyed.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_TP_STATE_SHUTDOWN">
            <summary>
Transport shutdown, either due to TCP / TLS disconnect error from the network, or when shutdown is initiated by PJSIP itself.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_TP_STATE_DISCONNECTED">
            <summary>
Transport disconnected, applicable only to connection - oriented transports such as TCP and TLS.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_TP_STATE_CONNECTED">
            <summary>
Transport connected, applicable only to connection - oriented transports such as TCP and TLS.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipRxData.set_WholeMsg(System.String)">
            <summary>
Gets or sets the whole message data as a string, containing both the header section
and message body section.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipRxData.get_WholeMsg">
            <summary>
Gets or sets the whole message data as a string, containing both the header section
and message body section.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipRxData.set_SrcAddress(System.String)">
            <summary>
Gets or sets the source address of the message.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipRxData.get_SrcAddress">
            <summary>
Gets or sets the source address of the message.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipRxData.set_Info(System.String)">
            <summary>
Gets or sets a short info string describing the request, which normally contains
the request method and its CSeq.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipRxData.get_Info">
            <summary>
Gets or sets a short info string describing the request, which normally contains
the request method and its CSeq.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_RemVideoCount(System.UInt32)">
            <summary>
Gets or sets the number of video streams offered by remote.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_RemVideoCount">
            <summary>
Gets or sets the number of video streams offered by remote.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_RemAudioCount(System.UInt32)">
            <summary>
Gets or sets the number of audio streams offered by remote.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_RemAudioCount">
            <summary>
Gets or sets the number of audio streams offered by remote.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_RemOfferer(System.Boolean)">
            <summary>
Gets or sets the flag if remote was SDP offerer.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_RemOfferer">
            <summary>
Gets or sets the flag if remote was SDP offerer.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_TotalDuration(Nequeo.Net.PjSip.TimeVal)">
            <summary>
Gets or sets the total call duration, including set-up time.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_TotalDuration">
            <summary>
Gets or sets the total call duration, including set-up time.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_ConnectDuration(Nequeo.Net.PjSip.TimeVal)">
            <summary>
Gets or sets the Up-to-date call connected duration (zero when call is not established).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_ConnectDuration">
            <summary>
Gets or sets the Up-to-date call connected duration (zero when call is not established).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_ProvMedia(Nequeo.Net.PjSip.CallMediaInfo[])">
            <summary>
Gets or sets the Array of provisional media information. This contains the media info
in the provisioning state, that is when the media session is being
created / updated(SDP offer / answer is on progress).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_ProvMedia">
            <summary>
Gets or sets the Array of provisional media information. This contains the media info
in the provisioning state, that is when the media session is being
created / updated(SDP offer / answer is on progress).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_Media(Nequeo.Net.PjSip.CallMediaInfo[])">
            <summary>
Gets or sets the array of active media information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_Media">
            <summary>
Gets or sets the array of active media information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_LastReason(System.String)">
            <summary>
Gets or sets the reason phrase describing the last status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_LastReason">
            <summary>
Gets or sets the reason phrase describing the last status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_LastStatusCode(&lt;unknown type&gt;)">
            <summary>
Gets or sets the last status code heard, which can be used as cause code.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_LastStatusCode">
            <summary>
Gets or sets the last status code heard, which can be used as cause code.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_StateText(System.String)">
            <summary>
Gets or sets the text describing the state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_StateText">
            <summary>
Gets or sets the text describing the state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_State(&lt;unknown type&gt;)">
            <summary>
Gets or sets the call state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_State">
            <summary>
Gets or sets the call state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_Setting(Nequeo.Net.PjSip.CallSetting)">
            <summary>
Gets or sets the call setting.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_Setting">
            <summary>
Gets or sets the call setting.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_CallIdString(System.String)">
            <summary>
Gets or sets the dialog Call-ID string.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_CallIdString">
            <summary>
Gets or sets the dialog Call-ID string.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_RemoteContact(System.String)">
            <summary>
Gets or sets the remote contact.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_RemoteContact">
            <summary>
Gets or sets the remote contact.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_RemoteUri(System.String)">
            <summary>
Gets or sets the remote uri.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_RemoteUri">
            <summary>
Gets or sets the remote uri.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_LocalContact(System.String)">
            <summary>
Gets or sets the local contact.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_LocalContact">
            <summary>
Gets or sets the local contact.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_LocalUri(System.String)">
            <summary>
Gets or sets the local uri.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_LocalUri">
            <summary>
Gets or sets the local uri.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_Role(&lt;unknown type&gt;)">
            <summary>
Gets or sets the call role (UAC == caller).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_Role">
            <summary>
Gets or sets the call role (UAC == caller).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_AccountId(System.Int32)">
            <summary>
Gets or sets the account id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_AccountId">
            <summary>
Gets or sets the account id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.set_Id(System.Int32)">
            <summary>
Gets or sets the call id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.get_Id">
            <summary>
Gets or sets the call id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.OnPlayerEndOfFile_Handler">
            <summary>
Register a callback to be called when the file player reading has
reached the end of file, or when the file reading has reached the
end of file of the last file for a playlist.If the file or playlist
is set to play repeatedly, then the callback will be called multiple
times.
</summary>
            <returns>If the callback returns false, the playback
will stop. Note that if application destroys
the player in the callback, it must return
false here.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.MarshalString(System.String,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.MarshalString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.Create">
            <summary>
Create the player.
</summary>
            <summary>
Create the player.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.StoptPlayingConversation(Nequeo.Net.PjSip.AudioMedia[])">
            <summary>
Stop playing audio to each call.
</summary>
            <param name="conferenceCalls">Array of remote conference calls.</param>
            <summary>
Stop playing audio to each call.
</summary>
            <param name="conferenceCalls">Array of remote conference calls.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.StartPlayingConversation(Nequeo.Net.PjSip.AudioMedia[])">
            <summary>
Start playing audio to each call.
</summary>
            <param name="conferenceCalls">Array of remote conference calls.</param>
            <summary>
Start playing audio to each call.
</summary>
            <param name="conferenceCalls">Array of remote conference calls.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.Stop(Nequeo.Net.PjSip.AudioMedia)">
            <summary>
Stop playback.
</summary>
            <param name="playbackMedia">The audio playback media.</param>
            <summary>
Stop playback.
</summary>
            <param name="playbackMedia">The audio playback media.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.Start(Nequeo.Net.PjSip.AudioMedia)">
            <summary>
Start playback.
</summary>
            <param name="playbackMedia">The audio playback media.</param>
            <summary>
Start playback.
</summary>
            <param name="playbackMedia">The audio playback media.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.SetPosition(System.UInt32)">
            <summary>
Set playback position in samples. This operation is not valid for playlist.
</summary>
            <param name="samples">The desired playback position, in samples.</param>
            <summary>
Set playback position in samples. This operation is not valid for playlist.
</summary>
            <param name="samples">The desired playback position, in samples.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.GetPosition">
            <summary>
Get current playback position in samples. This operation is not valid for playlist.
</summary>
            <returns>The current playback position, in samples..</returns>
            <summary>
Get current playback position in samples. This operation is not valid for playlist.
</summary>
            <returns>The current playback position, in samples..</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.CreatePlaylist(System.String[],System.String,System.UInt32)">
            <summary>
Create a file playlist media port, and automatically add the port
to the conference bridge.
</summary>
            <param name="filenames">The Array of file names to be added to the play list.
Note that the files must have the same clock rate,
number of channels, and number of bits per sample.</param>
            <param name="label">Optional label to be set for the media port; default is empty string.</param>
            <param name="options">Optional option flag. Application may specify
PJMEDIA_FILE_NO_LOOP to prevent playback loop; default is zero.</param>
            <summary>
Create a file playlist media port, and automatically add the port
to the conference bridge.
</summary>
            <param name="filenames">The Array of file names to be added to the play list.
Note that the files must have the same clock rate,
number of channels, and number of bits per sample.</param>
            <param name="label">Optional label to be set for the media port; default is empty string.</param>
            <param name="options">Optional option flag. Application may specify
PJMEDIA_FILE_NO_LOOP to prevent playback loop; default is zero.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.CreatePlayer(System.String,System.UInt32)">
            <summary>
Create a file player, and automatically add this 
player to the conference bridge.
</summary>
            <param name="filename">The filename to be played. Currently only
WAV files are supported, and the WAV file MUST be
formatted as 16bit PCM mono / single channel(any
clock rate is supported).</param>
            <param name="options">Optional option flag. Application may specify
PJMEDIA_FILE_NO_LOOP to prevent playback loop; default is zero.</param>
            <summary>
Create a file player, and automatically add this 
player to the conference bridge.
</summary>
            <param name="filename">The filename to be played. Currently only
WAV files are supported, and the WAV file MUST be
formatted as 16bit PCM mono / single channel(any
clock rate is supported).</param>
            <param name="options">Optional option flag. Application may specify
PJMEDIA_FILE_NO_LOOP to prevent playback loop; default is zero.</param>
        </member>
        <member name="E:Nequeo.Net.PjSip.AudioMediaPlayer.OnPlayerEndOfFile">
            <summary>
Register a callback to be called when the file player reading has
reached the end of file, or when the file reading has reached the
end of file of the last file for a playlist.If the file or playlist
is set to play repeatedly, then the callback will be called multiple
times.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.Finalize">
            <summary>
Audio media player.
</summary>
            <summary>
Audio media player.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.Dispose">
            <summary>
Audio media player.
</summary>
            <summary>
Audio media player.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayer.#ctor">
            <summary>
Audio media player.
</summary>
            <summary>
Audio media player.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.AudioMediaPlayer">
            <summary>
Audio media player.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayerCallback.Set_OnPlayerEndOfFile_Function(=FUNC:System.Boolean)">
            <summary>
Set the on player end of file function callback.
</summary>
            <param name="onPlayerEndOfFileCallBack">The on player end of file function callback.</param>
            <summary>
Set the on player end of file function callback.
</summary>
            <param name="onPlayerEndOfFileCallBack">The on player end of file function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayerCallback.onEof">
            <summary>
Register a callback to be called when the file player reading has
reached the end of file, or when the file reading has reached the
end of file of the last file for a playlist.If the file or playlist
is set to play repeatedly, then the callback will be called multiple
times.
</summary>
            <returns>If the callback returns false, the playback
will stop.Note that if application destroys
the player in the callback, it must return
false here.</returns>
            <summary>
Register a callback to be called when the file player reading has
reached the end of file, or when the file reading has reached the
end of file of the last file for a playlist.If the file or playlist
is set to play repeatedly, then the callback will be called multiple
times.
</summary>
            <returns>If the callback returns false, the playback
will stop. Note that if application destroys
the player in the callback, it must return
false here.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayerCallback.Dispose">
            <summary>
Audio media player callbacks.
</summary>
            <summary>
Audio media player callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaPlayerCallback.#ctor">
            <summary>
Audio media player callbacks.
</summary>
            <summary>
Audio media player callbacks.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.AudioMediaPlayerCallback">
            <summary>
Audio media player callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRxOfferParam.set_Code(&lt;unknown type&gt;)">
            <summary>
Gets or sets the Status code to be returned for answering the offer. On input,
it contains status code 200. Currently, valid values are only 200 and 488.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRxOfferParam.get_Code">
            <summary>
Gets or sets the Status code to be returned for answering the offer. On input,
it contains status code 200. Currently, valid values are only 200 and 488.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRxOfferParam.set_Setting(Nequeo.Net.PjSip.CallSetting)">
            <summary>
Gets or sets the current call setting, application can update this setting for answering the offer.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRxOfferParam.get_Setting">
            <summary>
Gets or sets the current call setting, application can update this setting for answering the offer.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRxOfferParam.set_Offer(Nequeo.Net.PjSip.SdpSession)">
            <summary>
Gets or sets the new offer received.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRxOfferParam.get_Offer">
            <summary>
Gets or sets the new offer received.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRxOfferParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRxOfferParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRxOfferParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRxOfferParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.set_Id(System.Int32)">
            <summary>
Gets or sets the conference port Id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.get_Id">
            <summary>
Gets or sets the conference port Id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.OnRegState_Handler(pj.OnRegStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Reg State function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.OnRegStarted_Handler(pj.OnRegStartedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Reg Started function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.OnTypingIndication_Handler(pj.OnTypingIndicationParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Typing Indication function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.OnMwiInfo_Handler(pj.OnMwiInfoParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Mwi Info function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.OnInstantMessageStatus_Handler(pj.OnInstantMessageStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Instant Message Status function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.OnInstantMessage_Handler(pj.OnInstantMessageParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Instant Message function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.OnIncomingSubscribe_Handler(pj.OnIncomingSubscribeParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On incoming subscribe function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.OnIncomingCall_Handler(pj.OnIncomingCallParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On incoming call function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.MarshalString(System.String,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.MarshalString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.get_Contacts">
            <summary>
Gets the contacts.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.set_AccountConnConfig(Nequeo.Net.PjSip.AccountConnection)">
            <summary>
Sets the account connection configuration.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.get_AccountConnConfig">
            <summary>
Gets the account connection configuration.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaEventData.set_FormatChanged(Nequeo.Net.PjSip.MediaFmtChangedEvent)">
            <summary>
Gets or sets the media format changed event data.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaEventData.get_FormatChanged">
            <summary>
Gets or sets the media format changed event data.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageStatusParam.set_ToUri(System.String)">
            <summary>
Gets or sets the destination URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageStatusParam.get_ToUri">
            <summary>
Gets or sets the destination URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageStatusParam.set_Reason(System.String)">
            <summary>
Gets or sets the reason phrase of the transaction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageStatusParam.get_Reason">
            <summary>
Gets or sets the reason phrase of the transaction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageStatusParam.set_RxData(Nequeo.Net.PjSip.SipRxData)">
            <summary>
Gets or sets the incoming response that causes this callback to be called.
If the transaction fails because of time out or transport error,
the content will be empty.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageStatusParam.get_RxData">
            <summary>
Gets or sets the incoming response that causes this callback to be called.
If the transaction fails because of time out or transport error,
the content will be empty.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageStatusParam.set_MsgBody(System.String)">
            <summary>
Gets or sets the message body.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageStatusParam.get_MsgBody">
            <summary>
Gets or sets the message body.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageStatusParam.set_Code(&lt;unknown type&gt;)">
            <summary>
Gets or sets the SIP status code of the transaction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageStatusParam.get_Code">
            <summary>
Gets or sets the SIP status code of the transaction.
</summary>
        </member>
        <member name="M:pj.Call.onCreateMediaTransport(pj.OnCreateMediaTransportParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This callback can be used by application to implement custom media
 transport adapter for the call, or to replace the media transport
 with something completely new altogether.

 This callback is called when a new call is created. The library has
 created a media transport for the call, and it is provided as the
 \a mediaTp argument of this callback. The callback may change it
 with the instance of media transport to be used by the call.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallMediaEvent(pj.OnCallMediaEventParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notification about media events such as video notifications. This
 callback will most likely be called from media threads, thus
 application must not perform heavy processing in this callback.
 Especially, application must not destroy the call or media in this
 callback. If application needs to perform more complex tasks to
 handle the event, it should post the task to another thread.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallMediaTransportState(pj.OnCallMediaTransportStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This callback is called when media transport state is changed.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallRedirected(pj.OnCallRedirectedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This callback is called when the call is about to resend the
 INVITE request to the specified target, following the previously
 received redirection response.

 Application may accept the redirection to the specified target,
 reject this target only and make the session continue to try the next
 target in the list if such target exists, stop the whole
 redirection process altogether and cause the session to be
 disconnected, or defer the decision to ask for user confirmation.

 This callback is optional,
 the default behavior is to NOT follow the redirection response.

 @param prm	Callback parameter.

 @return		Action to be performed for the target. Set this
			parameter to one of the value below:
			- PJSIP_REDIRECT_ACCEPT: immediately accept the
			  redirection. When set, the call will immediately
			  resend INVITE request to the target.
			- PJSIP_REDIRECT_ACCEPT_REPLACE: immediately accept
			  the redirection and replace the To header with the
			  current target. When set, the call will immediately
			  resend INVITE request to the target.
			- PJSIP_REDIRECT_REJECT: immediately reject this
			  target. The call will continue retrying with
			  next target if present, or disconnect the call
			  if there is no more target to try.
			- PJSIP_REDIRECT_STOP: stop the whole redirection
			  process and immediately disconnect the call. The
			  onCallState() callback will be called with
			  PJSIP_INV_STATE_DISCONNECTED state immediately
			  after this callback returns.
			- PJSIP_REDIRECT_PENDING: set to this value if
			  no decision can be made immediately (for example
			  to request confirmation from user). Application
			  then MUST call processRedirect()
			  to either accept or reject the redirection upon
			  getting user decision.

</member>
        <member name="M:pj.Call.onTypingIndication(pj.OnTypingIndicationParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application about typing indication.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onInstantMessageStatus(pj.OnInstantMessageStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application about the delivery status of outgoing MESSAGE
 request.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onInstantMessage(pj.OnInstantMessageParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application on incoming MESSAGE request.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallTxOffer(pj.OnCallTxOfferParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application when call has received INVITE with no SDP offer.
 Application can update the call setting (e.g: add audio/video), or
 enable/disable codecs, or update other media session settings from
 within the callback, however, as mandated by the standard (RFC3261
 section 14.2), it must ensure that the update overlaps with the
 existing media session (in codecs, transports, or other parameters)
 that require support from the peer, this is to avoid the need for
 the peer to reject the offer.

 When this callback is not implemented, the default behavior is to send
 SDP offer using current active media session (with all enabled codecs
 on each media type).

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallRxOffer(pj.OnCallRxOfferParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application when call has received new offer from remote
 (i.e. re-INVITE/UPDATE with SDP is received). Application can
 decide to accept/reject the offer by setting the code (default
 is 200). If the offer is accepted, application can update the
 call setting to be applied in the answer. When this callback is
 not implemented, the default behavior is to accept the offer using
 current call setting.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallReplaced(pj.OnCallReplacedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application that an existing call has been replaced with
 a new call. This happens when PJSUA-API receives incoming INVITE
 request with Replaces header.

 After this callback is called, normally PJSUA-API will disconnect
 this call and establish a new call \a newCallId.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallReplaceRequest(pj.OnCallReplaceRequestParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application about incoming INVITE with Replaces header.
 Application may reject the request by setting non-2xx code.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallTransferStatus(pj.OnCallTransferStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application of the status of previously sent call
 transfer request. Application can monitor the status of the
 call transfer request, for example to decide whether to
 terminate existing call.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallTransferRequest(pj.OnCallTransferRequestParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application on call being transferred (i.e. REFER is received).
 Application can decide to accept/reject transfer request
 by setting the code (default is 202). When this callback
 is not implemented, the default behavior is to accept the
 transfer.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onDtmfDigit(pj.OnDtmfDigitParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application upon incoming DTMF digits.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onStreamDestroyed(pj.OnStreamDestroyedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application when media session has been unregistered from the
 conference bridge and about to be destroyed.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onStreamCreated(pj.OnStreamCreatedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application when media session is created and before it is
 registered to the conference bridge. Application may return different
 media port if it has added media processing port to the stream. This
 media port then will be added to the conference bridge instead.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallSdpCreated(pj.OnCallSdpCreatedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application when a call has just created a local SDP (for
 initial or subsequent SDP offer/answer). Application can implement
 this callback to modify the SDP, before it is being sent and/or
 negotiated with remote SDP, for example to apply per account/call
 basis codecs priority or to add custom/proprietary SDP attributes.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallMediaState(pj.OnCallMediaStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application when media state in the call has changed.
 Normal application would need to implement this callback, e.g.
 to connect the call's media to sound device. When ICE is used,
 this callback will also be called to report ICE negotiation
 failure.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallTsxState(pj.OnCallTsxStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This is a general notification callback which is called whenever
 a transaction within the call has changed state. Application can
 implement this callback for example to monitor the state of
 outgoing requests, or to answer unhandled incoming requests
 (such as INFO) with a final response.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.onCallState(pj.OnCallStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application when call state has changed.
 Application may then query the call info to get the
 detail call states by calling getInfo() function.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Call.processStateChange(pj.OnCallStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Internal function (called by Endpoint) to process call state change.

</member>
        <member name="M:pj.Call.processMediaUpdate(pj.OnCallMediaStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Internal function (callled by Endpoint( to process update to call
medias when call media state changes.

</member>
        <member name="M:pj.Call.getMedTransportInfo(System.UInt32)">
 Get media transport info for the specified media index.

 @param med_idx       Media stream index.

 @return              The transport info.

</member>
        <member name="M:pj.Call.getStreamStat(System.UInt32)">
 Get media stream statistic for the specified media index.

 @param med_idx       Media stream index.

 @return              The stream statistic.

</member>
        <member name="M:pj.Call.getStreamInfo(System.UInt32)">
 Get media stream info for the specified media index.

 @param med_idx       Media stream index.

 @return              The stream info.

</member>
        <member name="M:pj.Call.vidSetStream(pjsua_call_vid_strm_op,pj.CallVidSetStreamParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Add, remove, modify, and/or manipulate video media stream for the
 specified call. This may trigger a re-INVITE or UPDATE to be sent
 for the call.

 @param op            The video stream operation to be performed,
                      possible values are pjsua_call_vid_strm_op.
 @param param         The parameters for the video stream operation
                      (see CallVidSetStreamParam).

</member>
        <member name="M:pj.Call.vidStreamIsRunning(System.Int32,pjmedia_dir)">
 Determine if video stream for the specified call is currently running
 (i.e. has been created, started, and not being paused) for the specified
 direction.

 @param med_idx       Media stream index, or -1 to specify default video
                      media.
 @param dir           The direction to be checked.

 @return              True if stream is currently running for the
                      specified direction.

</member>
        <member name="M:pj.Call.vidGetStreamIdx">
 Get the media stream index of the default video stream in the call.
 Typically this will just retrieve the stream index of the first
 activated video stream in the call. If none is active, it will return
 the first inactive video stream.

 @return              The media stream index or -1 if no video stream
                      is present in the call.

</member>
        <member name="M:pj.Call.dump(System.Boolean,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst)">
 Dump call and media statistics to string.

 @param with_media    True to include media information too.
 @param indent        Spaces for left indentation.

 @return              Call dump and media statistics string.

</member>
        <member name="M:pj.Call.sendRequest(pj.CallSendRequestParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Send arbitrary request with the call. This is useful for example to send
 INFO request. Note that application should not use this function to send
 requests which would change the invite session's state, such as
 re-INVITE, UPDATE, PRACK, and BYE.

 @param prm.method    SIP method of the request.
 @param prm.txOption  Optional message body and/or list of headers to be
                      included in outgoing request.

</member>
        <member name="M:pj.Call.sendTypingIndication(pj.SendTypingIndicationParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Send IM typing indication inside INVITE session.

 @param prm.isTyping  True to indicate to remote that local person is
                      currently typing an IM.
 @param prm.txOption  Optional list of headers etc to be included in
                      outgoing request.

</member>
        <member name="M:pj.Call.sendInstantMessage(pj.SendInstantMessageParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Send instant messaging inside INVITE session.

 @param prm.contentType
                      MIME type.
 @param prm.content   The message content.
 @param prm.txOption  Optional list of headers etc to be included in
                      outgoing request. The body descriptor in the
                      txOption is ignored.
 @param prm.userData  Optional user data, which will be given back when
                      the IM callback is called.

</member>
        <member name="M:pj.Call.dialDtmf(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Send DTMF digits to remote using RFC 2833 payload formats.

 @param digits        DTMF string digits to be sent.

</member>
        <member name="M:pj.Call.processRedirect(pjsip_redirect_op)">
 Accept or reject redirection response. Application MUST call this
 function after it signaled PJSIP_REDIRECT_PENDING in the 
 \a onCallRedirected() callback,
 to notify the call whether to accept or reject the redirection
 to the current target. Application can use the combination of
 PJSIP_REDIRECT_PENDING command in \a onCallRedirected() callback and
 this function to ask for user permission before redirecting the call.

 Note that if the application chooses to reject or stop redirection (by
 using PJSIP_REDIRECT_REJECT or PJSIP_REDIRECT_STOP respectively), the
 call disconnection callback will be called before this function returns.
 And if the application rejects the target, the \a onCallRedirected()
 callback may also be called before this function returns if there is
 another target to try.

 @param cmd           Redirection operation to be applied to the current
                      target. The semantic of this argument is similar
                      to the description in the \a onCallRedirected()
                      callback, except that the PJSIP_REDIRECT_PENDING is
                      not accepted here.

</member>
        <member name="M:pj.Call.xferReplaces(pj.Call!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,pj.CallOpParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Initiate attended call transfer. This function will send REFER request
 to instruct remote call party to initiate new INVITE session to the URL
 of \a destCall. The party at \a dest_call then should "replace"
 the call with us with the new call from the REFER recipient.

 @param dest_call     The call to be replaced.
 @param prm.options   Application may specify
                      PJSUA_XFER_NO_REQUIRE_REPLACES to suppress the 
                      inclusion of "Require: replaces" in
                      the outgoing INVITE request created by the REFER
                      request.
 @param prm.txOption  Optional message components to be sent with
                      the request.

</member>
        <member name="M:pj.Call.xfer(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,pj.CallOpParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Initiate call transfer to the specified address. This function will send
 REFER request to instruct remote call party to initiate a new INVITE
 session to the specified destination/target.

 If application is interested to monitor the successfulness and
 the progress of the transfer request, it can implement
 \a onCallTransferStatus() callback which will report the progress
 of the call transfer request.

 @param dest          URI of new target to be contacted. The URI may be
                      in name address or addr-spec format.
 @param prm.txOption  Optional message components to be sent with
                      the request.

</member>
        <member name="M:pj.Call.update(pj.CallOpParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Send UPDATE request.

 @param prm.opt       Optional call setting, if empty, the current call
                      setting will remain unchanged.
 @param prm.txOption  Optional message components to be sent with
                      the request.

</member>
        <member name="M:pj.Call.reinvite(pj.CallOpParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Send re-INVITE.
 The final status of the request itself will be reported on the
 \a onCallMediaState() callback, which inform the application that
 the media state of the call has changed.

 @param prm.opt       Optional call setting, if empty, the current call
                      setting will remain unchanged.
 @param prm.opt.flag  Bitmask of pjsua_call_flag constants. Specifying
                      PJSUA_CALL_UNHOLD here will release call hold.
 @param prm.txOption  Optional message components to be sent with
                      the request.

</member>
        <member name="M:pj.Call.setHold(pj.CallOpParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Put the specified call on hold. This will send re-INVITE with the
 appropriate SDP to inform remote that the call is being put on hold.
 The final status of the request itself will be reported on the
 \a onCallMediaState() callback, which inform the application that
 the media state of the call has changed.

 @param prm.options   Bitmask of pjsua_call_flag constants. Currently,
                      only the flag PJSUA_CALL_UPDATE_CONTACT can be used.
 @param prm.txOption  Optional message components to be sent with
                      the request.

</member>
        <member name="M:pj.Call.hangup(pj.CallOpParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Hangup call by using method that is appropriate according to the
 call state. This function is different than answering the call with
 3xx-6xx response (with answer()), in that this function
 will hangup the call regardless of the state and role of the call,
 while answer() only works with incoming calls on EARLY
 state.

 @param prm.statusCode
                      Optional status code to be sent when we're rejecting
                      incoming call. If the value is zero, "603/Decline"
                      will be sent.
 @param prm.reason    Optional reason phrase to be sent when we're
                      rejecting incoming call. If empty, default text
                      will be used.
 @param prm.txOption  Optional list of headers etc to be added to outgoing
                      request/response message.

</member>
        <member name="M:pj.Call.answer(pj.CallOpParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Send response to incoming INVITE request with call setting param.
 Depending on the status code specified as parameter, this function may
 send provisional response, establish the call, or terminate the call.
 Notes about call setting:
  - if call setting is changed in the subsequent call to this function,
    only the first call setting supplied will applied. So normally
    application will not supply call setting before getting confirmation
    from the user.
  - if no call setting is supplied when SDP has to be sent, i.e: answer
    with status code 183 or 2xx, the default call setting will be used,
    check CallSetting for its default values.

 @param prm.opt       Optional call setting.
 @param prm.statusCode   Status code, (100-699).
 @param prm.reason    Optional reason phrase. If empty, default text
                      will be used.
 @param prm.txOption  Optional list of headers etc to be added to outgoing
                      response message. Note that this message data will
                      be persistent in all next answers/responses for this
                      INVITE request.

</member>
        <member name="M:pj.Call.makeCall(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,pj.CallOpParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Make outgoing call to the specified URI.

 @param dst_uri       URI to be put in the To header (normally is the same
                      as the target URI).
 @param prm.opt       Optional call setting.
 @param prm.txOption  Optional headers etc to be added to outgoing INVITE
                      request.

</member>
        <member name="M:pj.Call.getRemNatType">
 Get the NAT type of remote's endpoint. This is a proprietary feature
 of PJSUA-LIB which sends its NAT type in the SDP when \a natTypeInSdp
 is set in UaConfig.

 This function can only be called after SDP has been received from remote,
 which means for incoming call, this function can be called as soon as
 call is received as long as incoming call contains SDP, and for outgoing
 call, this function can be called only after SDP is received (normally in
 200/OK response to INVITE). As a general case, application should call
 this function after or in \a onCallMediaState() callback.

 @return              The NAT type.

 @see Endpoint::natGetType(), natTypeInSdp

</member>
        <member name="M:pj.Call.getUserData">
 Get user data attached to the call, which has been previously set with
 setUserData().

 @return              The user data.

</member>
        <member name="M:pj.Call.setUserData(System.Void*)">
 Attach application specific data to the call. Application can then
 inspect this data by calling getUserData().

 @param user_data     Arbitrary data to be attached to the call.

</member>
        <member name="M:pj.Call.remoteHasCap(System.Int32,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Check if remote peer support the specified capability.

 @param htype         The header type (pjsip_hdr_e) to be checked, which
                      value may be:
                      - PJSIP_H_ACCEPT
                      - PJSIP_H_ALLOW
                      - PJSIP_H_SUPPORTED
 @param hname         If htype specifies PJSIP_H_OTHER, then the header
                      name must be supplied in this argument. Otherwise
                      the value must be set to empty string ("").
 @param token         The capability token to check. For example, if \a
                      htype is PJSIP_H_ALLOW, then \a token specifies the
                      method names; if \a htype is PJSIP_H_SUPPORTED, then
                      \a token specifies the extension names such as
                      "100rel".

 @return              PJSIP_DIALOG_CAP_SUPPORTED if the specified
                      capability is explicitly supported, see
                      pjsip_dialog_cap_status for more info.

</member>
        <member name="M:pj.Call.getMedia(System.UInt32)">
 Get media for the specified media index.

 @param med_idx       Media index.

 @return              The media or NULL if invalid or inactive.

</member>
        <member name="M:pj.Call.hasMedia">
 Check if call has an active media session.

 @return              True if yes.

</member>
        <member name="M:pj.Call.lookup(System.Int32)">
 Get the Call class for the specified call Id.

 @param call_id       The call ID to lookup

 @return              The Call instance or NULL if not found.

</member>
        <member name="M:pj.Call.getId">
 Get PJSUA-LIB call ID or index associated with this call.

 @return              Integer greater than or equal to zero.

</member>
        <member name="M:pj.Call.isActive">
 Check if this call has active INVITE session and the INVITE
 session has not been disconnected.

 @return              True if call is active.

</member>
        <member name="M:pj.Call.getInfo">
 Obtain detail information about this call.

 @return              Call info.

</member>
        <member name="M:pj.Call.Dispose">
Destructor.

</member>
        <member name="M:pj.Call.#ctor(pj.Account*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
Constructor.

</member>
        <member name="T:pj.Call">
Call.

</member>
        <member name="M:pj.CallVidSetStreamParam.#ctor">
Default constructor

</member>
        <member name="F:pj.CallVidSetStreamParam.capDev">
 Specify the video capture device ID. This can be set to
 PJMEDIA_VID_DEFAULT_CAPTURE_DEV to specify the default capture
 device as configured in the account.

 This field is valid for the following video stream operations:
 PJSUA_CALL_VID_STRM_ADD and PJSUA_CALL_VID_STRM_CHANGE_CAP_DEV.

 Default: PJMEDIA_VID_DEFAULT_CAPTURE_DEV.

</member>
        <member name="F:pj.CallVidSetStreamParam.dir">
 Specify the media stream direction.

 This field is valid for the following video stream operations:
 PJSUA_CALL_VID_STRM_ADD and PJSUA_CALL_VID_STRM_CHANGE_DIR.

 Default: PJMEDIA_DIR_ENCODING_DECODING

</member>
        <member name="F:pj.CallVidSetStreamParam.medIdx">
 Specify the media stream index. This can be set to -1 to denote
 the default video stream in the call, which is the first active
 video stream or any first video stream if none is active.

 This field is valid for all video stream operations, except
 PJSUA_CALL_VID_STRM_ADD.

 Default: -1 (first active video stream, or any first video stream
              if none is active)

</member>
        <member name="T:pj.CallVidSetStreamParam">
This structure contains parameters for Call::vidSetStream()

</member>
        <member name="M:pj.CallSendRequestParam.#ctor">
Default constructor initializes with zero/empty values.

</member>
        <member name="F:pj.CallSendRequestParam.txOption">
Message body and/or list of headers etc to be included in
outgoing request.

</member>
        <member name="F:pj.CallSendRequestParam.method">
SIP method of the request.

</member>
        <member name="T:pj.CallSendRequestParam">
This structure contains parameters for Call::sendRequest()

</member>
        <member name="M:pj.CallOpParam.#ctor(System.Boolean)">
Default constructor initializes with zero/empty values.
Setting useDefaultCallSetting to true will initialize opt with default
call setting values.

</member>
        <member name="F:pj.CallOpParam.txOption">
List of headers etc to be added to outgoing response message.
Note that this message data will be persistent in all next
answers/responses for this INVITE request.

</member>
        <member name="F:pj.CallOpParam.options">
Options.

</member>
        <member name="F:pj.CallOpParam.reason">
Reason phrase.

</member>
        <member name="F:pj.CallOpParam.statusCode">
Status code.

</member>
        <member name="F:pj.CallOpParam.opt">
The call setting.

</member>
        <member name="T:pj.CallOpParam">
@}  // PJSUA2_Call_Data_Structure

@addtogroup PJSUA2_CALL
@{

This structure contains parameters for Call::answer(), Call::hangup(),
Call::reinvite(), Call::update(), Call::xfer(), Call::xferReplaces(),
Call::setHold().

</member>
        <member name="F:pj.OnCreateMediaTransportParam.flags">
Bitmask from pjsua_create_media_transport_flag.

</member>
        <member name="F:pj.OnCreateMediaTransportParam.mediaTp">
The media transport which otherwise will be used by the call has this
callback not been implemented. Application can change this to its own
instance of media transport to be used by the call.

</member>
        <member name="F:pj.OnCreateMediaTransportParam.mediaIdx">
The media index in the SDP for which this media transport will be used.

</member>
        <member name="T:pj.OnCreateMediaTransportParam">
This structure contains parameters for Call::onCreateMediaTransport()
callback.

</member>
        <member name="F:pj.OnCallMediaTransportStateParam.sipErrorCode">
Optional SIP error code.

</member>
        <member name="F:pj.OnCallMediaTransportStateParam.status">
The last error code related to the media transport state.

</member>
        <member name="F:pj.OnCallMediaTransportStateParam.state">
The media transport state

</member>
        <member name="F:pj.OnCallMediaTransportStateParam.medIdx">
The media index.

</member>
        <member name="T:pj.OnCallMediaTransportStateParam">
This structure contains parameters for Call::onCallMediaTransportState()
callback.

</member>
        <member name="F:pj.OnCallMediaEventParam.ev">
The media event.

</member>
        <member name="F:pj.OnCallMediaEventParam.medIdx">
The media stream index.

</member>
        <member name="T:pj.OnCallMediaEventParam">
This structure contains parameters for Call::onCallMediaEvent() callback.

</member>
        <member name="F:pj.OnCallRedirectedParam.e">
The event that caused this callback to be called.
This could be the receipt of 3xx response, or 4xx/5xx response
received for the INVITE sent to subsequent targets, or empty
(e.type == PJSIP_EVENT_UNKNOWN)
if this callback is called from within Call::processRedirect()
context.

</member>
        <member name="F:pj.OnCallRedirectedParam.targetUri">
The current target to be tried.

</member>
        <member name="T:pj.OnCallRedirectedParam">
This structure contains parameters for Call::onCallRedirected() callback.

</member>
        <member name="F:pj.OnCallTxOfferParam.opt">
The current call setting, application can update this setting for
generating the offer. Note that application should maintain any
active media to avoid the need for the peer to reject the offer.

</member>
        <member name="T:pj.OnCallTxOfferParam">
This structure contains parameters for Call::onCallTxOffer() callback.

</member>
        <member name="F:pj.OnCallRxOfferParam.opt">
The current call setting, application can update this setting for
answering the offer.

</member>
        <member name="F:pj.OnCallRxOfferParam.statusCode">
Status code to be returned for answering the offer. On input,
it contains status code 200. Currently, valid values are only
200 and 488.

</member>
        <member name="F:pj.OnCallRxOfferParam.offer">
The new offer received.

</member>
        <member name="T:pj.OnCallRxOfferParam">
This structure contains parameters for Call::onCallRxOffer() callback.

</member>
        <member name="F:pj.OnCallReplacedParam.newCallId">
The new call id.

</member>
        <member name="T:pj.OnCallReplacedParam">
This structure contains parameters for Call::onCallReplaced() callback.

</member>
        <member name="F:pj.OnCallReplaceRequestParam.opt">
The current call setting, application can update this setting for
the call being replaced.

</member>
        <member name="F:pj.OnCallReplaceRequestParam.reason">
Optional status text to be set by application.

</member>
        <member name="F:pj.OnCallReplaceRequestParam.statusCode">
Status code to be set by application. Application should only
return a final status (200-699)

</member>
        <member name="F:pj.OnCallReplaceRequestParam.rdata">
The incoming INVITE request to replace the call.

</member>
        <member name="T:pj.OnCallReplaceRequestParam">
This structure contains parameters for Call::onCallReplaceRequest()
callback.

</member>
        <member name="F:pj.OnCallTransferStatusParam.cont">
Initially will be set to true, application can set this to false
if it no longer wants to receive further notification (for example,
after it hangs up the call).

</member>
        <member name="F:pj.OnCallTransferStatusParam.finalNotify">
If true, no further notification will be reported. The statusCode
specified in this callback is the final status.

</member>
        <member name="F:pj.OnCallTransferStatusParam.reason">
Status progress reason.

</member>
        <member name="F:pj.OnCallTransferStatusParam.statusCode">
Status progress of the transfer request.

</member>
        <member name="T:pj.OnCallTransferStatusParam">
This structure contains parameters for Call::onCallTransferStatus()
callback.

</member>
        <member name="F:pj.OnCallTransferRequestParam.opt">
The current call setting, application can update this setting
for the call being transferred.

</member>
        <member name="F:pj.OnCallTransferRequestParam.statusCode">
Status code to be returned for the call transfer request. On input,
it contains status code 200.

</member>
        <member name="F:pj.OnCallTransferRequestParam.dstUri">
The destination where the call will be transferred to.

</member>
        <member name="T:pj.OnCallTransferRequestParam">
This structure contains parameters for Call::onCallTransferRequest()
callback.

</member>
        <member name="F:pj.OnDtmfDigitParam.digit">
DTMF ASCII digit.

</member>
        <member name="T:pj.OnDtmfDigitParam">
This structure contains parameters for Call::onDtmfDigit()
callback.

</member>
        <member name="F:pj.OnStreamDestroyedParam.streamIdx">
Stream index in the media session.

</member>
        <member name="F:pj.OnStreamDestroyedParam.stream">
Media stream.

</member>
        <member name="T:pj.OnStreamDestroyedParam">
This structure contains parameters for Call::onStreamDestroyed()
callback.

</member>
        <member name="F:pj.OnStreamCreatedParam.pPort">
On input, it specifies the media port of the stream. Application
may modify this pointer to point to different media port to be
registered to the conference bridge.

</member>
        <member name="F:pj.OnStreamCreatedParam.streamIdx">
Stream index in the media session.

</member>
        <member name="F:pj.OnStreamCreatedParam.stream">
Media stream.

</member>
        <member name="T:pj.OnStreamCreatedParam">
This structure contains parameters for Call::onStreamCreated()
callback.

</member>
        <member name="F:pj.OnCallSdpCreatedParam.remSdp">
The remote SDP, will be empty if local is SDP offerer.

</member>
        <member name="F:pj.OnCallSdpCreatedParam.sdp">
The SDP has just been created.

</member>
        <member name="T:pj.OnCallSdpCreatedParam">
This structure contains parameters for Call::onCallSdpCreated() callback.

</member>
        <member name="T:pj.OnCallMediaStateParam">
This structure contains parameters for Call::onCallMediaState() callback.

</member>
        <member name="F:pj.OnCallTsxStateParam.e">
Transaction event that caused the state change.

</member>
        <member name="T:pj.OnCallTsxStateParam">
This structure contains parameters for Call::onCallTsxState() callback.

</member>
        <member name="F:pj.OnCallStateParam.e">
Event which causes the call state to change.

</member>
        <member name="T:pj.OnCallStateParam">
This structure contains parameters for Call::onCallState() callback.

</member>
        <member name="M:pj.StreamStat.fromPj(pjsua_stream_stat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="F:pj.StreamStat.jbuf">
Jitter buffer statistic.

</member>
        <member name="F:pj.StreamStat.rtcp">
RTCP statistic.

</member>
        <member name="T:pj.StreamStat">
Media stream statistic.

</member>
        <member name="M:pj.StreamInfo.fromPj(pjsua_stream_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="F:pj.StreamInfo.codecParam">
Optional codec param.

</member>
        <member name="F:pj.StreamInfo.codecClockRate">
Codec clock rate.

</member>
        <member name="F:pj.StreamInfo.codecName">
Codec name.

</member>
        <member name="F:pj.StreamInfo.rxPt">
Incoming codec payload type.

</member>
        <member name="F:pj.StreamInfo.txPt">
Outgoing codec payload type.

</member>
        <member name="F:pj.StreamInfo.remoteRtcpAddress">
Optional remote RTCP address

</member>
        <member name="F:pj.StreamInfo.remoteRtpAddress">
Remote RTP address

</member>
        <member name="F:pj.StreamInfo.dir">
Media direction.

</member>
        <member name="F:pj.StreamInfo.proto">
Transport protocol (RTP/AVP, etc.)

</member>
        <member name="F:pj.StreamInfo.type">
Media type of this stream.

</member>
        <member name="T:pj.StreamInfo">
Media stream info.

</member>
        <member name="M:pj.CallInfo.fromPj(pjsua_call_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="F:pj.CallInfo.remVideoCount">
Number of video streams offered by remote

</member>
        <member name="F:pj.CallInfo.remAudioCount">
Number of audio streams offered by remote

</member>
        <member name="F:pj.CallInfo.remOfferer">
Flag if remote was SDP offerer

</member>
        <member name="F:pj.CallInfo.totalDuration">
Total call duration, including set-up time

</member>
        <member name="F:pj.CallInfo.connectDuration">
Up-to-date call connected duration (zero when call is not
established)

</member>
        <member name="F:pj.CallInfo.provMedia">
Array of provisional media information. This contains the media info
in the provisioning state, that is when the media session is being
created/updated (SDP offer/answer is on progress).

</member>
        <member name="F:pj.CallInfo.media">
Array of active media information.

</member>
        <member name="F:pj.CallInfo.lastReason">
The reason phrase describing the last status.

</member>
        <member name="F:pj.CallInfo.lastStatusCode">
Last status code heard, which can be used as cause code

</member>
        <member name="F:pj.CallInfo.stateText">
Text describing the state

</member>
        <member name="F:pj.CallInfo.state">
Call state

</member>
        <member name="F:pj.CallInfo.setting">
Call setting

</member>
        <member name="F:pj.CallInfo.callIdString">
Dialog Call-ID string.

</member>
        <member name="F:pj.CallInfo.remoteContact">
Remote contact

</member>
        <member name="F:pj.CallInfo.remoteUri">
Remote URI

</member>
        <member name="F:pj.CallInfo.localContact">
Local Contact

</member>
        <member name="F:pj.CallInfo.localUri">
Local URI

</member>
        <member name="F:pj.CallInfo.accId">
The account ID where this call belongs.

</member>
        <member name="F:pj.CallInfo.role">
Initial call role (UAC == caller)

</member>
        <member name="F:pj.CallInfo.id">
Call identification.

</member>
        <member name="T:pj.CallInfo">
Call information. Application can query the call information
by calling Call::getInfo().

</member>
        <member name="D:pj.CallMediaInfoVector">
Array of call media info 
</member>
        <member name="M:pj.CallMediaInfo.fromPj(pjsua_call_media_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="M:pj.CallMediaInfo.#ctor">
Default constructor

</member>
        <member name="F:pj.CallMediaInfo.videoCapDev">
The video capture device for outgoing transmission, if any,
or PJMEDIA_VID_INVALID_DEV. Only valid if the media type is video.

</member>
        <member name="F:pj.CallMediaInfo.videoWindow">
The video window instance for incoming video. Only valid if
videoIncomingWindowId is not PJSUA_INVALID_ID and
the media type is video.

</member>
        <member name="F:pj.CallMediaInfo.videoIncomingWindowId">
The window id for incoming video, if any, or
PJSUA_INVALID_ID. Only valid if the media type is video.

</member>
        <member name="F:pj.CallMediaInfo.audioConfSlot">
The conference port number for the call. Only valid if the media type
is audio.

</member>
        <member name="F:pj.CallMediaInfo.status">
Call media status.

</member>
        <member name="F:pj.CallMediaInfo.dir">
Media direction.

</member>
        <member name="F:pj.CallMediaInfo.type">
Media type.

</member>
        <member name="F:pj.CallMediaInfo.index">
Media index in SDP.

</member>
        <member name="T:pj.CallMediaInfo">
Call media information.

</member>
        <member name="M:pj.CallSetting.toPj">
Convert to pjsip

</member>
        <member name="M:pj.CallSetting.fromPj(pjsua_call_setting!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="M:pj.CallSetting.isEmpty">
 Check if the settings are set with empty values.

 @return      True if the settings are empty.

</member>
        <member name="M:pj.CallSetting.#ctor(System.Int32)">
Default constructor initializes with empty or default values.

</member>
        <member name="F:pj.CallSetting.videoCount">
 Number of simultaneous active video streams for this call. Setting
 this to zero will disable video in this call.

 Default: 1 (if video feature is enabled, otherwise it is zero)

</member>
        <member name="F:pj.CallSetting.audioCount">
 Number of simultaneous active audio streams for this call. Setting
 this to zero will disable audio in this call.

 Default: 1

</member>
        <member name="F:pj.CallSetting.reqKeyframeMethod">
 This flag controls what methods to request keyframe are allowed on
 the call. Value is bitmask of pjsua_vid_req_keyframe_method.

 Default: PJSUA_VID_REQ_KEYFRAME_SIP_INFO |
          PJSUA_VID_REQ_KEYFRAME_RTCP_PLI

</member>
        <member name="F:pj.CallSetting.flag">
 Bitmask of pjsua_call_flag constants.

 Default: PJSUA_CALL_INCLUDE_DISABLED_MEDIA

</member>
        <member name="T:pj.CallSetting">
Call settings.

</member>
        <member name="M:pj.MediaTransportInfo.fromPj(pjmedia_transport_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="F:pj.MediaTransportInfo.srcRtcpName">
Remote address where RTCP originated from.

</member>
        <member name="F:pj.MediaTransportInfo.srcRtpName">
Remote address where RTP originated from.

</member>
        <member name="T:pj.MediaTransportInfo">
This structure describes media transport informations. It corresponds to the
pjmedia_transport_info structure.

</member>
        <member name="M:pj.MediaEvent.fromPj(pjmedia_event!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="F:pj.MediaEvent.pjMediaEvent">
Pointer to original pjmedia_event. Only valid when the struct
is converted from PJSIP's pjmedia_event.

</member>
        <member name="F:pj.MediaEvent.data">
Additional data/parameters about the event. The type of data
will be specific to the event type being reported.

</member>
        <member name="F:pj.MediaEvent.type">
The event type.

</member>
        <member name="T:pj.MediaEvent">
This structure describes a media event. It corresponds to the
pjmedia_event structure.

</member>
        <member name="F:pj.MediaEventData.ptr">
Pointer to storage to user event data, if it's outside
this struct

</member>
        <member name="F:pj.MediaEventData.fmtChanged">
Media format changed event data.

</member>
        <member name="T:pj.MediaEventData">
Media event data.

</member>
        <member name="T:pj.MediaFmtChangedEvent">
This structure describes a media format changed event.

</member>
        <member name="M:pj.SdpSession.fromPj(pjmedia_sdp_session!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="F:pj.SdpSession.pjSdpSession">
Pointer to its original pjmedia_sdp_session. Only valid when the struct
is converted from PJSIP's pjmedia_sdp_session.

</member>
        <member name="F:pj.SdpSession.wholeSdp">
The whole SDP as a string.

</member>
        <member name="T:pj.SdpSession">
This structure describes SDP session description. It corresponds to the
pjmedia_sdp_session structure.

</member>
        <member name="M:pj.JbufState.fromPj(pjmedia_jb_state!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="T:pj.JbufState">
This structure describes jitter buffer state.

</member>
        <member name="M:pj.RtcpStat.fromPj(pjmedia_rtcp_stat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="T:pj.RtcpStat">
Bidirectional RTP stream statistics.

</member>
        <member name="M:pj.RtcpSdes.fromPj(pjmedia_rtcp_sdes!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="T:pj.RtcpSdes">
RTCP SDES structure.

</member>
        <member name="M:pj.RtcpStreamStat.fromPj(pjmedia_rtcp_stream_stat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="T:pj.RtcpStreamStat">
Unidirectional RTP stream statistics.

</member>
        <member name="T:pj.LossType">
Types of loss detected.

</member>
        <member name="M:pj.MathStat.fromPj(pj_math_stat!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="M:pj.MathStat.#ctor">
Default constructor

</member>
        <member name="T:pj.MathStat">
This structure describes statistics state.

</member>
        <member name="D:pj.MediaTransport">
Media transport, corresponds to pjmedia_transport

</member>
        <member name="D:pj.MediaStream">
Media stream, corresponds to pjmedia_stream

</member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.set_MaxBps(System.UInt32)">
            <summary>
Gets or sets the maximum bitrate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.get_MaxBps">
            <summary>
Gets or sets the maximum bitrate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.set_AvgBps(System.UInt32)">
            <summary>
Gets or sets the average bitrate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.get_AvgBps">
            <summary>
Gets or sets the average bitrate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.set_FpsDenum(System.Int32)">
            <summary>
Gets or sets the frames per second denumerator.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.get_FpsDenum">
            <summary>
Gets or sets the frames per second denumerator.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.set_FpsNum(System.Int32)">
            <summary>
Gets or sets the frames per second numerator.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.get_FpsNum">
            <summary>
Gets or sets the frames per second numerator.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.set_Height(System.UInt32)">
            <summary>
Gets or sets the video height.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.get_Height">
            <summary>
Gets or sets the video height.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.set_Width(System.UInt32)">
            <summary>
Gets or sets the video width.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.get_Width">
            <summary>
Gets or sets the video width.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.set_MediaFormats(Nequeo.Net.PjSip.MediaFormat[])">
            <summary>
Gets or sets the array of media formats.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.get_MediaFormats">
            <summary>
Gets or sets the array of media formats.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.set_Routes(System.UInt32)">
            <summary>
Gets or sets the supported audio device routes, as bitmask combination
The value may be zero if the device does not support audio routing.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.get_Routes">
            <summary>
Gets or sets the supported audio device routes, as bitmask combination
The value may be zero if the device does not support audio routing.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.set_Caps(System.UInt32)">
            <summary>
Gets or sets the device capabilities, as bitmask combination.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.get_Caps">
            <summary>
Gets or sets the device capabilities, as bitmask combination.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.set_Driver(System.String)">
            <summary>
Gets or sets the underlying driver name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.get_Driver">
            <summary>
Gets or sets the underlying driver name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.set_DefaultSamplesPerSec(System.UInt32)">
            <summary>
Gets or sets the default sampling rate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.get_DefaultSamplesPerSec">
            <summary>
Gets or sets the default sampling rate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.set_OutputCount(System.UInt32)">
            <summary>
Gets or sets the maximum number of output channels supported by this device. If the
value is zero, the device does not support output operation(i.e. it is an input only device).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.get_OutputCount">
            <summary>
Gets or sets the maximum number of output channels supported by this device. If the
value is zero, the device does not support output operation(i.e. it is an input only device).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.set_InputCount(System.UInt32)">
            <summary>
Get or sets the maximum number of input channels supported by this device. If the
value is zero, the device does not support input operation (i.e. it is a playback only device).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.get_InputCount">
            <summary>
Get or sets the maximum number of input channels supported by this device. If the
value is zero, the device does not support input operation (i.e. it is a playback only device).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.set_Name(System.String)">
            <summary>
Gets or sets the device name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.get_Name">
            <summary>
Gets or sets the device name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.set_PresenceStatus(Nequeo.Net.PjSip.PresenceState)">
            <summary>
Gets or sets the presence status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.get_PresenceStatus">
            <summary>
Gets or sets the presence status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.set_SubTermReason(System.String)">
            <summary>
Gets or sets the Specifies the last presence subscription termination reason. If 
presence subscription is currently active, the value will be empty.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.get_SubTermReason">
            <summary>
Gets or sets the Specifies the last presence subscription termination reason. If 
presence subscription is currently active, the value will be empty.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.set_SubTermCode(&lt;unknown type&gt;)">
            <summary>
Gets or sets the specifies the last presence subscription termination code. This would
return the last status of the SUBSCRIBE request.If the subscription
is terminated with NOTIFY by the server, this value will be set to
200, and subscription termination reason will be given in the
SubTermReason field.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.get_SubTermCode">
            <summary>
Gets or sets the specifies the last presence subscription termination code. This would
return the last status of the SUBSCRIBE request.If the subscription
is terminated with NOTIFY by the server, this value will be set to
200, and subscription termination reason will be given in the
SubTermReason field.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.set_SubStateName(System.String)">
            <summary>
Gets or sets the representation of subscription state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.get_SubStateName">
            <summary>
Gets or sets the representation of subscription state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.set_SubState(&lt;unknown type&gt;)">
            <summary>
Gets or sets If PresMonitorEnabled is true, this specifies the last state of
the presence subscription. If presence subscription session is currently
active, the value will be EVSUB_STATE_ACTIVE.If presence
subscription request has been rejected, the value will be
EVSUB_STATE_TERMINATED, and the termination reason will be
specified in SubTermReason.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.get_SubState">
            <summary>
Gets or sets If PresMonitorEnabled is true, this specifies the last state of
the presence subscription. If presence subscription session is currently
active, the value will be EVSUB_STATE_ACTIVE.If presence
subscription request has been rejected, the value will be
EVSUB_STATE_TERMINATED, and the termination reason will be
specified in SubTermReason.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.set_PresMonitorEnabled(System.Boolean)">
            <summary>
Gets or sets a flag to indicate that we should monitor the presence information for
this buddy(normally yes, unless explicitly disabled).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.get_PresMonitorEnabled">
            <summary>
Gets or sets a flag to indicate that we should monitor the presence information for
this buddy(normally yes, unless explicitly disabled).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.set_Info(System.String)">
            <summary>
Gets or sets the contact info, only available when presence subscription has
been established to the buddy.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.get_Info">
            <summary>
Gets or sets the contact info, only available when presence subscription has
been established to the buddy.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.set_Uri(System.String)">
            <summary>
Gets or sets the full URI of the contact.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.get_Uri">
            <summary>
Gets or sets the full URI of the contact.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.set_CodecClockRate(System.UInt32)">
            <summary>
Gets or sets the codec clock rate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.get_CodecClockRate">
            <summary>
Gets or sets the codec clock rate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.set_CodecName(System.String)">
            <summary>
Gets or sets the codec name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.get_CodecName">
            <summary>
Gets or sets the codec name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.set_RxPayloadType(System.UInt32)">
            <summary>
Gets or sets the incoming codec payload type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.get_RxPayloadType">
            <summary>
Gets or sets the incoming codec payload type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.set_TxPayloadType(System.UInt32)">
            <summary>
Gets or sets the outgoing codec payload type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.get_TxPayloadType">
            <summary>
Gets or sets the outgoing codec payload type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.set_RemoteRtcpAddress(System.String)">
            <summary>
Gets or sets the optional remote RTCP address.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.get_RemoteRtcpAddress">
            <summary>
Gets or sets the optional remote RTCP address.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.set_RemoteRtpAddress(System.String)">
            <summary>
Gets or sets the remote RTP address.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.get_RemoteRtpAddress">
            <summary>
Gets or sets the remote RTP address.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.set_Direction(&lt;unknown type&gt;)">
            <summary>
Gets or sets the media direction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.get_Direction">
            <summary>
Gets or sets the media direction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.set_TransportProtocol(&lt;unknown type&gt;)">
            <summary>
Gets or sets the transport protocol (RTP/AVP, etc.)
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.get_TransportProtocol">
            <summary>
Gets or sets the transport protocol (RTP/AVP, etc.)
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.set_Type(&lt;unknown type&gt;)">
            <summary>
Gets or sets the media type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.get_Type">
            <summary>
Gets or sets the media type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMethodData.call_deinit_tonegen(System.Int32)">
            <summary>
Call de-initialise tone generator.
</summary>
            <param name="call_id">The call id.</param>
            <summary>
Call de-initialise tone generator.
</summary>
            <param name="call_id">The call id.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMethodData.call_play_digit(System.Int32,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
            <summary>
Call play digit tone.
</summary>
            <param name="call_id">The call id.</param>
            <param name="digits">The digits.</param>
            <summary>
Call play digit tone.
</summary>
            <param name="call_id">The call id.</param>
            <param name="digits">The digits.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMethodData.call_init_tonegen(System.Int32)">
            <summary>
Call initialise tone generator.
</summary>
            <param name="call_id">The call id.</param>
            <returns>The stream info.</returns>
            <summary>
Call initialise tone generator.
</summary>
            <param name="call_id">The call id.</param>
            <returns>The stream info.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMethodData.Dispose">
            <summary>
Call method data.
</summary>
            <summary>
Call method data.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMethodData.#ctor">
            <summary>
Call method data.
</summary>
            <summary>
Call method data.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallMethodData">
            <summary>
Call method data.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.call_data">
            <summary>
Structure containing current call data.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.set_NatTypeName(System.String)">
            <summary>
Gets or sets the text describing that NAT type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.get_NatTypeName">
            <summary>
Gets or sets the text describing that NAT type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.set_NatType(Nequeo.Net.PjSip.StunNatType)">
            <summary>
Gets or sets this contains the NAT type as detected by the detection procedure.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.get_NatType">
            <summary>
Gets or sets this contains the NAT type as detected by the detection procedure.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.set_Reason(System.String)">
            <summary>
Gets or sets the text describing the status, if the status is not PJ_SUCCESS.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.get_Reason">
            <summary>
Gets or sets the text describing the status, if the status is not PJ_SUCCESS.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.set_Status(System.Int32)">
            <summary>
Gets or sets the status of the detection process.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.get_Status">
            <summary>
Gets or sets the status of the detection process.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.NatTypeName">
            <summary>
Gets or sets the text describing that NAT type.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.NatType">
            <summary>
Gets or sets this contains the NAT type as detected by the detection procedure.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.Reason">
            <summary>
Gets or sets the text describing the status, if the status is not PJ_SUCCESS.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.Status">
            <summary>
Gets or sets the status of the detection process.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnNatDetectionCompleteParam.#ctor">
            <summary>
The Endpoint has finished performing NAT type
detection that is initiated.
</summary>
            <summary>
The Endpoint has finished performing NAT type
detection that is initiated.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnNatDetectionCompleteParam">
            <summary>
The Endpoint has finished performing NAT type
detection that is initiated.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallSdpCreatedParam.set_RemoteSdp(Nequeo.Net.PjSip.SdpSession)">
            <summary>
Gets or sets the remote SDP, will be empty if local is SDP offerer.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallSdpCreatedParam.get_RemoteSdp">
            <summary>
Gets or sets the remote SDP, will be empty if local is SDP offerer.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallSdpCreatedParam.set_Sdp(Nequeo.Net.PjSip.SdpSession)">
            <summary>
Gets or sets the SDP has just been created.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallSdpCreatedParam.get_Sdp">
            <summary>
Gets or sets the SDP has just been created.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallSdpCreatedParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallSdpCreatedParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallSdpCreatedParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallSdpCreatedParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.OnContactState_Handler">
            <summary>
On Contact State function callback.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.MarshalString(System.String,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.MarshalString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.get_ContactUri">
            <summary>
Gets the contact uri.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.get_ContactConn">
            <summary>
Gets the contact details.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.SetConnectionMappings(Nequeo.Net.PjSip.ContactConnection,Nequeo.Net.PjSip.ContactMapper*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set contact connection mapping.
</summary>
            <param name="contactConnection">Contact connection configuration.</param>
            <param name="contactMapper">Contact connection mapping configuration.</param>
            <summary>
Set contact connection mapping.
</summary>
            <param name="contactConnection">Contact connection configuration.</param>
            <param name="contactMapper">Contact connection mapping configuration.</param>
        </member>
        <member name="P:Nequeo.Net.PjSip.Contact.ContactUri">
            <summary>
Gets the contact uri.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.GetContactCallback">
            <summary>
Get the contact callback reference.
</summary>
            <summary>
Get the contact callback reference.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.SendTypingIndication(Nequeo.Net.PjSip.SendTypingIndicationParam)">
            <summary>
Send typing indication outside dialog.
</summary>
            <param name="sendTypingIndicationParam">Sending instant message parameter.</param>
            <summary>
Send typing indication outside dialog.
</summary>
            <param name="sendTypingIndicationParam">Sending instant message parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.SendInstantMessage(Nequeo.Net.PjSip.SendInstantMessageParam)">
            <summary>
Send instant messaging outside dialog, using this contact's specified
account for route set and authentication.
</summary>
            <param name="sendInstantMessageParam">Sending instant message parameter.</param>
            <summary>
Send instant messaging outside dialog, using this contact's specified
account for route set and authentication.
</summary>
            <param name="sendInstantMessageParam">Sending instant message parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.SubscribePresence(System.Boolean)">
            <summary>
Enable or disable contact's presence monitoring. Once contact's presence is
subscribed, application will be informed about contact's presence status
changed via OnContactState() callback.
</summary>
            <param name="subscribe">Specify true to activate presence subscription.</param>
            <summary>
Enable or disable contact's presence monitoring. Once contact's presence is
subscribed, application will be informed about contact's presence status
changed via OnContactState() callback.
</summary>
            <param name="subscribe">Specify true to activate presence subscription.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.UpdatePresence">
            <summary>
Update the presence information for the contact. Although the library
periodically refreshes the presence subscription for all contacts,
some application may want to refresh the contact's presence subscription
immediately, and in this case it can use this function to accomplish
this.

Note that the contact's presence subscription will only be initiated
if presence monitoring is enabled for the contact. See
subscribePresence() for more info. Also if presence subscription for
the contact is already active, this function will not do anything.

Once the presence subscription is activated successfully for the contact,
application will be notified about the contact's presence status in the
OnContactState() callback.
</summary>
            <summary>
Update the presence information for the contact. Although the library
periodically refreshes the presence subscription for all contacts,
some application may want to refresh the contact's presence subscription
immediately, and in this case it can use this function to accomplish
this.

Note that the contact's presence subscription will only be initiated
if presence monitoring is enabled for the contact. See
subscribePresence() for more info. Also if presence subscription for
the contact is already active, this function will not do anything.

Once the presence subscription is activated successfully for the contact,
application will be notified about the contact's presence status in the
OnContactState() callback.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.IsValid">
            <summary>
Is the contact still valid.
</summary>
            <returns>True if valid: else false.</returns>
            <summary>
Is the contact still valid.
</summary>
            <returns>True if valid: else false.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.GetInfo">
            <summary>
Get detailed contact info.
</summary>
            <returns>The contact info.</returns>
            <summary>
Get detailed contact info.
</summary>
            <returns>The contact info.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.Create">
            <summary>
Create the contact.
</summary>
            <summary>
Create the contact.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.Contact.ContactConn">
            <summary>
Gets the contact details.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Contact.OnContactState">
            <summary>
Notify application when the contact state has changed.
Application may then query the contact info to get the details.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.Finalize">
            <summary>
Sip account contact finalizer.
</summary>
            <summary>
Sip account finalizer.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.Dispose">
            <summary>
Sip account contact.
</summary>
            <summary>
Contact information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Contact.#ctor(Nequeo.Net.PjSip.Account,Nequeo.Net.PjSip.ContactConnection)">
            <summary>
Sip account contact.
</summary>
            <param name="account">The Sip account.</param>
            <param name="contactConnection">The Sip contact connection configuration.</param>
            <summary>
Sip account contact.
</summary>
            <param name="account">The Sip account.</param>
            <param name="contactConnection">The Sip contact connection configuration.</param>
        </member>
        <member name="T:Nequeo.Net.PjSip.Contact">
            <summary>
Sip account contact.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.set_VideoWindowEx(Nequeo.Net.PjSip.VideoWindow)">
            <summary>
The video window instance for incoming video. Only valid if
videoIncomingWindowId is not PJSUA_INVALID_ID and
the media type is video.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.get_VideoWindowEx">
            <summary>
The video window instance for incoming video. Only valid if
videoIncomingWindowId is not PJSUA_INVALID_ID and
the media type is video.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.set_VideoCapDev(System.Int32)">
            <summary>
Gets or sets the video capture device for outgoing transmission, if any,
or PJMEDIA_VID_INVALID_DEV.Only valid if the media type is video.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.get_VideoCapDev">
            <summary>
Gets or sets the video capture device for outgoing transmission, if any,
or PJMEDIA_VID_INVALID_DEV.Only valid if the media type is video.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.set_VideoIncomingWindowId(System.Int32)">
            <summary>
Gets or sets the window id for incoming video, if any, or
PJSUA_INVALID_ID. Only valid if the media type is video.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.get_VideoIncomingWindowId">
            <summary>
Gets or sets the window id for incoming video, if any, or
PJSUA_INVALID_ID. Only valid if the media type is video.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.set_AudioConfSlot(System.Int32)">
            <summary>
Gets or sets the conference port number for the call. Only valid if the media type is audio.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.get_AudioConfSlot">
            <summary>
Gets or sets the conference port number for the call. Only valid if the media type is audio.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.set_Status(&lt;unknown type&gt;)">
            <summary>
Gets or sets the call media status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.get_Status">
            <summary>
Gets or sets the call media status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.set_Direction(&lt;unknown type&gt;)">
            <summary>
Gets or sets the media direction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.get_Direction">
            <summary>
Gets or sets the media direction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.set_Type(&lt;unknown type&gt;)">
            <summary>
Gets or sets the media type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.get_Type">
            <summary>
Gets or sets the media type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.set_Index(System.UInt32)">
            <summary>
Gets or sets the media index in SDP.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.get_Index">
            <summary>
Gets or sets the media index in SDP.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTimerParam.set_MiliisecondDelay(System.UInt32)">
            <summary>
Gets or sets the interval of this timer, in miliseconds.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTimerParam.get_MiliisecondDelay">
            <summary>
Gets or sets the interval of this timer, in miliseconds.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnTimerParam.MiliisecondDelay">
            <summary>
Gets or sets the interval of this timer, in miliseconds.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTimerParam.#ctor">
            <summary>
The timer was scheduled by
utilTimerSchedule().
</summary>
            <summary>
The timer was scheduled by
utilTimerSchedule().
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnTimerParam">
            <summary>
The timer was scheduled by
utilTimerSchedule().
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SdpSession.set_WholeSdp(System.String)">
            <summary>
Gets or sets the whole SDP as a string.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SdpSession.get_WholeSdp">
            <summary>
Gets or sets the whole SDP as a string.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.set_Uri(System.String)">
            <summary>
Gets or sets the account URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.get_Uri">
            <summary>
Gets or sets the account URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.set_RegStatusText(System.String)">
            <summary>
Gets or sets a describing the registration status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.get_RegStatusText">
            <summary>
Gets or sets a describing the registration status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.set_RegStatus(&lt;unknown type&gt;)">
            <summary>
Gets or sets the status code.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.get_RegStatus">
            <summary>
Gets or sets the status code.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.set_RegLastErr(System.Int32)">
            <summary>
Gets or sets the Last registration error code. When the status field contains a SIP
status code that indicates a registration failure, last registration
error code contains the error code that causes the failure.In any
other case, its value is zero.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.get_RegLastErr">
            <summary>
Gets or sets the Last registration error code. When the status field contains a SIP
status code that indicates a registration failure, last registration
error code contains the error code that causes the failure.In any
other case, its value is zero.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.set_RegIsConfigured(System.Boolean)">
            <summary>
Gets or sets a flag to tell whether this account has registration setting (reg_uri is not empty).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.get_RegIsConfigured">
            <summary>
Gets or sets a flag to tell whether this account has registration setting (reg_uri is not empty).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.set_RegIsActive(System.Boolean)">
            <summary>
Gets or sets a flag to tell whether this account is currently registered (has active registration session).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.get_RegIsActive">
            <summary>
Gets or sets a flag to tell whether this account is currently registered (has active registration session).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.set_RegExpiresSec(System.Int32)">
            <summary>
Gets or sets an up to date expiration interval for account registration session.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.get_RegExpiresSec">
            <summary>
Gets or sets an up to date expiration interval for account registration session.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.set_OnlineStatusText(System.String)">
            <summary>
Gets or sets the presence online status text.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.get_OnlineStatusText">
            <summary>
Gets or sets the presence online status text.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.set_OnlineStatus(System.Boolean)">
            <summary>
Gets or sets the presence online status for this account.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.get_OnlineStatus">
            <summary>
Gets or sets the presence online status for this account.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.set_IsDefault(System.Boolean)">
            <summary>
Gets or sets a flag to indicate whether this is the default account.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.get_IsDefault">
            <summary>
Gets or sets a flag to indicate whether this is the default account.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.set_Id(System.Int32)">
            <summary>
Sets the the data, which can be a plain text password or a hashed digest.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.get_Id">
            <summary>
Gets the the data, which can be a plain text password or a hashed digest.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthenticateCredentials.set_AuthCredentials(Nequeo.Net.PjSip.AuthCredInfo[])">
            <summary>
Sets the authenticate credentials.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthenticateCredentials.get_AuthCredentials">
            <summary>
Gets the authenticate credentials.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnDtmfDigitParam.set_Digit(System.String)">
            <summary>
Gets or sets the DTMF ASCII digit.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnDtmfDigitParam.get_Digit">
            <summary>
Gets or sets the DTMF ASCII digit.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnDtmfDigitParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnDtmfDigitParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnDtmfDigitParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnDtmfDigitParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.set_Code(&lt;unknown type&gt;)">
            <summary>
Gets or sets the Status code to be set by application. Application should only
return a final status(200 - 699).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.get_Code">
            <summary>
Gets or sets the Status code to be set by application. Application should only
return a final status(200 - 699).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.set_Reason(System.String)">
            <summary>
Gets or sets the optional status text to be set by application.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.get_Reason">
            <summary>
Gets or sets the optional status text to be set by application.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.set_Setting(Nequeo.Net.PjSip.CallSetting)">
            <summary>
Gets or sets the current call setting, application can update this setting for the call being replaced.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.get_Setting">
            <summary>
Gets or sets the current call setting, application can update this setting for the call being replaced.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.set_RxData(Nequeo.Net.PjSip.SipRxData)">
            <summary>
Gets or sets the incoming INVITE request to replace the call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.get_RxData">
            <summary>
Gets or sets the incoming INVITE request to replace the call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendInstantMessageParam.set_TxOption(Nequeo.Net.PjSip.SipTxOption)">
            <summary>
Gets or sets the list of headers etc to be included in outgoing request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendInstantMessageParam.get_TxOption">
            <summary>
Gets or sets the list of headers etc to be included in outgoing request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendInstantMessageParam.set_Content(System.String)">
            <summary>
Gets or sets the message content.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendInstantMessageParam.get_Content">
            <summary>
Gets or sets the message content.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendInstantMessageParam.set_ContentType(System.String)">
            <summary>
Gets or sets the MIME type. Default is "text/plain".
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendInstantMessageParam.get_ContentType">
            <summary>
Gets or sets the MIME type. Default is "text/plain".
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingCallParam.set_RxData(Nequeo.Net.PjSip.SipRxData)">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingCallParam.get_RxData">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingCallParam.set_CallId(System.Int32)">
            <summary>
Gets or sets the library call ID allocated for the new call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingCallParam.get_CallId">
            <summary>
Gets or sets the library call ID allocated for the new call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.MarshalString(System.String,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.MarshalString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.set_ToUri(System.String)">
            <summary>
Gets or sets the to URI of the request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.get_ToUri">
            <summary>
Gets or sets the to URI of the request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.set_RxData(Nequeo.Net.PjSip.SipRxData)">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.get_RxData">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.set_MsgBody(System.String)">
            <summary>
Gets or sets the message body.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.get_MsgBody">
            <summary>
Gets or sets the message body.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.set_FromUri(System.String)">
            <summary>
Gets or sets the sender from URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.get_FromUri">
            <summary>
Gets or sets the sender from URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.set_ContentType(System.String)">
            <summary>
Gets or sets the MIME type of the message body.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.get_ContentType">
            <summary>
Gets or sets the MIME type of the message body.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.set_ContactUri(System.String)">
            <summary>
Gets or sets the contact URI of the sender.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.get_ContactUri">
            <summary>
Gets or sets the contact URI of the sender.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormat.set_Type(&lt;unknown type&gt;)">
            <summary>
Gets or sets the media type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormat.get_Type">
            <summary>
Gets or sets the media type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormat.set_Id(System.UInt32)">
            <summary>
Gets or sets the media format id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormat.get_Id">
            <summary>
Gets or sets the media format id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnSelectAccountParam.set_RxData(Nequeo.Net.PjSip.SipRxData)">
            <summary>
Gets or sets the incoming request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnSelectAccountParam.get_RxData">
            <summary>
Gets or sets the incoming request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnSelectAccountParam.set_AccountIndex(System.Int32)">
            <summary>
Gets or sets the account index to be used to handle the request.
Upon entry, this will be filled by the account index
chosen by the library.Application may change it to
another value to use another account.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnSelectAccountParam.get_AccountIndex">
            <summary>
Gets or sets the account index to be used to handle the request.
Upon entry, this will be filled by the account index
chosen by the library.Application may change it to
another value to use another account.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnSelectAccountParam.RxData">
            <summary>
Gets or sets the incoming request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnSelectAccountParam.AccountIndex">
            <summary>
Gets or sets the account index to be used to handle the request.
Upon entry, this will be filled by the account index
chosen by the library.Application may change it to
another value to use another account.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnSelectAccountParam.#ctor">
            <summary>
Can be used by application to override the account
to be used to handle an incoming message.
</summary>
            <summary>
Can be used by application to override the account
to be used to handle an incoming message.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnSelectAccountParam">
            <summary>
Can be used by application to override the account
to be used to handle an incoming message.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTsxStateParam.set_EventType(&lt;unknown type&gt;)">
            <summary>
Gets or sets the sip event type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTsxStateParam.get_EventType">
            <summary>
Gets or sets the sip event type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTsxStateParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTsxStateParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTsxStateParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTsxStateParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.set_WindowSize(Nequeo.Net.PjSip.MediaSize)">
            <summary>
Gets or sets the window size.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.get_WindowSize">
            <summary>
Gets or sets the window size.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.set_WindowPosition(Nequeo.Net.PjSip.MediaCoordinate)">
            <summary>
Gets or sets the window position.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.get_WindowPosition">
            <summary>
Gets or sets the window position.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.set_Show(System.Boolean)">
            <summary>
Gets or sets the window show status. The window is hidden if false.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.get_Show">
            <summary>
Gets or sets the window show status. The window is hidden if false.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.set_RenderDeviceId(System.Int32)">
            <summary>
Gets or sets the renderer device ID.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.get_RenderDeviceId">
            <summary>
Gets or sets the renderer device ID.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.set_WindowHandle(Nequeo.Net.PjSip.VideoWindowHandle)">
            <summary>
Gets or sets the video window handle.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.get_WindowHandle">
            <summary>
Gets or sets the video window handle.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.set_IsNative(System.Boolean)">
            <summary>
Gets or sets the flag to indicate whether this window is a native window,
such as created by built - in preview device.If this field is
true, only the video window handle field of this
structure is valid.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.get_IsNative">
            <summary>
Gets or sets the flag to indicate whether this window is a native window,
such as created by built - in preview device.If this field is
true, only the video window handle field of this
structure is valid.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaRecorder.MarshalString(System.String,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaRecorder.MarshalString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaRecorder.GetAudioMediaRecorder">
            <summary>
Get the audio media recorder reference.
</summary>
            <returns>The audio media recorder reference.</returns>
            <summary>
Get the audio media recorder reference.
</summary>
            <returns>The audio media recorder reference.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaRecorder.StopRecordingConversation(Nequeo.Net.PjSip.AudioMedia,Nequeo.Net.PjSip.AudioMedia[])">
            <summary>
Stop recoding a conversation between one or more calls.
</summary>
            <param name="captureMedia">The capture media; e.g the local microphone.</param>
            <param name="conferenceCalls">Array of remote conference calls.</param>
            <summary>
Stop recoding a conversation between one or more calls.
</summary>
            <param name="captureMedia">The capture media; e.g the local microphone.</param>
            <param name="conferenceCalls">Array of remote conference calls.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaRecorder.StartRecordingConversation(Nequeo.Net.PjSip.AudioMedia,Nequeo.Net.PjSip.AudioMedia[])">
            <summary>
Start recoding a conversation between one or more calls.
</summary>
            <param name="captureMedia">The capture media; e.g the local microphone.</param>
            <param name="conferenceCalls">Array of remote conference calls.</param>
            <summary>
Start recoding a conversation between one or more calls.
</summary>
            <param name="captureMedia">The capture media; e.g the local microphone.</param>
            <param name="conferenceCalls">Array of remote conference calls.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaRecorder.Stop(Nequeo.Net.PjSip.AudioMedia)">
            <summary>
Stop recording.
</summary>
            <param name="captureMedia">The audio capture media.</param>
            <summary>
Stop recording.
</summary>
            <param name="captureMedia">The audio capture media.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaRecorder.Start(Nequeo.Net.PjSip.AudioMedia)">
            <summary>
Start recording.
</summary>
            <param name="captureMedia">The audio capture media.</param>
            <summary>
Start recording.
</summary>
            <param name="captureMedia">The audio capture media.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaRecorder.CreateRecorder(System.String,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32)">
            <summary>
Create a file recorder, and automatically connect this recorder to
the conference bridge.The recorder currently supports recording WAV
file.The type of the recorder to use is determined by the extension of
the file(e.g. ".wav").
</summary>
            <param name="filename">Output file name. The function will determine the
default format to be used based on the file extension.
Currently ".wav" is supported on all platforms.</param>
            <param name="encoderType">Optionally specify the type of encoder to be used to
compress the media, if the file can support different
encodings.This value must be zero for now.</param>
            <param name="maxSize">Maximum file size. Specify zero or -1 to remove size
limitation. This value must be zero or -1 for now.</param>
            <param name="options">Optional options, which can be used to specify the
recording file format. Default is zero or PJMEDIA_FILE_WRITE_PCM.</param>
            <summary>
Create a file recorder, and automatically connect this recorder to
the conference bridge.The recorder currently supports recording WAV
file.The type of the recorder to use is determined by the extension of
the file(e.g. ".wav").
</summary>
            <param name="filename">Output file name. The function will determine the
default format to be used based on the file extension.
Currently ".wav" is supported on all platforms.</param>
            <param name="encoderType">Optionally specify the type of encoder to be used to
compress the media, if the file can support different
encodings.This value must be zero for now.</param>
            <param name="maxSize">Maximum file size. Specify zero or -1 to remove size
limitation.This value must be zero or -1 for now.</param>
            <param name="options">Optional options, which can be used to specify the
recording file format. Default is zero or PJMEDIA_FILE_WRITE_PCM.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaRecorder.Finalize">
            <summary>
Audio media recorder.
</summary>
            <summary>
Audio media recorder.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaRecorder.Dispose">
            <summary>
Audio media recorder.
</summary>
            <summary>
Audio media recorder.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMediaRecorder.#ctor">
            <summary>
Audio media recorder.
</summary>
            <summary>
Audio media recorder.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.AudioMediaRecorder">
            <summary>
Audio media recorder.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnStreamDestroyedParam.set_StreamIndex(System.UInt32)">
            <summary>
Gets or sets the stream index in the media session.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnStreamDestroyedParam.get_StreamIndex">
            <summary>
Gets or sets the stream index in the media session.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnStreamDestroyedParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnStreamDestroyedParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.set_SipErrorCode(System.Int32)">
            <summary>
Gets or sets the optional SIP error code.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.get_SipErrorCode">
            <summary>
Gets or sets the optional SIP error code.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.set_Status(System.Int32)">
            <summary>
Gets or sets the last error code related to the media transport state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.get_Status">
            <summary>
Gets or sets the last error code related to the media transport state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.set_MediaIndex(System.UInt32)">
            <summary>
Gets or sets the media index.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.get_MediaIndex">
            <summary>
Gets or sets the media index.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.set_State(&lt;unknown type&gt;)">
            <summary>
Gets or sets the media transport state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.get_State">
            <summary>
Gets or sets the media transport state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewForm.VideoPreviewForm_Move(System.Object,System.EventArgs)">
            <summary>
Moving form.
</summary>
            <param name="sender">The object sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewForm.VideoPreviewForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
Closing form.
</summary>
            <param name="sender">The object sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewForm.VideoPreviewForm_Load(System.Object,System.EventArgs)">
            <summary>
Load form.
</summary>
            <param name="sender">The object sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewForm.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.UI.VideoPreviewForm.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewForm.Dispose">
            <summary>
Clean up any resources being used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewForm.Create">
            <summary>
Create the preview.
</summary>
            <summary>
Create the preview.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.UI.VideoPreviewForm.OnVideoPreviewClosing">
            <summary>
Form is closing.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewForm.#ctor(System.Int32,System.Int32)">
            <summary>
Summary for VideoPreviewForm
</summary>
            <param name="videoCaptureIndex">The video capture index (default -1).</param>
            <param name="videoRenderIndex">The video render index (default -2).</param>
        </member>
        <member name="T:Nequeo.Net.PjSip.UI.VideoPreviewForm">
            <summary>
Summary for VideoPreviewForm
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreview.GetVideoWindow">
            <summary>
Get the preview window handle associated with the capture device, if any.
</summary>
            <returns>Video window.</returns>
            <summary>
Get the preview window handle associated with the capture device, if any.
</summary>
            <returns>Video window.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreview.Stop">
            <summary>
Stop video preview.
</summary>
            <summary>
Stop video preview.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreview.Start(Nequeo.Net.PjSip.VideoPreviewOpParam)">
            <summary>
Start video preview window for the specified capture device.
</summary>
            <param name="param">Video preview parameters.</param>
            <summary>
Start video preview window for the specified capture device.
</summary>
            <param name="param">Video preview parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreview.HasNative">
            <summary>
Determine if the specified video input device has built-in native
preview capability.This is a convenience function that is equal to
querying device's capability for PJMEDIA_VID_DEV_CAP_INPUT_PREVIEW
capability.
</summary>
            <returns>True if it has.</returns>
            <summary>
Determine if the specified video input device has built-in native
preview capability.This is a convenience function that is equal to
querying device's capability for PJMEDIA_VID_DEV_CAP_INPUT_PREVIEW
capability.
</summary>
            <returns>True if it has.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreview.Finalize">
            <summary>
Video preview.
</summary>
            <summary>
Video preview.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreview.Dispose">
            <summary>
Video preview. deconstructor.
</summary>
            <summary>
Video preview deconstructor.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreview.#ctor(System.Int32)">
            <summary>
Video preview.
</summary>
            <param name="captureDeviceID">The video capture device id.</param>
            <summary>
Video preview.
</summary>
            <param name="captureDeviceID">The video capture device id.</param>
        </member>
        <member name="T:Nequeo.Net.PjSip.VideoPreview">
            <summary>
Video preview.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaSize.set_Height(System.UInt32)">
            <summary>
Gets or sets the height.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaSize.get_Height">
            <summary>
Gets or sets the height.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaSize.set_Width(System.UInt32)">
            <summary>
Gets or sets the width.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaSize.get_Width">
            <summary>
Gets or sets the width.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactConnection.set_Subscribe(System.Boolean)">
            <summary>
Gets or sets specify whether presence subscription should start immediately.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactConnection.get_Subscribe">
            <summary>
Gets or sets specify whether presence subscription should start immediately.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactConnection.set_Uri(System.String)">
            <summary>
Gets or sets the contact URL or name address (sip:[Name or IP Address]@[Provider Domain or IP Address]:[Optional port number]).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactConnection.get_Uri">
            <summary>
Gets or sets the contact URL or name address (sip:[Name or IP Address]@[Provider Domain or IP Address]:[Optional port number]).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.get_UseDefaultValues">
            <summary>
Gets the use default values.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.set_VideoCount(System.UInt32)">
            <summary>
Gets or sets the number of simultaneous active video streams for this call. Setting
this to zero will disable video in this call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.get_VideoCount">
            <summary>
Gets or sets the number of simultaneous active video streams for this call. Setting
this to zero will disable video in this call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.set_AudioCount(System.UInt32)">
            <summary>
Gets or sets the number of simultaneous active audio streams for this call. Setting
this to zero will disable audio in this call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.get_AudioCount">
            <summary>
Gets or sets the number of simultaneous active audio streams for this call. Setting
this to zero will disable audio in this call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.set_ReqKeyframeMethod(&lt;unknown type&gt;)">
            <summary>
Gets or sets this flag controls what methods to request keyframe are allowed on
the call. Value is bitmask of VidReqKeyframeMethod.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.get_ReqKeyframeMethod">
            <summary>
Gets or sets this flag controls what methods to request keyframe are allowed on
the call. Value is bitmask of VidReqKeyframeMethod.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.set_Flag(&lt;unknown type&gt;)">
            <summary>
Gets or sets the bitmask of CallFlag constants.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.get_Flag">
            <summary>
Gets or sets the bitmask of CallFlag constants.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_VideoAutoShow(System.Boolean)">
            <summary>
Gets or sets an indicator specifying that any video is shown automatically.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_VideoAutoShow">
            <summary>
Gets or sets an indicator specifying that any video is shown automatically.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_VideoAutoTransmit(System.Boolean)">
            <summary>
Gets or sets an indicator specifying that any video capture is done automatically.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_VideoAutoTransmit">
            <summary>
Gets or sets an indicator specifying that any video capture is done automatically.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_VideoRateControlBandwidth(System.UInt32)">
            <summary>
Gets or sets specify the Upstream/outgoing bandwidth. If this is set to zero, the video stream
will use codec maximum bitrate setting. Default : 0.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_VideoRateControlBandwidth">
            <summary>
Gets or sets specify the Upstream/outgoing bandwidth. If this is set to zero, the video stream
will use codec maximum bitrate setting. Default : 0.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_IceEnabled(System.Boolean)">
            <summary>
Gets or sets an indicator specifying that ice is enabled: default false.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_IceEnabled">
            <summary>
Gets or sets an indicator specifying that ice is enabled: default false.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_NoIceRtcp(System.Boolean)">
            <summary>
Gets or sets an indicator specifying that ice RTCP should not be used: default false.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_NoIceRtcp">
            <summary>
Gets or sets an indicator specifying that ice RTCP should not be used: default false.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_IsDefault(System.Boolean)">
            <summary>
Gets or sets an indicator specifying this account is the default.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_IsDefault">
            <summary>
Gets or sets an indicator specifying this account is the default.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_AuthCredentials(Nequeo.Net.PjSip.AuthenticateCredentials)">
            <summary>
Sets the authentication credentials.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_AuthCredentials">
            <summary>
Gets the authentication credentials.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_PublishShutdownWaitMsec(System.UInt32)">
            <summary>
Sets maximum time to wait for unpublication transaction(s) to complete
during shutdown process, before sending unregistration.The library
tries to wait for the unpublication(un-PUBLISH) to complete before
sending REGISTER request to unregister the account, during library
shutdown process.If the value is set too short, it is possible that
the unregistration is sent before unpublication completes, causing
unpublication request to fail. Value is in milliseconds.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_PublishShutdownWaitMsec">
            <summary>
Gets maximum time to wait for unpublication transaction(s) to complete
during shutdown process, before sending unregistration.The library
tries to wait for the unpublication(un-PUBLISH) to complete before
sending REGISTER request to unregister the account, during library
shutdown process.If the value is set too short, it is possible that
the unregistration is sent before unpublication completes, causing
unpublication request to fail. Value is in milliseconds.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_PublishQueue(System.Boolean)">
            <summary>
Sets specify whether the client publication session should queue the
PUBLISH request should there be another PUBLISH transaction still
pending.If this is set to false, the client will return error
on the PUBLISH request if there is another PUBLISH transaction still
in progress.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_PublishQueue">
            <summary>
Gets specify whether the client publication session should queue the
PUBLISH request should there be another PUBLISH transaction still
pending.If this is set to false, the client will return error
on the PUBLISH request if there is another PUBLISH transaction still
in progress.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_PublishEnabled(System.Boolean)">
            <summary>
Sets if this flag is set, the presence information of this account will
be PUBLISH-ed to the server where the account belongs.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_PublishEnabled">
            <summary>
Gets if this flag is set, the presence information of this account will
be PUBLISH-ed to the server where the account belongs.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_MWIExpirationSec(System.UInt32)">
            <summary>
Sets specify the default expiration time (in seconds) for Message
Waiting Indication(RFC 3842) event subscription.This must not be zero.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_MWIExpirationSec">
            <summary>
Gets specify the default expiration time (in seconds) for Message
Waiting Indication(RFC 3842) event subscription.This must not be zero.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_MessageWaitingIndication(System.Boolean)">
            <summary>
Sets if true to subscribe to message waiting indication events (RFC 3842).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_MessageWaitingIndication">
            <summary>
Gets if true to subscribe to message waiting indication events (RFC 3842).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_MediaTransportPortRange(System.UInt32)">
            <summary>
Sets specify the port range for socket binding, relative to the start
port number specified in MediaTransportPort that this setting is only
applicable when the start port number is non zero.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_MediaTransportPortRange">
            <summary>
Gets specify the port range for socket binding, relative to the start
port number specified in MediaTransportPort that this setting is only
applicable when the start port number is non zero.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_MediaTransportPort(System.UInt32)">
            <summary>
Sets UDP port number to bind locally. This setting MUST be specified
even when default port is desired.If the value is zero, the
transport will be bound to any available port, and application
can query the port by querying the transport info.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_MediaTransportPort">
            <summary>
Gets UDP port number to bind locally. This setting MUST be specified
even when default port is desired.If the value is zero, the
transport will be bound to any available port, and application
can query the port by querying the transport info.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_SRTPSecureSignaling(&lt;unknown type&gt;)">
            <summary>
Sets specify whether SRTP requires secure signaling to be used. This option
is only used when SRTPUse option is non-zero.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_SRTPSecureSignaling">
            <summary>
Gets specify whether SRTP requires secure signaling to be used. This option
is only used when SRTPUse option is non-zero.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_SRTPUse(&lt;unknown type&gt;)">
            <summary>
Sets specify whether secure media transport should be used for this account.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_SRTPUse">
            <summary>
Gets specify whether secure media transport should be used for this account.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_IPv6Use(&lt;unknown type&gt;)">
            <summary>
Sets specify whether IPv6 should be used on media. Default is not used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_IPv6Use">
            <summary>
Gets specify whether IPv6 should be used on media. Default is not used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_TimerSessExpiresSec(System.UInt32)">
            <summary>
Sets specify Session Timer expiration period, in seconds.
Must not be lower than timerMinSE.Default is 1800.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_TimerSessExpiresSec">
            <summary>
Gets specify Session Timer expiration period, in seconds.
Must not be lower than timerMinSE.Default is 1800.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_TimerMinSESec(System.UInt32)">
            <summary>
Sets specify minimum Session Timer expiration period, in seconds.
Must not be lower than 90. Default is 90.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_TimerMinSESec">
            <summary>
Gets specify minimum Session Timer expiration period, in seconds.
Must not be lower than 90. Default is 90.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_DelayBeforeRefreshSec(System.UInt32)">
            <summary>
Sets specify the number of seconds to refresh the client registration
before the registration expires.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_DelayBeforeRefreshSec">
            <summary>
Gets specify the number of seconds to refresh the client registration
before the registration expires.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_UnregWaitSec(System.UInt32)">
            <summary>
Sets specify the maximum time to wait for unregistration requests to
complete during library shutdown sequence.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_UnregWaitSec">
            <summary>
Gets specify the maximum time to wait for unregistration requests to
complete during library shutdown sequence.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_FirstRetryIntervalSec(System.UInt32)">
            <summary>
Sets specifies the interval for the first registration retry. The
registration retry is explained in RetryIntervalSec.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_FirstRetryIntervalSec">
            <summary>
Gets specifies the interval for the first registration retry. The
registration retry is explained in RetryIntervalSec.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_TimeoutSec(System.UInt32)">
            <summary>
Sets interval for registration, in seconds. If the value is zero,
default interval will be used 300 seconds.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_TimeoutSec">
            <summary>
Gets interval for registration, in seconds. If the value is zero,
default interval will be used 300 seconds.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_RetryIntervalSec(System.UInt32)">
            <summary>
Sets specify interval of auto registration retry upon registration failure
(including caused by transport problem), in second.Set to 0 to
disable auto re-registration. Note that if the registration retry
occurs because of transport failure, the first retry will be done
after FirstRetryIntervalSec seconds instead.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_RetryIntervalSec">
            <summary>
Gets specify interval of auto registration retry upon registration failure
(including caused by transport problem), in second.Set to 0 to
disable auto re-registration. Note that if the registration retry
occurs because of transport failure, the first retry will be done
after FirstRetryIntervalSec seconds instead.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_RegisterOnAdd(System.Boolean)">
            <summary>
Sets specify whether the account should register as soon as it is
added to the UA.Application can set this to false and control
the registration manually with Account.Registration().
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_RegisterOnAdd">
            <summary>
Gets specify whether the account should register as soon as it is
added to the UA.Application can set this to false and control
the registration manually with Account.Registration().
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_DropCallsOnFail(System.Boolean)">
            <summary>
Sets specify whether calls of the configured account should be dropped
after registration failure and an attempt of re-registration has also failed.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_DropCallsOnFail">
            <summary>
Gets specify whether calls of the configured account should be dropped
after registration failure and an attempt of re-registration has also failed.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_Priority(System.Int32)">
            <summary>
Sets the account priority.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_Priority">
            <summary>
Gets the account priority.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_SpPort(System.Int32)">
            <summary>
Sets the account priority.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_SpPort">
            <summary>
Gets the account priority.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_SpHost(System.String)">
            <summary>
Sets the service provider host name or IP address.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_SpHost">
            <summary>
Gets the service provider host name or IP address.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.set_AccountName(System.String)">
            <summary>
Sets the account name or service phone number.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.get_AccountName">
            <summary>
Gets the account name or service phone number.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFmtChangedEvent.set_Height(System.UInt32)">
            <summary>
Gets or sets the new height.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFmtChangedEvent.get_Height">
            <summary>
Gets or sets the new height.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFmtChangedEvent.set_Width(System.UInt32)">
            <summary>
Gets or sets the new width.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFmtChangedEvent.get_Width">
            <summary>
Gets or sets the new width.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferRequestParam.set_Setting(Nequeo.Net.PjSip.CallSetting)">
            <summary>
Gets or sets the current call setting, application can update this setting
for the call being transferred.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferRequestParam.get_Setting">
            <summary>
Gets or sets the current call setting, application can update this setting
for the call being transferred.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferRequestParam.set_DestinationUri(System.String)">
            <summary>
Gets or sets the destination where the call will be transferred to.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferRequestParam.get_DestinationUri">
            <summary>
Gets or sets the destination where the call will be transferred to.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferRequestParam.set_Code(&lt;unknown type&gt;)">
            <summary>
Gets or sets the status progress of the transfer request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferRequestParam.get_Code">
            <summary>
Gets or sets the status progress of the transfer request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferRequestParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferRequestParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferRequestParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferRequestParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStateParam.set_Status(System.Int32)">
            <summary>
Gets or sets the Registration operation status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStateParam.get_Status">
            <summary>
Gets or sets the Registration operation status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStateParam.set_Reason(System.String)">
            <summary>
Gets or sets the SIP reason phrase received.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStateParam.get_Reason">
            <summary>
Gets or sets the SIP reason phrase received.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStateParam.set_RxData(Nequeo.Net.PjSip.SipRxData)">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStateParam.get_RxData">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStateParam.set_Expiration(System.Int32)">
            <summary>
Gets or sets the next expiration interval.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStateParam.get_Expiration">
            <summary>
Gets or sets the next expiration interval.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStateParam.set_Code(&lt;unknown type&gt;)">
            <summary>
Gets or sets the SIP status code of the transaction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStateParam.get_Code">
            <summary>
Gets or sets the SIP status code of the transaction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCreateMediaTransportParam.set_Flags(System.UInt32)">
            <summary>
Gets or sets the bitmask from pjsua_create_media_transport_flag.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCreateMediaTransportParam.get_Flags">
            <summary>
Gets or sets the bitmask from pjsua_create_media_transport_flag.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCreateMediaTransportParam.set_MediaIndex(System.UInt32)">
            <summary>
Gets or sets the media index in the SDP for which this media transport will be used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCreateMediaTransportParam.get_MediaIndex">
            <summary>
Gets or sets the media index in the SDP for which this media transport will be used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCreateMediaTransportParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCreateMediaTransportParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCreateMediaTransportParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCreateMediaTransportParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendTypingIndicationParam.set_TxOption(Nequeo.Net.PjSip.SipTxOption)">
            <summary>
Gets or sets the list of headers etc to be included in outgoing request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendTypingIndicationParam.get_TxOption">
            <summary>
Gets or sets the list of headers etc to be included in outgoing request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendTypingIndicationParam.set_IsTyping(System.Boolean)">
            <summary>
Gets or sets True to indicate to remote that local person is currently typing an IM.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendTypingIndicationParam.get_IsTyping">
            <summary>
Gets or sets True to indicate to remote that local person is currently typing an IM.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewWindow.VideoPreviewWindow_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
Closing form.
</summary>
            <param name="sender">The object sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewWindow.VideoPreviewWindow_Load(System.Object,System.EventArgs)">
            <summary>
Load form.
</summary>
            <param name="sender">The object sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewWindow.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.UI.VideoPreviewWindow.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewWindow.Dispose">
            <summary>
Clean up any resources being used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewWindow.Create">
            <summary>
Create the preview.
</summary>
            <summary>
Create the preview.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.UI.VideoPreviewWindow.OnVideoPreviewClosing">
            <summary>
Form is closing.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoPreviewWindow.#ctor(System.Int32,System.Int32)">
            <summary>
Summary for VideoPreviewWindow
</summary>
            <param name="videoCaptureIndex">The video capture index (default -1).</param>
            <param name="videoRenderIndex">The video render index (default -2).</param>
        </member>
        <member name="T:Nequeo.Net.PjSip.UI.VideoPreviewWindow">
            <summary>
Summary for VideoPreviewWindow
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetVideoStreamParam.set_CaptureDevice(System.Int32)">
            <summary>
Gets or sets the specify the video capture device ID. This can be set to
PJMEDIA_VID_DEFAULT_CAPTURE_DEV to specify the default capture
device as configured in the account.
This field is valid for the following video stream operations :
PJSUA_CALL_VID_STRM_ADD and PJSUA_CALL_VID_STRM_CHANGE_CAP_DEV.
Default : PJMEDIA_VID_DEFAULT_CAPTURE_DEV.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetVideoStreamParam.get_CaptureDevice">
            <summary>
Gets or sets the specify the video capture device ID. This can be set to
PJMEDIA_VID_DEFAULT_CAPTURE_DEV to specify the default capture
device as configured in the account.
This field is valid for the following video stream operations :
PJSUA_CALL_VID_STRM_ADD and PJSUA_CALL_VID_STRM_CHANGE_CAP_DEV.
Default : PJMEDIA_VID_DEFAULT_CAPTURE_DEV.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetVideoStreamParam.set_Direction(&lt;unknown type&gt;)">
            <summary>
Gets or sets the Specify the media stream direction.
This field is valid for the following video stream operations :
PJSUA_CALL_VID_STRM_ADD and PJSUA_CALL_VID_STRM_CHANGE_DIR.
Default : PJMEDIA_DIR_ENCODING_DECODING
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetVideoStreamParam.get_Direction">
            <summary>
Gets or sets the Specify the media stream direction.
This field is valid for the following video stream operations :
PJSUA_CALL_VID_STRM_ADD and PJSUA_CALL_VID_STRM_CHANGE_DIR.
Default : PJMEDIA_DIR_ENCODING_DECODING
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetVideoStreamParam.set_MediaIndex(System.Int32)">
            <summary>
Gets or sets the specify the media stream index. This can be set to -1 to denote
the default video stream in the call, which is the first active
video stream or any first video stream if none is active.
This field is valid for all video stream operations, except
PJSUA_CALL_VID_STRM_ADD.

Default: -1 (first active video stream, or any first video stream
            if none is active)
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetVideoStreamParam.get_MediaIndex">
            <summary>
Gets or sets the specify the media stream index. This can be set to -1 to denote
the default video stream in the call, which is the first active
video stream or any first video stream if none is active.
This field is valid for all video stream operations, except
PJSUA_CALL_VID_STRM_ADD.

Default: -1 (first active video stream, or any first video stream
            if none is active)
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnMwiInfoParam.set_State(&lt;unknown type&gt;)">
            <summary>
Gets or sets the MWI subscription state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnMwiInfoParam.get_State">
            <summary>
Gets or sets the MWI subscription state.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnMwiInfoParam.set_RxData(Nequeo.Net.PjSip.SipRxData)">
            <summary>
Gets or sets the incoming response that causes this callback to be called.
If the transaction fails because of time out or transport error,
the content will be empty.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnMwiInfoParam.get_RxData">
            <summary>
Gets or sets the incoming response that causes this callback to be called.
If the transaction fails because of time out or transport error,
the content will be empty.
</summary>
        </member>
        <member name="M:pj.Endpoint.onSelectAccount(pj.OnSelectAccountParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This callback can be used by application to override the account
 to be used to handle an incoming message. Initially, the account to
 be used will be calculated automatically by the library. This initial
 account will be used if application does not implement this callback,
 or application sets an invalid account upon returning from this
 callback.

 Note that currently the incoming messages requiring account assignment
 are INVITE, MESSAGE, SUBSCRIBE, and unsolicited NOTIFY. This callback
 may be called before the callback of the SIP event itself, i.e:
 incoming call, pager, subscription, or unsolicited-event.

 @param prm	Callback parameters.

</member>
        <member name="M:pj.Endpoint.onTimer(pj.OnTimerParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Callback when a timer has fired. The timer was scheduled by
 utilTimerSchedule().

 @param prm	Callback parameters.

</member>
        <member name="M:pj.Endpoint.onTransportState(pj.OnTransportStateParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This callback is called when transport state has changed.

 @param prm	Callback parameters.

</member>
        <member name="M:pj.Endpoint.onNatCheckStunServersComplete(pj.OnNatCheckStunServersCompleteParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Callback when the Endpoint has finished performing STUN server
 checking that is initiated when calling libInit(), or by
 calling natCheckStunServers() or natUpdateStunServers().

 @param prm	Callback parameters.

</member>
        <member name="M:pj.Endpoint.onNatDetectionComplete(pj.OnNatDetectionCompleteParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Callback when the Endpoint has finished performing NAT type
 detection that is initiated with natDetectType().

 @param prm	Callback parameters containing the detection
 			result.

</member>
        <member name="M:pj.Endpoint.resetVideoCodecParam(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Reset video codec parameters to library default settings.

 @param codec_id	Codec ID.


</member>
        <member name="M:pj.Endpoint.setVideoCodecParam(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,pj.VidCodecParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Set video codec parameters.

 @param codec_id	Codec ID.
 @param param	Codec parameter to set.


</member>
        <member name="M:pj.Endpoint.getVideoCodecParam(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Get video codec parameters.

 @param codec_id	Codec ID.

 @return		Codec parameters. If codec is not found, Error 
			will be thrown.


</member>
        <member name="M:pj.Endpoint.videoCodecSetPriority(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
 Change video codec priority.

 @param codec_id	Codec ID, which is a string that uniquely identify
			the codec (such as "H263/90000"). Please see pjsua
			manual or pjmedia codec reference for details.
 @param priority	Codec priority, 0-255, where zero means to disable
			the codec.


</member>
        <member name="M:pj.Endpoint.videoCodecEnum">
Enum all supported video codecs in the system.
 
@return		Array of video codec info.

</member>
        <member name="M:pj.Endpoint.codecSetParam(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Void*!System.Runtime.CompilerServices.IsConst)">
 Set codec parameters.

 @param codec_id	Codec ID.
 @param param	Codec parameter to set. Set to NULL to reset
			codec parameter to library default settings.


</member>
        <member name="M:pj.Endpoint.codecGetParam(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Get codec parameters.

 @param codec_id	Codec ID.

 @return		Codec parameters. If codec is not found, Error
 			will be thrown.


</member>
        <member name="M:pj.Endpoint.codecSetPriority(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Byte)">
 Change codec priority.

 @param codec_id	Codec ID, which is a string that uniquely identify
			the codec (such as "speex/8000").
 @param priority	Codec priority, 0-255, where zero means to disable
			the codec.


</member>
        <member name="M:pj.Endpoint.codecEnum">
 Enum all supported codecs in the system.

 @return		Array of codec info.

</member>
        <member name="M:pj.Endpoint.vidDevManager">
 Get the instance of Video Device Manager.

 @return		The Video Device Manager.

</member>
        <member name="M:pj.Endpoint.audDevManager">
 Get the instance of Audio Device Manager.

 @return		The Audio Device Manager.

</member>
        <member name="M:pj.Endpoint.mediaEnumPorts">
 Enumerate all media port.

 @return		The list of media port.

</member>
        <member name="M:pj.Endpoint.mediaActivePorts">
 Get current number of active media port in the bridge.

 @return		The number of active media port.

</member>
        <member name="M:pj.Endpoint.mediaMaxPorts">
 Get maximum number of media port.

 @return		Maximum number of media port in the conference bridge.

</member>
        <member name="M:pj.Endpoint.mediaExists(pj.AudioMedia!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Check if media has been added to the media list.

 @param media	media to be check.

 @return 		True if media has been added, false otherwise.

</member>
        <member name="M:pj.Endpoint.mediaRemove(pj.AudioMedia*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Remove media from the media list.

 @param media	media to be removed.

</member>
        <member name="M:pj.Endpoint.mediaAdd(pj.AudioMedia*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Add media to the media list.

 @param media	media to be added.

</member>
        <member name="M:pj.Endpoint.hangupAllCalls">
Terminate all calls. This will initiate call hangup for all
currently active calls.

</member>
        <member name="M:pj.Endpoint.transportClose(System.Int32)">
 Close the transport. The system will wait until all transactions are
 closed while preventing new users from using the transport, and will
 close the transport when its usage count reaches zero.

 @param id		Transport ID.

</member>
        <member name="M:pj.Endpoint.transportSetEnable(System.Int32,System.Boolean)">
 Disable a transport or re-enable it. By default transport is always
 enabled after it is created. Disabling a transport does not necessarily
 close the socket, it will only discard incoming messages and prevent
 the transport from being used to send outgoing messages.

 @param id		Transport ID.
 @param enabled		Enable or disable the transport.


</member>
        <member name="M:pj.Endpoint.transportGetInfo(System.Int32)">
 Get information about transport.

 @param id		Transport ID.

 @return			Transport info.

</member>
        <member name="M:pj.Endpoint.transportEnum">
 Enumerate all transports currently created in the system. This
 function will return all transport IDs, and application may then
 call transportGetInfo() function to retrieve detailed information
 about the transport.

 @return			Array of transport IDs.

</member>
        <member name="M:pj.Endpoint.transportCreate(pjsip_transport_type_e,pj.TransportConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Create and start a new SIP transport according to the specified
 settings.

 @param type		Transport type.
 @param cfg		Transport configuration.

 @return			The transport ID.

</member>
        <member name="M:pj.Endpoint.natCancelCheckStunServers(System.Void*,System.Boolean)">
 Cancel pending STUN resolution which match the specified token.

 @param token		The token to match. This token was given to
				natCheckStunServers()
 @param notify_cb		Boolean to control whether the callback should
				be called for cancelled resolutions. When the
				callback is called, the status in the result
				will be set as PJ_ECANCELLED.

 Exception: PJ_ENOTFOUND if there is no matching one, or other error.

</member>
        <member name="M:pj.Endpoint.natCheckStunServers(std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Void*)">
 Auxiliary function to resolve and contact each of the STUN server
 entries (sequentially) to find which is usable. The libInit() must
 have been called before calling this function.

 @param prmServers	Array of STUN servers to try. The endpoint
 				will try to resolve and contact each of the
 				STUN server entry until it finds one that is
 				usable. Each entry may be a domain name, host
 				name, IP address, and it may contain an
 				optional port number. For example:
				- "pjsip.org" (domain name)
				- "sip.pjsip.org" (host name)
				- "pjsip.org:33478" (domain name and a non-
				   standard port number)
				- "10.0.0.1:3478" (IP address and port number)
 @param prmWait		Specify if the function should block until
				it gets the result. In this case, the function
				will block while the resolution is being done,
				and the callback will be called before this
				function returns.
 @param prmUserData	Arbitrary user data to be passed back to
 				application in the callback.

 @see natCancelCheckStunServers()

</member>
        <member name="M:pj.Endpoint.natUpdateStunServers(std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 Update the STUN servers list. The libInit() must have been called
 before calling this function.

 @param prmServers	Array of STUN servers to try. The endpoint
 				will try to resolve and contact each of the
 				STUN server entry until it finds one that is
 				usable. Each entry may be a domain name, host
 				name, IP address, and it may contain an
 				optional port number. For example:
				- "pjsip.org" (domain name)
				- "sip.pjsip.org" (host name)
				- "pjsip.org:33478" (domain name and a non-
				   standard port number)
				- "10.0.0.1:3478" (IP address and port number)
 @param prmWait		Specify if the function should block until
				it gets the result. In this case, the
				function will block while the resolution
 				is being done, and the callback
 				onNatCheckStunServersComplete() will be called
 				before this function returns.


</member>
        <member name="M:pj.Endpoint.natGetType">
 Get the NAT type as detected by natDetectType() function. This
 function will only return useful NAT type after natDetectType()
 has completed successfully and onNatDetectionComplete()
 callback has been called.

 Exception: if this function is called while detection is in progress,
 PJ_EPENDING exception will be raised.

</member>
        <member name="M:pj.Endpoint.natDetectType">
 This is a utility function to detect NAT type in front of this endpoint.
 Once invoked successfully, this function will complete asynchronously
 and report the result in onNatDetectionComplete().

 After NAT has been detected and the callback is called, application can
 get the detected NAT type by calling natGetType(). Application
 can also perform NAT detection by calling natDetectType()
 again at later time.

 Note that STUN must be enabled to run this function successfully.

</member>
        <member name="M:pj.Endpoint.utilSslGetAvailableCiphers">
Get cipher list supported by SSL/TLS backend.

</member>
        <member name="M:pj.Endpoint.utilAddPendingJob(pj.PendingJob*)">
 Utility to register a pending job to be executed by main thread.
 If EpConfig::UaConfig::mainThreadOnly is false, the job will be
 executed immediately.

 @param job		The job class.

</member>
        <member name="M:pj.Endpoint.utilTimerCancel(System.Void*)">
 Cancel previously scheduled timer with the specified timer token.

 @param prmToken		The timer token, which was returned from
 				previous utilTimerSchedule() call.

</member>
        <member name="M:pj.Endpoint.utilTimerSchedule(System.UInt32,System.Void*)">
 Schedule a timer with the specified interval and user data. When the
 interval elapsed, onTimer() callback will be
 called. Note that the callback may be executed by different thread,
 depending on whether worker thread is enabled or not.

 @param prmMsecDelay	The time interval in msec.
 @param prmUserData	Arbitrary user data, to be given back to
 				application in the callback.

 @return			Token to identify the timer, which could be
 				given to utilTimerCancel().

</member>
        <member name="M:pj.Endpoint.utilVerifyUri(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This is a utility function to verify that valid URI is given. Unlike
 utilVerifySipUri(), this function will return PJ_SUCCESS if tel: URI
 is given.

 @param prmUri		The URL string.

 @return			PJ_SUCCESS on success, or the appropriate error
 				code.

 @see pjsua_verify_sip_url()

</member>
        <member name="M:pj.Endpoint.utilVerifySipUri(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This is a utility function to verify that valid SIP url is given. If the
 URL is a valid SIP/SIPS scheme, PJ_SUCCESS will be returned.

 @param prmUri		The URL string.

 @return			PJ_SUCCESS on success, or the appropriate error
 				code.

 @see utilVerifyUri()

</member>
        <member name="M:pj.Endpoint.utilLogWrite(pj.LogEntry*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write a log entry.

 @param e			The log entry.

</member>
        <member name="M:pj.Endpoint.utilLogWrite(System.Int32,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write a log message.

 @param prmLevel		Log verbosity level (1-5)
 @param prmSender		The log sender.
 @param prmMsg		The log message.

</member>
        <member name="M:pj.Endpoint.utilStrError(System.Int32)">
 Retrieve the error string for the specified status code.

 @param prmErr		The error code.

</member>
        <member name="M:pj.Endpoint.libDestroy(System.UInt32)">
 Destroy pjsua. Application is recommended to perform graceful shutdown
 before calling this function (such as unregister the account from the
 SIP server, terminate presense subscription, and hangup active calls),
 however, this function will do all of these if it finds there are
 active sessions that need to be terminated. This function will
 block for few seconds to wait for replies from remote.

 Application.may safely call this function more than once if it doesn't
 keep track of it's state.

 @param prmFlags	Combination of pjsua_destroy_flag enumeration.

</member>
        <member name="M:pj.Endpoint.libHandleEvents(System.UInt32)">
 Poll pjsua for events, and if necessary block the caller thread for
 the specified maximum interval (in miliseconds).

 Application doesn't normally need to call this function if it has
 configured worker thread (\a thread_cnt field) in pjsua_config
 structure, because polling then will be done by these worker threads
 instead.

 If EpConfig::UaConfig::mainThreadOnly is enabled and this function
 is called from the main thread (by default the main thread is thread
 that calls libCreate()), this function will also scan and run any
 pending jobs in the list.

 @param msec_timeout Maximum time to wait, in miliseconds.

 @return		The number of events that have been handled during the
	    		poll. Negative value indicates error, and application
	    		can retrieve the error as (status = -return_value).

</member>
        <member name="M:pj.Endpoint.libStopWorkerThreads">
Stop all worker threads.

</member>
        <member name="M:pj.Endpoint.libRegisterThread(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Register a thread that was created by external or native API to the
 library. Note that each time this function is called, it will allocate
 some memory to store the thread description, which will only be freed
 when the library is destroyed.

 @param name	The optional name to be assigned to the thread.

</member>
        <member name="M:pj.Endpoint.libStart">
Call this function after all initialization is done, so that the
library can do additional checking set up. Application may call this
function any time after init().

</member>
        <member name="M:pj.Endpoint.libInit(pj.EpConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Initialize pjsua with the specified settings. All the settings are
 optional, and the default values will be used when the config is not
 specified.

 Note that create() MUST be called before calling this function.

 @param prmEpConfig	Endpoint configurations

</member>
        <member name="M:pj.Endpoint.libGetState">
 Get library state.

 @return			library state.

</member>
        <member name="M:pj.Endpoint.libCreate">
Instantiate pjsua application. Application must call this function before
calling any other functions, to make sure that the underlying libraries
are properly initialized. Once this function has returned success,
application must call libDestroy() before quitting.

</member>
        <member name="M:pj.Endpoint.libVersion">
Get library version.

</member>
        <member name="M:pj.Endpoint.Dispose">
Virtual destructor 
</member>
        <member name="M:pj.Endpoint.#ctor">
Default constructor 
</member>
        <member name="M:pj.Endpoint.instance">
Retrieve the singleton instance of the endpoint 
</member>
        <member name="T:pj.Endpoint">
Endpoint represents an instance of pjsua library. There can only be
one instance of pjsua library in an application, hence this class
is a singleton.

</member>
        <member name="M:pj.PendingJob.Dispose">
Virtual destructor 
</member>
        <member name="M:pj.PendingJob.execute(System.Boolean)">
Perform the job 
</member>
        <member name="M:pj.EpConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container.

 @param node		Container to write values to.

</member>
        <member name="M:pj.EpConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container.

 @param node		Container to write values from.

</member>
        <member name="F:pj.EpConfig.medConfig">
Media config 
</member>
        <member name="F:pj.EpConfig.logConfig">
Logging config 
</member>
        <member name="F:pj.EpConfig.uaConfig">
UA config 
</member>
        <member name="T:pj.EpConfig">
Endpoint configuration

</member>
        <member name="M:pj.MediaConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container.

 @param node		Container to write values to.

</member>
        <member name="M:pj.MediaConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container.

 @param node		Container to write values from.

</member>
        <member name="M:pj.MediaConfig.toPj">
Export 
</member>
        <member name="M:pj.MediaConfig.fromPj(pjsua_media_config!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Construct from pjsua_media_config. 
</member>
        <member name="M:pj.MediaConfig.#ctor">
Default constructor initialises with default values 
</member>
        <member name="F:pj.MediaConfig.vidPreviewEnableNative">
 Specify whether built-in/native preview should be used if available.
 In some systems, video input devices have built-in capability to show
 preview window of the device. Using this built-in preview is preferable
 as it consumes less CPU power. If built-in preview is not available,
 the library will perform software rendering of the input. If this
 field is set to PJ_FALSE, software preview will always be used.

 Default: PJ_TRUE

</member>
        <member name="F:pj.MediaConfig.sndAutoCloseTime">
 Specify idle time of sound device before it is automatically closed,
 in seconds. Use value -1 to disable the auto-close feature of sound
 device

 Default : 1

</member>
        <member name="F:pj.MediaConfig.jbMax">
 Set maximum delay that can be accomodated by the jitter buffer msec.

 Default: -1 (to use default stream settings, currently 360 msec)

</member>
        <member name="F:pj.MediaConfig.jbMaxPre">
 Jitter buffer maximum prefetch delay in msec.

 Default: -1 (to use default stream settings, currently 240 msec)

</member>
        <member name="F:pj.MediaConfig.jbMinPre">
 Jitter buffer minimum prefetch delay in msec.

 Default: -1 (to use default stream settings, currently 60 msec)

</member>
        <member name="F:pj.MediaConfig.jbInit">
 Jitter buffer initial prefetch delay in msec. The value must be
 between jb_min_pre and jb_max_pre below.

 Default: -1 (to use default stream settings, currently 150 msec)

</member>
        <member name="F:pj.MediaConfig.sndPlayLatency">
 Audio playback buffer length, in milliseconds.

 Default: PJMEDIA_SND_DEFAULT_PLAY_LATENCY

</member>
        <member name="F:pj.MediaConfig.sndRecLatency">
 Audio capture buffer length, in milliseconds.

 Default: PJMEDIA_SND_DEFAULT_REC_LATENCY

</member>
        <member name="F:pj.MediaConfig.ecTailLen">
 Echo canceller tail length, in miliseconds. Setting this to zero
 will disable echo cancellation.

 Default: PJSUA_DEFAULT_EC_TAIL_LEN

</member>
        <member name="F:pj.MediaConfig.ecOptions">
 Echo canceller options (see pjmedia_echo_create())

 Default: 0.

</member>
        <member name="F:pj.MediaConfig.rxDropPct">
 Percentage of RTP packet to drop in RX direction
 (to simulate packet lost).

 Default: 0

</member>
        <member name="F:pj.MediaConfig.txDropPct">
 Percentage of RTP packet to drop in TX direction
 (to simulate packet lost).

 Default: 0

</member>
        <member name="F:pj.MediaConfig.ilbcMode">
 iLBC mode (20 or 30).

 Default: 30 (PJSUA_DEFAULT_ILBC_MODE)

</member>
        <member name="F:pj.MediaConfig.noVad">
 Disable VAD?

 Default: 0 (no (meaning VAD is enabled))

</member>
        <member name="F:pj.MediaConfig.ptime">
 Specify default codec ptime.

 Default: 0 (codec specific)

</member>
        <member name="F:pj.MediaConfig.quality">
 Media quality, 0-10, according to this table:
   5-10: resampling use large filter,
   3-4:  resampling use small filter,
   1-2:  resampling use linear.
 The media quality also sets speex codec quality/complexity to the
 number.

 Default: 5 (PJSUA_DEFAULT_CODEC_QUALITY).

</member>
        <member name="F:pj.MediaConfig.threadCnt">
Specify the number of worker threads to handle incoming RTP
packets. A value of one is recommended for most applications.

</member>
        <member name="F:pj.MediaConfig.hasIoqueue">
 Specify whether the media manager should manage its own
 ioqueue for the RTP/RTCP sockets. If yes, ioqueue will be created
 and at least one worker thread will be created too. If no,
 the RTP/RTCP sockets will share the same ioqueue as SIP sockets,
 and no worker thread is needed.

 Normally application would say yes here, unless it wants to
 run everything from a single thread.

</member>
        <member name="F:pj.MediaConfig.maxMediaPorts">
 Specify maximum number of media ports to be created in the
 conference bridge. Since all media terminate in the bridge
 (calls, file player, file recorder, etc), the value must be
 large enough to support all of them. However, the larger
 the value, the more computations are performed.

 Default value: PJSUA_MAX_CONF_PORTS

</member>
        <member name="F:pj.MediaConfig.audioFramePtime">
 Specify audio frame ptime. The value here will affect the
 samples per frame of both the sound device and the conference
 bridge. Specifying lower ptime will normally reduce the
 latency.

 Default value: PJSUA_DEFAULT_AUDIO_FRAME_PTIME

</member>
        <member name="F:pj.MediaConfig.channelCount">
Channel count be applied when opening the sound device and
conference bridge.

</member>
        <member name="F:pj.MediaConfig.sndClockRate">
Clock rate to be applied when opening the sound device.
If value is zero, conference bridge clock rate will be used.

</member>
        <member name="F:pj.MediaConfig.clockRate">
Clock rate to be applied to the conference bridge.
If value is zero, default clock rate will be used
(PJSUA_DEFAULT_CLOCK_RATE, which by default is 16KHz).

</member>
        <member name="T:pj.MediaConfig">
This structure describes media configuration, which will be specified
when calling Lib::init().

</member>
        <member name="M:pj.LogConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container.

 @param node		Container to write values to.

</member>
        <member name="M:pj.LogConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container.

 @param node		Container to write values from.

</member>
        <member name="M:pj.LogConfig.toPj">
Generate pjsua_logging_config. 
</member>
        <member name="M:pj.LogConfig.fromPj(pjsua_logging_config!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Construct from pjsua_logging_config 
</member>
        <member name="M:pj.LogConfig.#ctor">
Default constructor initialises with default values 
</member>
        <member name="F:pj.LogConfig.writer">
Custom log writer, if required. This instance will be destroyed
by the endpoint when the endpoint is destroyed.

</member>
        <member name="F:pj.LogConfig.fileFlags">
 Additional flags to be given to pj_file_open() when opening
 the log file. By default, the flag is PJ_O_WRONLY. Application
 may set PJ_O_APPEND here so that logs are appended to existing
 file instead of overwriting it.

 Default is 0.

</member>
        <member name="F:pj.LogConfig.filename">
Optional log filename if app wishes the library to write to log file.

</member>
        <member name="F:pj.LogConfig.decor">
Log decoration. 
</member>
        <member name="F:pj.LogConfig.consoleLevel">
Verbosity level for console. Value 4 is reasonable. 
</member>
        <member name="F:pj.LogConfig.level">
Input verbosity level. Value 5 is reasonable. 
</member>
        <member name="F:pj.LogConfig.msgLogging">
Log incoming and outgoing SIP message? Yes!  
</member>
        <member name="T:pj.LogConfig">
Logging configuration, which can be (optionally) specified when calling
Lib::init().

</member>
        <member name="M:pj.LogWriter.write(pj.LogEntry!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Write a log entry. 
</member>
        <member name="M:pj.LogWriter.Dispose">
Destructor 
</member>
        <member name="T:pj.LogWriter">
Interface for writing log messages. Applications can inherit this class
and supply it in the LogConfig structure to implement custom log
writing facility.

</member>
        <member name="F:pj.LogEntry.threadName">
The name of the thread that writes this log 
</member>
        <member name="F:pj.LogEntry.threadId">
ID of current thread 
</member>
        <member name="F:pj.LogEntry.msg">
The log message 
</member>
        <member name="F:pj.LogEntry.level">
Log verbosity level of this message 
</member>
        <member name="T:pj.LogEntry">
Data containing log entry to be written by the LogWriter.

</member>
        <member name="M:pj.UaConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container.

 @param node		Container to write values to.

</member>
        <member name="M:pj.UaConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container.

 @param node		Container to write values from.

</member>
        <member name="M:pj.UaConfig.toPj">
Export to pjsua_config

</member>
        <member name="M:pj.UaConfig.fromPj(pjsua_config!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Construct from pjsua_config.

</member>
        <member name="M:pj.UaConfig.#ctor">
Default constructor to initialize with default values.

</member>
        <member name="F:pj.UaConfig.mwiUnsolicitedEnabled">
 Handle unsolicited NOTIFY requests containing message waiting
 indication (MWI) info. Unsolicited MWI is incoming NOTIFY requests
 which are not requested by client with SUBSCRIBE request.

 If this is enabled, the library will respond 200/OK to the NOTIFY
 request and forward the request to Endpoint::onMwiInfo() callback.

 See also AccountMwiConfig.enabled.

 Default: PJ_TRUE

</member>
        <member name="F:pj.UaConfig.natTypeInSdp">
 Support for adding and parsing NAT type in the SDP to assist
 troubleshooting. The valid values are:
	- 0: no information will be added in SDP, and parsing is disabled.
	- 1: only the NAT type number is added.
	- 2: add both NAT type number and name.

 Default: 1

</member>
        <member name="F:pj.UaConfig.stunIgnoreFailure">
 This specifies if the library startup should ignore failure with the
 STUN servers. If this is set to PJ_FALSE, the library will refuse to
 start if it fails to resolve or contact any of the STUN servers.

 Default: TRUE

</member>
        <member name="F:pj.UaConfig.stunServer">
 Array of STUN servers to try. The library will try to resolve and
 contact each of the STUN server entry until it finds one that is
 usable. Each entry may be a domain name, host name, IP address, and
 it may contain an optional port number. For example:
	- "pjsip.org" (domain name)
	- "sip.pjsip.org" (host name)
	- "pjsip.org:33478" (domain name and a non-standard port number)
	- "10.0.0.1:3478" (IP address and port number)

 When nameserver is configured in the \a pjsua_config.nameserver field,
 if entry is not an IP address, it will be resolved with DNS SRV
 resolution first, and it will fallback to use DNS A resolution if this
 fails. Port number may be specified even if the entry is a domain name,
 in case the DNS SRV resolution should fallback to a non-standard port.

 When nameserver is not configured, entries will be resolved with
 pj_gethostbyname() if it's not an IP address. Port number may be
 specified if the server is not listening in standard STUN port.

</member>
        <member name="F:pj.UaConfig.userAgent">
Optional user agent string (default empty). If it's empty, no
User-Agent header will be sent with outgoing requests.

</member>
        <member name="F:pj.UaConfig.nameserver">
Array of nameservers to be used by the SIP resolver subsystem.
The order of the name server specifies the priority (first name
server will be used first, unless it is not reachable).

</member>
        <member name="F:pj.UaConfig.mainThreadOnly">
 When this flag is non-zero, all callbacks that come from thread
 other than main thread will be posted to the main thread and
 to be executed by Endpoint::libHandleEvents() function. This
 includes the logging callback. Note that this will only work if
 threadCnt is set to zero and Endpoint::libHandleEvents() is
 performed by main thread. By default, the main thread is set
 from the thread that invoke Endpoint::libCreate()

 Default: false

</member>
        <member name="F:pj.UaConfig.threadCnt">
Number of worker threads. Normally application will want to have at
least one worker thread, unless when it wants to poll the library
periodically, which in this case the worker thread can be set to
zero.

</member>
        <member name="F:pj.UaConfig.maxCalls">
Maximum calls to support (default: 4). The value specified here
must be smaller than the compile time maximum settings
PJSUA_MAX_CALLS, which by default is 32. To increase this
limit, the library must be recompiled with new PJSUA_MAX_CALLS
value.

</member>
        <member name="T:pj.UaConfig">
SIP User Agent related settings.

</member>
        <member name="F:pj.OnSelectAccountParam.accountIndex">
The account index to be used to handle the request.
Upon entry, this will be filled by the account index
chosen by the library. Application may change it to
another value to use another account.

</member>
        <member name="F:pj.OnSelectAccountParam.rdata">
The incoming request.

</member>
        <member name="T:pj.OnSelectAccountParam">
Parameter of Endpoint::onSelectAccount() callback.

</member>
        <member name="F:pj.OnTransportStateParam.lastError">
The last error code related to the transport state.

</member>
        <member name="F:pj.OnTransportStateParam.state">
Transport current state.

</member>
        <member name="F:pj.OnTransportStateParam.hnd">
The transport handle.

</member>
        <member name="T:pj.OnTransportStateParam">
Parameter of Endpoint::onTransportState() callback.

</member>
        <member name="F:pj.OnTimerParam.msecDelay">
The interval of this timer, in miliseconds.

</member>
        <member name="F:pj.OnTimerParam.userData">
Arbitrary user data that was passed to Endpoint::utilTimerSchedule()
function.

</member>
        <member name="T:pj.OnTimerParam">
Parameter of Endpoint::onTimer() callback.

</member>
        <member name="F:pj.OnNatCheckStunServersCompleteParam.addr">
The server IP address and port in "IP:port" format. This will only
contain value if status is successful.

</member>
        <member name="F:pj.OnNatCheckStunServersCompleteParam.name">
The server name that yields successful result. This will only
contain value if status is successful.

</member>
        <member name="F:pj.OnNatCheckStunServersCompleteParam.status">
This will contain PJ_SUCCESS if at least one usable STUN server
is found, otherwise it will contain the last error code during
the operation.

</member>
        <member name="F:pj.OnNatCheckStunServersCompleteParam.userData">
Arbitrary user data that was passed to Endpoint::natCheckStunServers()
function.

</member>
        <member name="T:pj.OnNatCheckStunServersCompleteParam">
Argument to Endpoint::onNatCheckStunServersComplete() callback.

</member>
        <member name="F:pj.OnNatDetectionCompleteParam.natTypeName">
Text describing that NAT type.

</member>
        <member name="F:pj.OnNatDetectionCompleteParam.natType">
This contains the NAT type as detected by the detection procedure.
This value is only valid when the \a status is PJ_SUCCESS.

</member>
        <member name="F:pj.OnNatDetectionCompleteParam.reason">
The text describing the status, if the status is not PJ_SUCCESS.

</member>
        <member name="F:pj.OnNatDetectionCompleteParam.status">
Status of the detection process. If this value is not PJ_SUCCESS,
the detection has failed and \a nat_type field will contain
PJ_STUN_NAT_TYPE_UNKNOWN.

</member>
        <member name="T:pj.OnNatDetectionCompleteParam">
Argument to Endpoint::onNatDetectionComplete() callback.

</member>
        <member name="M:pj.Account.onMwiInfo(pj.OnMwiInfoParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notification about MWI (Message Waiting Indication) status change.
 This callback can be called upon the status change of the
 SUBSCRIBE request (for example, 202/Accepted to SUBSCRIBE is received)
 or when a NOTIFY reqeust is received.

 @param prm	    Callback parameter.

</member>
        <member name="M:pj.Account.onTypingIndication(pj.OnTypingIndicationParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application about typing indication.

 @param prm	    Callback parameter.

</member>
        <member name="M:pj.Account.onInstantMessageStatus(pj.OnInstantMessageStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application about the delivery status of outgoing pager/instant
 message (i.e. MESSAGE) request.

 @param prm	    Callback parameter.

</member>
        <member name="M:pj.Account.onInstantMessage(pj.OnInstantMessageParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application on incoming instant message or pager (i.e. MESSAGE
 request) that was received outside call context.

 @param prm	    Callback parameter.

</member>
        <member name="M:pj.Account.onIncomingSubscribe(pj.OnIncomingSubscribeParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notification when incoming SUBSCRIBE request is received. Application
 may use this callback to authorize the incoming subscribe request
 (e.g. ask user permission if the request should be granted).

 If this callback is not implemented, all incoming presence subscription
 requests will be accepted.

 If this callback is implemented, application has several choices on
 what to do with the incoming request:
	- it may reject the request immediately by specifying non-200 class
    final response in the IncomingSubscribeParam.code parameter.
	- it may immediately accept the request by specifying 200 as the
	  IncomingSubscribeParam.code parameter. This is the default value if
	  application doesn't set any value to the IncomingSubscribeParam.code
	  parameter. In this case, the library will automatically send NOTIFY
	  request upon returning from this callback.
	- it may delay the processing of the request, for example to request
    user permission whether to accept or reject the request. In this
	  case, the application MUST set the IncomingSubscribeParam.code
	  argument to 202, then IMMEDIATELY calls presNotify() with
	  state PJSIP_EVSUB_STATE_PENDING and later calls presNotify()
    again to accept or reject the subscription request.

 Any IncomingSubscribeParam.code other than 200 and 202 will be treated
 as 200.

 Application MUST return from this callback immediately (e.g. it must
 not block in this callback while waiting for user confirmation).

 @param prm	    Callback parameter.

</member>
        <member name="M:pj.Account.onRegState(pj.OnRegStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application when registration status has changed.
 Application may then query the account info to get the
 registration details.

 @param prm	    Callback parameter.

</member>
        <member name="M:pj.Account.onRegStarted(pj.OnRegStartedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application when registration or unregistration has been
 initiated. Note that this only notifies the initial registration
 and unregistration. Once registration session is active, subsequent
 refresh will not cause this callback to be called.

 @param prm	    Callback parameter.

</member>
        <member name="M:pj.Account.onIncomingCall(pj.OnIncomingCallParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Notify application on incoming call.

 @param prm	Callback parameter.

</member>
        <member name="M:pj.Account.removeBuddy(pj.Buddy*)">
An internal function to remove a Buddy from Account buddy list.
This function must never be used by application.

</member>
        <member name="M:pj.Account.addBuddy(pj.Buddy*)">
An internal function to add a Buddy to Account buddy list.
This function must never be used by application.

</member>
        <member name="M:pj.Account.findBuddy(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,pj.FindBuddyMatch*)">
 Find a buddy in the buddy list with the specified URI. 

 Exception: if buddy is not found, PJ_ENOTFOUND will be thrown.

 @param uri		The buddy URI.
 @param buddy_match	The buddy match algo.

 @return			The pointer to buddy.

</member>
        <member name="M:pj.Account.enumBuddies">
 Enumerate all buddies of the account.

 @return			The buddy list.

</member>
        <member name="M:pj.Account.presNotify(pj.PresNotifyParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Send NOTIFY to inform account presence status or to terminate server
 side presence subscription. If application wants to reject the incoming
 request, it should set the param \a PresNotifyParam.state to
 PJSIP_EVSUB_STATE_TERMINATED.

 @param prm		The sending NOTIFY parameter.

</member>
        <member name="M:pj.Account.setTransport(System.Int32)">
 Lock/bind this account to a specific transport/listener. Normally
 application shouldn't need to do this, as transports will be selected
 automatically by the library according to the destination.

 When account is locked/bound to a specific transport, all outgoing
 requests from this account will use the specified transport (this
 includes SIP registration, dialog (call and event subscription), and
 out-of-dialog requests such as MESSAGE).

 Note that transport id may be specified in AccountConfig too.

 @param tp_id		The transport ID.

</member>
        <member name="M:pj.Account.setOnlineStatus(pj.PresenceStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Set or modify account's presence online status to be advertised to
 remote/presence subscribers. This would trigger the sending of
 outgoing NOTIFY request if there are server side presence subscription
 for this account, and/or outgoing PUBLISH if presence publication is
 enabled for this account.

 @param pres_st		Presence online status.

</member>
        <member name="M:pj.Account.setRegistration(System.Boolean)">
 Update registration or perform unregistration. Application normally
 only needs to call this function if it wants to manually update the
 registration or to unregister from the server.

 @param renew		If False, this will start unregistration
 				process.

</member>
        <member name="M:pj.Account.getInfo">
 Get account info.

 @return			Account info.

</member>
        <member name="M:pj.Account.lookup(System.Int32)">
 Get the Account class for the specified account Id.

 @param acc_id		The account ID to lookup

 @return			The Account instance or NULL if not found.

</member>
        <member name="M:pj.Account.getId">
 Get PJSUA-LIB account ID or index associated with this account.

 @return			Integer greater than or equal to zero.

</member>
        <member name="M:pj.Account.isDefault">
 Check if this account is the default account. Default account will be
 used for incoming and outgoing requests that don't match any other
 accounts.

 @return			True if this is the default account.

</member>
        <member name="M:pj.Account.setDefault">
 Set this as default account to be used when incoming and outgoing
 requests don't match any accounts.

 @return			PJ_SUCCESS on success.

</member>
        <member name="M:pj.Account.isValid">
 Check if this account is still valid.

 @return			True if it is.

</member>
        <member name="M:pj.Account.modify(pj.AccountConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Modify the account to use the specified account configuration.
 Depending on the changes, this may cause unregistration or
 reregistration on the account.

 @param cfg 		New account config to be applied to the
 				account.

</member>
        <member name="M:pj.Account.create(pj.AccountConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 Create the account.

 @param cfg		The account config.
 @param make_default	Make this the default account.

</member>
        <member name="M:pj.Account.Dispose">
Destructor. Note that if the account is deleted, it will also delete
the corresponding account in the PJSUA-LIB.

</member>
        <member name="M:pj.Account.#ctor">
Constructor.

</member>
        <member name="T:pj.Account">
Account.

</member>
        <member name="M:pj.FindBuddyMatch.Dispose">
Destructor.

</member>
        <member name="M:pj.FindBuddyMatch.match(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,pj.Buddy!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Default algo implementation.

</member>
        <member name="T:pj.FindBuddyMatch">
 Wrapper class for Buddy matching algo.

 Default algo is a simple substring lookup of search-token in the
 Buddy URIs, with case sensitive. Application can implement its own
 matching algo by overriding this class and specifying its instance
 in Account::findBuddy().

</member>
        <member name="F:pj.PresNotifyParam.txOption">
Optional list of headers to be sent with the NOTIFY request.

</member>
        <member name="F:pj.PresNotifyParam.withBody">
If the new state is PJSIP_EVSUB_STATE_TERMINATED, this specifies
whether the NOTIFY request should contain message body containing
account's presence information.

</member>
        <member name="F:pj.PresNotifyParam.reason">
If the new state is PJSIP_EVSUB_STATE_TERMINATED, optionally specify
the termination reason.

</member>
        <member name="F:pj.PresNotifyParam.stateStr">
Optionally specify the state string name, if state is not "active",
"pending", or "terminated".

</member>
        <member name="F:pj.PresNotifyParam.state">
Server presence subscription state to set.

</member>
        <member name="F:pj.PresNotifyParam.srvPres">
Server presence subscription instance.

</member>
        <member name="T:pj.PresNotifyParam">
Parameters for presNotify() account method.

</member>
        <member name="F:pj.OnMwiInfoParam.rdata">
The whole message buffer.

</member>
        <member name="F:pj.OnMwiInfoParam.state">
MWI subscription state.

</member>
        <member name="T:pj.OnMwiInfoParam">
Parameters for onMwiInfo() account callback.

</member>
        <member name="F:pj.OnTypingIndicationParam.rdata">
The whole message buffer.

</member>
        <member name="F:pj.OnTypingIndicationParam.isTyping">
Boolean to indicate if sender is typing.

</member>
        <member name="F:pj.OnTypingIndicationParam.contactUri">
The Contact URI.

</member>
        <member name="F:pj.OnTypingIndicationParam.toUri">
To URI.

</member>
        <member name="F:pj.OnTypingIndicationParam.fromUri">
Sender/From URI.

</member>
        <member name="T:pj.OnTypingIndicationParam">
Parameters for onTypingIndication() account callback.

</member>
        <member name="F:pj.OnInstantMessageStatusParam.rdata">
The incoming response that causes this callback to be called.
If the transaction fails because of time out or transport error,
the content will be empty.

</member>
        <member name="F:pj.OnInstantMessageStatusParam.reason">
The reason phrase of the transaction.

</member>
        <member name="F:pj.OnInstantMessageStatusParam.code">
The SIP status code of the transaction.

</member>
        <member name="F:pj.OnInstantMessageStatusParam.msgBody">
The message body.

</member>
        <member name="F:pj.OnInstantMessageStatusParam.toUri">
Destination URI.

</member>
        <member name="F:pj.OnInstantMessageStatusParam.userData">
Token or a user data that was associated with the pager
transmission.

</member>
        <member name="T:pj.OnInstantMessageStatusParam">
Parameters for onInstantMessageStatus() account callback.

</member>
        <member name="F:pj.OnInstantMessageParam.rdata">
The whole message.

</member>
        <member name="F:pj.OnInstantMessageParam.msgBody">
The message body.

</member>
        <member name="F:pj.OnInstantMessageParam.contentType">
MIME type of the message body.

</member>
        <member name="F:pj.OnInstantMessageParam.contactUri">
Contact URI of the sender.

</member>
        <member name="F:pj.OnInstantMessageParam.toUri">
To URI of the request.

</member>
        <member name="F:pj.OnInstantMessageParam.fromUri">
Sender From URI.

</member>
        <member name="T:pj.OnInstantMessageParam">
Parameters for onInstantMessage() account callback.

</member>
        <member name="F:pj.OnIncomingSubscribeParam.txOption">
Additional data to be sent with the response, if any.

</member>
        <member name="F:pj.OnIncomingSubscribeParam.reason">
The reason phrase to respond to the request.

</member>
        <member name="F:pj.OnIncomingSubscribeParam.code">
The status code to respond to the request. The default value is 200.
Application may set this to other final status code to accept or
reject the request.

</member>
        <member name="F:pj.OnIncomingSubscribeParam.rdata">
The incoming message.

</member>
        <member name="F:pj.OnIncomingSubscribeParam.fromUri">
Sender URI.

</member>
        <member name="F:pj.OnIncomingSubscribeParam.srvPres">
Server presence subscription instance. If application delays
the acceptance of the request, it will need to specify this object
when calling Account::presNotify().

</member>
        <member name="T:pj.OnIncomingSubscribeParam">
This structure contains parameters for onIncomingSubscribe() callback.

</member>
        <member name="F:pj.OnRegStateParam.expiration">
Next expiration interval.

</member>
        <member name="F:pj.OnRegStateParam.rdata">
The incoming message.

</member>
        <member name="F:pj.OnRegStateParam.reason">
SIP reason phrase received.

</member>
        <member name="F:pj.OnRegStateParam.code">
SIP status code received.

</member>
        <member name="F:pj.OnRegStateParam.status">
Registration operation status.

</member>
        <member name="T:pj.OnRegStateParam">
This structure contains parameters for onRegState() account callback.

</member>
        <member name="F:pj.OnRegStartedParam.renew">
True for registration and False for unregistration.

</member>
        <member name="T:pj.OnRegStartedParam">
This structure contains parameters for onRegStarted() account callback.

</member>
        <member name="F:pj.OnIncomingCallParam.rdata">
The incoming INVITE request.

</member>
        <member name="F:pj.OnIncomingCallParam.callId">
The library call ID allocated for the new call.

</member>
        <member name="T:pj.OnIncomingCallParam">
This structure contains parameters for onIncomingCall() account callback.

</member>
        <member name="M:pj.AccountInfo.fromPj(pjsua_acc_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Import from pjsip data 
</member>
        <member name="F:pj.AccountInfo.onlineStatusText">
Presence online status text.

</member>
        <member name="F:pj.AccountInfo.onlineStatus">
Presence online status for this account.

</member>
        <member name="F:pj.AccountInfo.regLastErr">
Last registration error code. When the status field contains a SIP
status code that indicates a registration failure, last registration
error code contains the error code that causes the failure. In any
other case, its value is zero.

</member>
        <member name="F:pj.AccountInfo.regStatusText">
String describing the registration status.

</member>
        <member name="F:pj.AccountInfo.regStatus">
Last registration status code. If status code is zero, the account
is currently not registered. Any other value indicates the SIP
status code of the registration.

</member>
        <member name="F:pj.AccountInfo.regExpiresSec">
An up to date expiration interval for account registration session.

</member>
        <member name="F:pj.AccountInfo.regIsActive">
Flag to tell whether this account is currently registered
(has active registration session).

</member>
        <member name="F:pj.AccountInfo.regIsConfigured">
Flag to tell whether this account has registration setting
(reg_uri is not empty).

</member>
        <member name="F:pj.AccountInfo.uri">
Account URI

</member>
        <member name="F:pj.AccountInfo.isDefault">
Flag to indicate whether this is the default account.

</member>
        <member name="F:pj.AccountInfo.id">
The account ID.

</member>
        <member name="T:pj.AccountInfo">
Account information. Application can query the account information
by calling Account::getInfo().

</member>
        <member name="M:pj.AccountConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container node.

 @param node		Container to write values to.

</member>
        <member name="M:pj.AccountConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container node.

 @param node		Container to read values from.

</member>
        <member name="M:pj.AccountConfig.fromPj(pjsua_acc_config!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,pjsua_media_config!System.Runtime.CompilerServices.IsConst*)">
Initialize from pjsip.

</member>
        <member name="M:pj.AccountConfig.toPj(pjsua_acc_config*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
This will return a temporary pjsua_acc_config instance, which contents
are only valid as long as this AccountConfig structure remains valid
AND no modifications are done to it AND no further toPj() function call
is made. Any call to toPj() function will invalidate the content of
temporary pjsua_acc_config that was returned by the previous call.

</member>
        <member name="M:pj.AccountConfig.#ctor">
Default constructor will initialize with default values.

</member>
        <member name="F:pj.AccountConfig.videoConfig">
Video settings.

</member>
        <member name="F:pj.AccountConfig.mediaConfig">
Media settings (applicable for both audio and video).

</member>
        <member name="F:pj.AccountConfig.natConfig">
NAT settings.

</member>
        <member name="F:pj.AccountConfig.mwiConfig">
MWI (Message Waiting Indication) settings.

</member>
        <member name="F:pj.AccountConfig.presConfig">
Presence settings.

</member>
        <member name="F:pj.AccountConfig.callConfig">
Call settings.

</member>
        <member name="F:pj.AccountConfig.sipConfig">
SIP settings.

</member>
        <member name="F:pj.AccountConfig.regConfig">
Registration settings.

</member>
        <member name="F:pj.AccountConfig.idUri">
 The Address of Record or AOR, that is full SIP URL that identifies the
 account. The value can take name address or URL format, and will look
 something like "sip:account@serviceprovider".

 This field is mandatory.

</member>
        <member name="F:pj.AccountConfig.priority">
Account priority, which is used to control the order of matching
incoming/outgoing requests. The higher the number means the higher
the priority is, and the account will be matched first.

</member>
        <member name="T:pj.AccountConfig">
Account configuration.

</member>
        <member name="M:pj.AccountVideoConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container node.

 @param node		Container to write values to.

</member>
        <member name="M:pj.AccountVideoConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container node.

 @param node		Container to read values from.

</member>
        <member name="F:pj.AccountVideoConfig.rateControlBandwidth">
 Upstream/outgoing bandwidth. If this is set to zero, the video stream
 will use codec maximum bitrate setting.

 Default: 0 (follow codec maximum bitrate).

</member>
        <member name="F:pj.AccountVideoConfig.rateControlMethod">
 Rate control method.

 Default: PJMEDIA_VID_STREAM_RC_SIMPLE_BLOCKING.

</member>
        <member name="F:pj.AccountVideoConfig.defaultRenderDevice">
 Specify the default rendering device to be used by this account.

 Default: PJMEDIA_VID_DEFAULT_RENDER_DEV

</member>
        <member name="F:pj.AccountVideoConfig.defaultCaptureDevice">
 Specify the default capture device to be used by this account. If
 vidOutAutoTransmit is enabled, this device will be used for
 capturing video.

 Default: PJMEDIA_VID_DEFAULT_CAPTURE_DEV

</member>
        <member name="F:pj.AccountVideoConfig.windowFlags">
 Specify video window's flags. The value is a bitmask combination of
 pjmedia_vid_dev_wnd_flag.

 Default: 0

</member>
        <member name="F:pj.AccountVideoConfig.autoTransmitOutgoing">
 Specify whether outgoing video should be activated by default when
 making outgoing calls and/or when incoming video is detected. This
 applies to incoming and outgoing calls, incoming re-INVITE, and
 incoming UPDATE. If the setting is non-zero, outgoing video
 transmission will be started as soon as response to these requests
 is sent (or received).

 Regardless of the value of this setting, application can start and
 stop outgoing video transmission with pjsua_call_set_vid_strm().

 Default: False

</member>
        <member name="F:pj.AccountVideoConfig.autoShowIncoming">
 Specify whether incoming video should be shown to screen by default.
 This applies to incoming call (INVITE), incoming re-INVITE, and
 incoming UPDATE requests.

 Regardless of this setting, application can detect incoming video
 by implementing \a on_call_media_state() callback and enumerating
 the media stream(s) with pjsua_call_get_info(). Once incoming
 video is recognised, application may retrieve the window associated
 with the incoming video and show or hide it with
 pjsua_vid_win_set_show().

 Default: False

</member>
        <member name="T:pj.AccountVideoConfig">
Account video config. This will be specified in AccountConfig.

</member>
        <member name="M:pj.AccountMediaConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container node.

 @param node		Container to write values to.

</member>
        <member name="M:pj.AccountMediaConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container node.

 @param node		Container to read values from.

</member>
        <member name="F:pj.AccountMediaConfig.ipv6Use">
Specify whether IPv6 should be used on media. Default is not used.

</member>
        <member name="F:pj.AccountMediaConfig.srtpSecureSignaling">
 Specify whether SRTP requires secure signaling to be used. This option
 is only used when \a use_srtp option above is non-zero.

 Valid values are:
	0: SRTP does not require secure signaling
	1: SRTP requires secure transport such as TLS
	2: SRTP requires secure end-to-end transport (SIPS)

 Default: PJSUA_DEFAULT_SRTP_SECURE_SIGNALING

</member>
        <member name="F:pj.AccountMediaConfig.srtpUse">
 Specify whether secure media transport should be used for this account.
 Valid values are PJMEDIA_SRTP_DISABLED, PJMEDIA_SRTP_OPTIONAL, and
 PJMEDIA_SRTP_MANDATORY.

 Default: PJSUA_DEFAULT_USE_SRTP

</member>
        <member name="F:pj.AccountMediaConfig.streamKaEnabled">
 Specify whether stream keep-alive and NAT hole punching with
 non-codec-VAD mechanism (see PJMEDIA_STREAM_ENABLE_KA) is enabled
 for this account.

 Default: False

</member>
        <member name="F:pj.AccountMediaConfig.lockCodecEnabled">
 If remote sends SDP answer containing more than one format or codec in
 the media line, send re-INVITE or UPDATE with just one codec to lock
 which codec to use.

 Default: True (Yes).

</member>
        <member name="F:pj.AccountMediaConfig.transportConfig">
Media transport (RTP) configuration.

</member>
        <member name="T:pj.AccountMediaConfig">
Account media config (applicable for both audio and video). This will be
specified in AccountConfig.

</member>
        <member name="M:pj.AccountNatConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container node.

 @param node		Container to write values to.

</member>
        <member name="M:pj.AccountNatConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container node.

 @param node		Container to read values from.

</member>
        <member name="F:pj.AccountNatConfig.udpKaData">
 Specify the data to be transmitted as keep-alive packets.

 Default: CR-LF

</member>
        <member name="F:pj.AccountNatConfig.udpKaIntervalSec">
 Set the interval for periodic keep-alive transmission for this account.
 If this value is zero, keep-alive will be disabled for this account.
 The keep-alive transmission will be sent to the registrar's address,
 after successful registration.

 Default: 15 (seconds)

</member>
        <member name="F:pj.AccountNatConfig.sipOutboundRegId">
 Specify SIP outbound (RFC 5626) registration ID. The default value
 is empty, which would cause the library to automatically generate
 a suitable value.

 Default: empty

</member>
        <member name="F:pj.AccountNatConfig.sipOutboundUse">
 Control the use of SIP outbound feature. SIP outbound is described in
 RFC 5626 to enable proxies or registrar to send inbound requests back
 to UA using the same connection initiated by the UA for its
 registration. This feature is highly useful in NAT-ed deployemtns,
 hence it is enabled by default.

 Note: currently SIP outbound can only be used with TCP and TLS
 transports. If UDP is used for the registration, the SIP outbound
 feature will be silently ignored for the account.

 Default: TRUE

</member>
        <member name="F:pj.AccountNatConfig.sdpNatRewriteUse">
 This option controls whether the IP address in SDP should be replaced
 with the IP address found in Via header of the REGISTER response, ONLY
 when STUN and ICE are not used. If the value is FALSE (the original
 behavior), then the local IP address will be used. If TRUE, and when
 STUN and ICE are disabled, then the IP address found in registration
 response will be used.

 Default: PJ_FALSE (no)

</member>
        <member name="F:pj.AccountNatConfig.viaRewriteUse">
 This option is used to overwrite the "sent-by" field of the Via header
 for outgoing messages with the same interface address as the one in
 the REGISTER request, as long as the request uses the same transport
 instance as the previous REGISTER request.

 Default: TRUE

</member>
        <member name="F:pj.AccountNatConfig.contactUseSrcPort">
 Specify if source TCP port should be used as the initial Contact
 address if TCP/TLS transport is used. Note that this feature will
 be automatically turned off when nameserver is configured because
 it may yield different destination address due to DNS SRV resolution.
 Also some platforms are unable to report the local address of the
 TCP socket when it is still connecting. In these cases, this
 feature will also be turned off.

 Default: 1 (yes).

</member>
        <member name="F:pj.AccountNatConfig.contactRewriteMethod">
 Specify how Contact update will be done with the registration, if
 \a contactRewriteEnabled is enabled. The value is bitmask combination of
 \a pjsua_contact_rewrite_method. See also pjsua_contact_rewrite_method.

 Value PJSUA_CONTACT_REWRITE_UNREGISTER(1) is the legacy behavior.

 Default value: PJSUA_CONTACT_REWRITE_METHOD
   (PJSUA_CONTACT_REWRITE_NO_UNREG | PJSUA_CONTACT_REWRITE_ALWAYS_UPDATE)

</member>
        <member name="F:pj.AccountNatConfig.contactRewriteUse">
 This option is used to update the transport address and the Contact
 header of REGISTER request. When this option is  enabled, the library
 will keep track of the public IP address from the response of REGISTER
 request. Once it detects that the address has changed, it will
 unregister current Contact, update the Contact with transport address
 learned from Via header, and register a new Contact to the registrar.
 This will also update the public name of UDP transport if STUN is
 configured.

 See also contactRewriteMethod field.

 Default: TRUE

</member>
        <member name="F:pj.AccountNatConfig.turnPassword">
Specify the password to authenticate with the TURN server.

</member>
        <member name="F:pj.AccountNatConfig.turnPasswordType">
Specify the type of password. Currently this must be zero to
indicate plain-text password will be used in the password.

</member>
        <member name="F:pj.AccountNatConfig.turnUserName">
Specify the username to authenticate with the TURN server.

</member>
        <member name="F:pj.AccountNatConfig.turnConnType">
 Specify the connection type to be used to the TURN server. Valid
 values are PJ_TURN_TP_UDP or PJ_TURN_TP_TCP.

 Default: PJ_TURN_TP_UDP

</member>
        <member name="F:pj.AccountNatConfig.turnServer">
Specify TURN domain name or host name, in in "DOMAIN:PORT" or
"HOST:PORT" format.

</member>
        <member name="F:pj.AccountNatConfig.turnEnabled">
Enable TURN candidate in ICE.

</member>
        <member name="F:pj.AccountNatConfig.iceAlwaysUpdate">
 Always send re-INVITE/UPDATE after ICE negotiation regardless of whether
 the default ICE transport address is changed or not. When this is set
 to False, re-INVITE/UPDATE will be sent only when the default ICE
 transport address is changed.

 Default: yes

</member>
        <member name="F:pj.AccountNatConfig.iceNoRtcp">
 Disable RTCP component.

 Default: False

</member>
        <member name="F:pj.AccountNatConfig.iceWaitNominationTimeoutMsec">
 For a controlled agent, specify how long it wants to wait (in
 milliseconds) for the controlling agent to complete sending
 connectivity check with nominated flag set to true for all components
 after the controlled agent has found that all connectivity checks in
 its checklist have been completed and there is at least one successful
 (but not nominated) check for every component.

 Default value for this option is
 ICE_CONTROLLED_AGENT_WAIT_NOMINATION_TIMEOUT. Specify -1 to disable
 this timer.

</member>
        <member name="F:pj.AccountNatConfig.iceNominatedCheckDelayMsec">
 For controlling agent if it uses regular nomination, specify the delay
 to perform nominated check (connectivity check with USE-CANDIDATE
 attribute) after all components have a valid pair.

 Default value is PJ_ICE_NOMINATED_CHECK_DELAY.

</member>
        <member name="F:pj.AccountNatConfig.iceAggressiveNomination">
 Specify whether to use aggressive nomination.

 Default: True

</member>
        <member name="F:pj.AccountNatConfig.iceMaxHostCands">
 Set the maximum number of ICE host candidates.

 Default: -1 (maximum not set)

</member>
        <member name="F:pj.AccountNatConfig.iceEnabled">
 Enable ICE for the media transport.

 Default: False

</member>
        <member name="F:pj.AccountNatConfig.mediaStunUse">
 Control the use of STUN for the media transports.

 Default: PJSUA_STUN_USE_DEFAULT

</member>
        <member name="F:pj.AccountNatConfig.sipStunUse">
 Control the use of STUN for the SIP signaling.

 Default: PJSUA_STUN_USE_DEFAULT

</member>
        <member name="T:pj.AccountNatConfig">
Account's NAT (Network Address Translation) settings. This will be
specified in AccountConfig.

</member>
        <member name="M:pj.AccountMwiConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container node.

 @param node		Container to write values to.

</member>
        <member name="M:pj.AccountMwiConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container node.

 @param node		Container to read values from.

</member>
        <member name="F:pj.AccountMwiConfig.expirationSec">
 Specify the default expiration time (in seconds) for Message
 Waiting Indication (RFC 3842) event subscription. This must not
 be zero.

 Default: PJSIP_MWI_DEFAULT_EXPIRES (3600)

</member>
        <member name="F:pj.AccountMwiConfig.enabled">
 Subscribe to message waiting indication events (RFC 3842).

 See also UaConfig.mwiUnsolicitedEnabled setting.

 Default: FALSE

</member>
        <member name="T:pj.AccountMwiConfig">
Account MWI (Message Waiting Indication) settings. This will be specified
in AccountConfig.

</member>
        <member name="M:pj.AccountPresConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container node.

 @param node		Container to write values to.

</member>
        <member name="M:pj.AccountPresConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container node.

 @param node		Container to read values from.

</member>
        <member name="F:pj.AccountPresConfig.pidfTupleId">
Optional PIDF tuple ID for outgoing PUBLISH and NOTIFY. If this value
is not specified, a random string will be used.

</member>
        <member name="F:pj.AccountPresConfig.publishShutdownWaitMsec">
 Maximum time to wait for unpublication transaction(s) to complete
 during shutdown process, before sending unregistration. The library
 tries to wait for the unpublication (un-PUBLISH) to complete before
 sending REGISTER request to unregister the account, during library
 shutdown process. If the value is set too short, it is possible that
 the unregistration is sent before unpublication completes, causing
 unpublication request to fail.

 Value is in milliseconds.

 Default: PJSUA_UNPUBLISH_MAX_WAIT_TIME_MSEC (2000)

</member>
        <member name="F:pj.AccountPresConfig.publishQueue">
 Specify whether the client publication session should queue the
 PUBLISH request should there be another PUBLISH transaction still
 pending. If this is set to false, the client will return error
 on the PUBLISH request if there is another PUBLISH transaction still
 in progress.

 Default: PJSIP_PUBLISHC_QUEUE_REQUEST (TRUE)

</member>
        <member name="F:pj.AccountPresConfig.publishEnabled">
 If this flag is set, the presence information of this account will
 be PUBLISH-ed to the server where the account belongs.

 Default: PJ_FALSE

</member>
        <member name="F:pj.AccountPresConfig.headers">
The optional custom SIP headers to be put in the presence
subscription request.

</member>
        <member name="T:pj.AccountPresConfig">
Account presence config. This will be specified in AccountConfig.

</member>
        <member name="M:pj.AccountCallConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container node.

 @param node		Container to write values to.

</member>
        <member name="M:pj.AccountCallConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container node.

 @param node		Container to read values from.

</member>
        <member name="F:pj.AccountCallConfig.timerSessExpiresSec">
Specify Session Timer expiration period, in seconds.
Must not be lower than timerMinSE. Default is 1800.

</member>
        <member name="F:pj.AccountCallConfig.timerMinSESec">
Specify minimum Session Timer expiration period, in seconds.
Must not be lower than 90. Default is 90.

</member>
        <member name="F:pj.AccountCallConfig.timerUse">
 Specify the usage of Session Timers for all sessions. See the
 pjsua_sip_timer_use for possible values.

 Default: PJSUA_SIP_TIMER_OPTIONAL

</member>
        <member name="F:pj.AccountCallConfig.prackUse">
 Specify how support for reliable provisional response (100rel/
 PRACK) should be used for all sessions in this account. See the
 documentation of pjsua_100rel_use enumeration for more info.

 Default: PJSUA_100REL_NOT_USED

</member>
        <member name="F:pj.AccountCallConfig.holdType">
 Specify how to offer call hold to remote peer. Please see the
 documentation on pjsua_call_hold_type for more info.

 Default: PJSUA_CALL_HOLD_TYPE_DEFAULT

</member>
        <member name="T:pj.AccountCallConfig">
Account's call settings. This will be specified in AccountConfig.

</member>
        <member name="M:pj.AccountSipConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container node.

 @param node		Container to write values to.

</member>
        <member name="M:pj.AccountSipConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container node.

 @param node		Container to read values from.

</member>
        <member name="F:pj.AccountSipConfig.transportId">
 Optionally bind this account to specific transport. This normally is
 not a good idea, as account should be able to send requests using
 any available transports according to the destination. But some
 application may want to have explicit control over the transport to
 use, so in that case it can set this field.

 Default: -1 (PJSUA_INVALID_ID)

 @see Account::setTransport()

</member>
        <member name="F:pj.AccountSipConfig.authInitialAlgorithm">
Specify the algorithm to use when empty Authorization header
is to be sent for each initial request (see above)

</member>
        <member name="F:pj.AccountSipConfig.authInitialEmpty">
If this flag is set, the authentication client framework will
send an empty Authorization header in each initial request.
Default is no.

</member>
        <member name="F:pj.AccountSipConfig.contactUriParams">
 Additional URI parameters that will be appended in the Contact URI
 for this account. This will affect the Contact URI in all SIP
 messages sent on behalf of this account, including but not limited to
 REGISTER, INVITE, and SUBCRIBE requests or responses.

 The parameters should be preceeded by semicolon, and all strings must
 be properly escaped. Example:
	 ";my-param=X;another-param=Hi%20there"

</member>
        <member name="F:pj.AccountSipConfig.contactParams">
 Additional parameters that will be appended in the Contact header
 for this account. This will affect the Contact header in all SIP
 messages sent on behalf of this account, including but not limited to
 REGISTER, INVITE, and SUBCRIBE requests or responses.

 The parameters should be preceeded by semicolon, and all strings must
 be properly escaped. Example:
	 ";my-param=X;another-param=Hi%20there"

</member>
        <member name="F:pj.AccountSipConfig.contactForced">
Optional URI to be put as Contact for this account. It is recommended
that this field is left empty, so that the value will be calculated
automatically based on the transport address.

</member>
        <member name="F:pj.AccountSipConfig.proxies">
Array of proxy servers to visit for outgoing requests. Each of the
entry is translated into one Route URI.

</member>
        <member name="F:pj.AccountSipConfig.authCreds">
Array of credentials. If registration is desired, normally there should
be at least one credential specified, to successfully authenticate
against the service provider. More credentials can be specified, for
example when the requests are expected to be challenged by the
proxies in the route set.

</member>
        <member name="T:pj.AccountSipConfig">
Various SIP settings for the account. This will be specified in
AccountConfig.

</member>
        <member name="D:pj.AuthCredInfoVector">
Array of SIP credentials 
</member>
        <member name="M:pj.AccountRegConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container node.

 @param node		Container to write values to.

</member>
        <member name="M:pj.AccountRegConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container node.

 @param node		Container to read values from.

</member>
        <member name="F:pj.AccountRegConfig.proxyUse">
 Specify how the registration uses the outbound and account proxy
 settings. This controls if and what Route headers will appear in
 the REGISTER request of this account. The value is bitmask combination
 of PJSUA_REG_USE_OUTBOUND_PROXY and PJSUA_REG_USE_ACC_PROXY bits.
 If the value is set to 0, the REGISTER request will not use any proxy
 (i.e. it will not have any Route headers).

 Default: 3 (PJSUA_REG_USE_OUTBOUND_PROXY | PJSUA_REG_USE_ACC_PROXY)

</member>
        <member name="F:pj.AccountRegConfig.unregWaitMsec">
 Specify the maximum time to wait for unregistration requests to
 complete during library shutdown sequence.

 Default: PJSUA_UNREG_TIMEOUT

</member>
        <member name="F:pj.AccountRegConfig.dropCallsOnFail">
 Specify whether calls of the configured account should be dropped
 after registration failure and an attempt of re-registration has
 also failed.

 Default: FALSE (disabled)

</member>
        <member name="F:pj.AccountRegConfig.delayBeforeRefreshSec">
 Specify the number of seconds to refresh the client registration
 before the registration expires.

 Default: PJSIP_REGISTER_CLIENT_DELAY_BEFORE_REFRESH, 5 seconds

</member>
        <member name="F:pj.AccountRegConfig.randomRetryIntervalSec">
 This specifies maximum randomized value to be added/substracted
 to/from the registration retry interval specified in \a
 reg_retry_interval and \a reg_first_retry_interval, in second.
 This is useful to avoid all clients re-registering at the same time.
 For example, if the registration retry interval is set to 100 seconds
 and this is set to 10 seconds, the actual registration retry interval
 will be in the range of 90 to 110 seconds.

 See also \a retryIntervalSec and \a firstRetryIntervalSec settings.

 Default: 10

</member>
        <member name="F:pj.AccountRegConfig.firstRetryIntervalSec">
 This specifies the interval for the first registration retry. The
 registration retry is explained in \a retryIntervalSec. Note that
 the value here will also be randomized by some seconds (specified
 in \a reg_retry_random_interval) to avoid all clients re-registering
 at the same time.

 See also \a retryIntervalSec and \a randomRetryIntervalSec settings.

 Default: 0

</member>
        <member name="F:pj.AccountRegConfig.retryIntervalSec">
 Specify interval of auto registration retry upon registration failure
 (including caused by transport problem), in second. Set to 0 to
 disable auto re-registration. Note that if the registration retry
 occurs because of transport failure, the first retry will be done
 after \a firstRetryIntervalSec seconds instead. Also note that
 the interval will be randomized slightly by some seconds (specified
 in \a reg_retry_random_interval) to avoid all clients re-registering
 at the same time.

 See also \a firstRetryIntervalSec and \a randomRetryIntervalSec
 settings.

 Default: PJSUA_REG_RETRY_INTERVAL

</member>
        <member name="F:pj.AccountRegConfig.timeoutSec">
Optional interval for registration, in seconds. If the value is zero,
default interval will be used (PJSUA_REG_INTERVAL, 300 seconds).

</member>
        <member name="F:pj.AccountRegConfig.headers">
The optional custom SIP headers to be put in the registration
request.

</member>
        <member name="F:pj.AccountRegConfig.registerOnAdd">
 Specify whether the account should register as soon as it is
 added to the UA. Application can set this to PJ_FALSE and control
 the registration manually with pjsua_acc_set_registration().

 Default: True

</member>
        <member name="F:pj.AccountRegConfig.registrarUri">
 This is the URL to be put in the request URI for the registration,
 and will look something like "sip:serviceprovider".

 This field should be specified if registration is desired. If the
 value is empty, no account registration will be performed.

</member>
        <member name="T:pj.AccountRegConfig">
Account registration config. This will be specified in AccountConfig.

</member>
        <member name="D:pj.BuddyVector">
Array of buddies 
</member>
        <member name="F:pj.Buddy.acc">
Account.

</member>
        <member name="F:pj.Buddy.id">
Buddy ID.

</member>
        <member name="M:pj.Buddy.onBuddyState">
Notify application when the buddy state has changed.
Application may then query the buddy info to get the details.

</member>
        <member name="M:pj.Buddy.sendTypingIndication(pj.SendTypingIndicationParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Send typing indication outside dialog.

 @param prm	Sending instant message parameter.

</member>
        <member name="M:pj.Buddy.sendInstantMessage(pj.SendInstantMessageParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Send instant messaging outside dialog, using this buddy's specified
 account for route set and authentication.

 @param prm	Sending instant message parameter.

</member>
        <member name="M:pj.Buddy.updatePresence">
 Update the presence information for the buddy. Although the library
 periodically refreshes the presence subscription for all buddies,
 some application may want to refresh the buddy's presence subscription
 immediately, and in this case it can use this function to accomplish
 this.

 Note that the buddy's presence subscription will only be initiated
 if presence monitoring is enabled for the buddy. See
 subscribePresence() for more info. Also if presence subscription for
 the buddy is already active, this function will not do anything.

 Once the presence subscription is activated successfully for the buddy,
 application will be notified about the buddy's presence status in the
 \a onBuddyState() callback.

</member>
        <member name="M:pj.Buddy.subscribePresence(System.Boolean)">
 Enable/disable buddy's presence monitoring. Once buddy's presence is
 subscribed, application will be informed about buddy's presence status
 changed via \a onBuddyState() callback.

 @param subscribe		Specify true to activate presence
				subscription.

</member>
        <member name="M:pj.Buddy.getInfo">
 Get detailed buddy info.

 @return			Buddy info.

</member>
        <member name="M:pj.Buddy.isValid">
 Check if this buddy is valid.

 @return			True if it is.

</member>
        <member name="M:pj.Buddy.create(pj.Account*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,pj.BuddyConfig!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Create buddy and register the buddy to PJSUA-LIB.

 @param acc		The account for this buddy.
 @param cfg		The buddy config.

</member>
        <member name="M:pj.Buddy.Dispose">
Destructor. Note that if the Buddy instance is deleted, it will also
delete the corresponding buddy in the PJSUA-LIB.

</member>
        <member name="M:pj.Buddy.#ctor">
Constructor.

</member>
        <member name="T:pj.Buddy">
Buddy.

</member>
        <member name="M:pj.BuddyInfo.fromPj(pjsua_buddy_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Import from pjsip structure 
</member>
        <member name="F:pj.BuddyInfo.presStatus">
Presence status.

</member>
        <member name="F:pj.BuddyInfo.subTermReason">
Specifies the last presence subscription termination reason. If 
presence subscription is currently active, the value will be empty.

</member>
        <member name="F:pj.BuddyInfo.subTermCode">
Specifies the last presence subscription termination code. This would
return the last status of the SUBSCRIBE request. If the subscription
is terminated with NOTIFY by the server, this value will be set to
200, and subscription termination reason will be given in the
\a subTermReason field.

</member>
        <member name="F:pj.BuddyInfo.subStateName">
String representation of subscription state.

</member>
        <member name="F:pj.BuddyInfo.subState">
If \a presMonitorEnabled is true, this specifies the last state of
the presence subscription. If presence subscription session is currently
active, the value will be PJSIP_EVSUB_STATE_ACTIVE. If presence
subscription request has been rejected, the value will be
PJSIP_EVSUB_STATE_TERMINATED, and the termination reason will be
specified in \a subTermReason.

</member>
        <member name="F:pj.BuddyInfo.presMonitorEnabled">
Flag to indicate that we should monitor the presence information for
this buddy (normally yes, unless explicitly disabled).

</member>
        <member name="F:pj.BuddyInfo.contact">
Buddy's Contact, only available when presence subscription has
been established to the buddy.

</member>
        <member name="F:pj.BuddyInfo.uri">
The full URI of the buddy, as specified in the configuration.

</member>
        <member name="T:pj.BuddyInfo">
This structure describes buddy info, which can be retrieved by via
Buddy::getInfo().

</member>
        <member name="M:pj.BuddyConfig.writeObject(pj.ContainerNode*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Write this object to a container node.

 @param node		Container to write values to.

</member>
        <member name="M:pj.BuddyConfig.readObject(pj.ContainerNode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Read this object from a container node.

 @param node		Container to read values from.

</member>
        <member name="F:pj.BuddyConfig.subscribe">
Specify whether presence subscription should start immediately.

</member>
        <member name="F:pj.BuddyConfig.uri">
Buddy URL or name address.

</member>
        <member name="T:pj.BuddyConfig">
This structure describes buddy configuration when adding a buddy to
the buddy list with Buddy::create().

</member>
        <member name="M:pj.PresenceStatus.#ctor">
Constructor.

</member>
        <member name="F:pj.PresenceStatus.rpidId">
Optional RPID ID string.

</member>
        <member name="F:pj.PresenceStatus.note">
Optional text describing the person/element.

</member>
        <member name="F:pj.PresenceStatus.activity">
Activity type.

</member>
        <member name="F:pj.PresenceStatus.statusText">
Text to describe buddy's online status.

</member>
        <member name="F:pj.PresenceStatus.status">
Buddy's online status.

</member>
        <member name="T:pj.PresenceStatus">
This describes presence status.

</member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.set_DataType(System.Int32)">
            <summary>
Sets the type of data that is contained in the "data" field. Use 0 if the data
contains plain text password.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.get_DataType">
            <summary>
Gets the type of data that is contained in the "data" field. Use 0 if the data
contains plain text password.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.set_Username(System.String)">
            <summary>
Sets the authentication user name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.get_Username">
            <summary>
Gets the authentication user name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.set_Scheme(System.String)">
            <summary>
Sets the authentication scheme (e.g. "digest").
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.get_Scheme">
            <summary>
Gets the authentication scheme (e.g. "digest").
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.set_Realm(System.String)">
            <summary>
Sets the Realm on which this credential is to be used. Use "*" to make
a credential that can be used to authenticate against any challenges.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.get_Realm">
            <summary>
Gets the Realm on which this credential is to be used. Use "*" to make
a credential that can be used to authenticate against any challenges.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.set_Data(System.String)">
            <summary>
Sets the the data, which can be a plain text password or a hashed digest.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.get_Data">
            <summary>
Gets the the data, which can be a plain text password or a hashed digest.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CodecInfo.set_Priority(System.Byte)">
            <summary>
Gets or sets the codec priority (integer 0-255).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CodecInfo.get_Priority">
            <summary>
Gets or sets the codec priority (integer 0-255).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CodecInfo.set_Description(System.String)">
            <summary>
Gets or sets the codec description.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CodecInfo.get_Description">
            <summary>
Gets or sets the codec description.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CodecInfo.set_CodecId(System.String)">
            <summary>
Gets or sets the codec id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CodecInfo.get_CodecId">
            <summary>
Gets or sets the codec id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowHandle.set_Type(&lt;unknown type&gt;)">
            <summary>
Gets or sets the window handle type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowHandle.get_Type">
            <summary>
Gets or sets the window handle type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSendRequestParam.set_TxOption(Nequeo.Net.PjSip.SipTxOption)">
            <summary>
Gets or sets the list of headers etc to be included in outgoing request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSendRequestParam.get_TxOption">
            <summary>
Gets or sets the list of headers etc to be included in outgoing request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSendRequestParam.set_Method(System.String)">
            <summary>
Gets or sets the SIP method of the request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSendRequestParam.get_Method">
            <summary>
Gets or sets the SIP method of the request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplacedParam.set_CallID(System.Int32)">
            <summary>
Gets or sets the new call id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplacedParam.get_CallID">
            <summary>
Gets or sets the new call id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplacedParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplacedParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplacedParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplacedParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreviewOpParam.set_Window(Nequeo.Net.PjSip.VideoWindowHandle)">
            <summary>
Gets or sets the Optional output window to be used to display the video preview.
This parameter will only be used if the video device supports
PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW capability and the capability
is not read - only.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreviewOpParam.get_Window">
            <summary>
Gets or sets the Optional output window to be used to display the video preview.
This parameter will only be used if the video device supports
PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW capability and the capability
is not read - only.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreviewOpParam.set_Format(Nequeo.Net.PjSip.MediaFormat)">
            <summary>
Gets or sets the media format. If left unitialized, this parameter will not be used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreviewOpParam.get_Format">
            <summary>
Gets or sets the media format. If left unitialized, this parameter will not be used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreviewOpParam.set_WindowFlags(System.UInt32)">
            <summary>
Gets or sets the Window flags. The value is a bitmask combination of
\a pjmedia_vid_dev_wnd_flag.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreviewOpParam.get_WindowFlags">
            <summary>
Gets or sets the Window flags. The value is a bitmask combination of
\a pjmedia_vid_dev_wnd_flag.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreviewOpParam.set_Show(System.Boolean)">
            <summary>
Gets or sets the show window initially.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreviewOpParam.get_Show">
            <summary>
Gets or sets the show window initially.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreviewOpParam.set_RenderID(System.Int32)">
            <summary>
Gets or sets the Device ID for the video renderer to be used for rendering the
capture stream for preview.This parameter is ignored if native
preview is being used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreviewOpParam.get_RenderID">
            <summary>
Gets or sets the Device ID for the video renderer to be used for rendering the
capture stream for preview.This parameter is ignored if native
preview is being used.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoPreviewOpParam.Window">
            <summary>
Gets or sets the Optional output window to be used to display the video preview.
This parameter will only be used if the video device supports
PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW capability and the capability
is not read - only.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoPreviewOpParam.Format">
            <summary>
Gets or sets the media format. If left unitialized, this parameter will not be used.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoPreviewOpParam.WindowFlags">
            <summary>
Gets or sets the Window flags. The value is a bitmask combination of
\a pjmedia_vid_dev_wnd_flag.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoPreviewOpParam.Show">
            <summary>
Gets or sets the show window initially.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoPreviewOpParam.RenderID">
            <summary>
Gets or sets the Device ID for the video renderer to be used for rendering the
capture stream for preview.This parameter is ignored if native
preview is being used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoPreviewOpParam.#ctor">
            <summary>
This structure contains parameters for VideoPreview::start()
</summary>
            <summary>
This structure contains parameters for VideoPreview::start()
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.VideoPreviewOpParam">
            <summary>
This structure contains parameters for VideoPreview::start()
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingSubscribeParam.set_TxOption(Nequeo.Net.PjSip.SipTxOption)">
            <summary>
Gets or sets additional data to be sent with the response, if any.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingSubscribeParam.get_TxOption">
            <summary>
Gets or sets additional data to be sent with the response, if any.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingSubscribeParam.set_RxData(Nequeo.Net.PjSip.SipRxData)">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingSubscribeParam.get_RxData">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingSubscribeParam.set_Reason(System.String)">
            <summary>
Gets or sets the reason phrase to respond to the request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingSubscribeParam.get_Reason">
            <summary>
Gets or sets the reason phrase to respond to the request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingSubscribeParam.set_FromUri(System.String)">
            <summary>
Gets or sets the sender URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingSubscribeParam.get_FromUri">
            <summary>
Gets or sets the sender URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingSubscribeParam.set_Code(&lt;unknown type&gt;)">
            <summary>
Gets or sets the SIP status code of the transaction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingSubscribeParam.get_Code">
            <summary>
Gets or sets the SIP status code of the transaction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.VideoIncomingWindow_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
Closing form.
</summary>
            <param name="sender">The object sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.VideoIncomingWindow_ResizeEnd(System.Object,System.EventArgs)">
            <summary>
Resize form.
</summary>
            <param name="sender">The object sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.VideoIncomingWindow_Load(System.Object,System.EventArgs)">
            <summary>
Load form.
</summary>
            <param name="sender">The object sender.</param>
            <param name="e">The event.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.InitializeComponent">
            <summary>
Required method for Designer support - do not modify
the contents of this method with the code editor.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.UI.VideoIncomingWindow.components">
            <summary>
Required designer variable.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.Dispose">
            <summary>
Clean up any resources being used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.Create">
            <summary>
Create the preview.
</summary>
            <summary>
Create the icoming video.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.GetCallID">
            <summary>
Get the video call id
</summary>
            <return>The video call id.</return>
            <summary>
Get the video call id
</summary>
            <return>The video call id.</return>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.GetActiveState">
            <summary>
Get the window active state.
</summary>
            <return>The window active state.</return>
            <summary>
Get the window active state.
</summary>
            <return>The window active state.</return>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.SetActiveState(System.Boolean)">
            <summary>
Set the window active state.
</summary>
            <param name="state">The window active state.</param>
            <summary>
Set the window active state.
</summary>
            <param name="state">The window active state.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.HideVideoWindow">
            <summary>
Hide the video window.
</summary>
            <summary>
Hide the video window.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.ShowVideoWindow">
            <summary>
Show the video window.
</summary>
            <summary>
Show the video window.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.UI.VideoIncomingWindow.OnVideoIncomingClosing">
            <summary>
Form is closing.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UI.VideoIncomingWindow.#ctor(System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
Summary for VideoIncomingWindow
</summary>
            <param name="videoWindowID">The video window id (&gt;= 0).</param>
            <param name="windowTitle">The video window title.</param>
            <param name="callID">The video call unique id.</param>
            <param name="windowWidth">The video window width.</param>
            <param name="windowHeight">The video window height.</param>
        </member>
        <member name="T:Nequeo.Net.PjSip.UI.VideoIncomingWindow">
            <summary>
Summary for VideoIncomingWindow
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaTransportInfo.set_RemoteRtcpName(System.String)">
            <summary>
Gets or sets the remote address where RTCP originated from.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaTransportInfo.get_RemoteRtcpName">
            <summary>
Gets or sets the remote address where RTCP originated from.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaTransportInfo.set_RemoteRtpName(System.String)">
            <summary>
Gets or sets the remote address where RTP originated from.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaTransportInfo.get_RemoteRtpName">
            <summary>
Gets or sets the remote address where RTP originated from.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortRangeTLSv6(System.UInt32)">
            <summary>
Gets or sets the TLS v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortRangeTLSv6">
            <summary>
Gets or sets the TLS v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortRangeTLSv4(System.UInt32)">
            <summary>
Gets or sets the TLS v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortRangeTLSv4">
            <summary>
Gets or sets the TLS v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortRangeTCPv6(System.UInt32)">
            <summary>
Gets or sets the TCP v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortRangeTCPv6">
            <summary>
Gets or sets the TCP v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortRangeTCPv4(System.UInt32)">
            <summary>
Gets or sets the TCP v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortRangeTCPv4">
            <summary>
Gets or sets the TCP v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortRangeUDPv6(System.UInt32)">
            <summary>
Gets or sets the UDP v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortRangeUDPv6">
            <summary>
Gets or sets the UDP v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortRangeUDPv4(System.UInt32)">
            <summary>
Gets or sets the UDP v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortRangeUDPv4">
            <summary>
Gets or sets the UDP v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortTLSv6(System.UInt32)">
            <summary>
Gets or sets the TLS v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortTLSv6">
            <summary>
Gets or sets the TLS v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortTLSv4(System.UInt32)">
            <summary>
Gets or sets the TLS v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortTLSv4">
            <summary>
Gets or sets the TLS v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortTCPv6(System.UInt32)">
            <summary>
Gets or sets the TCP v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortTCPv6">
            <summary>
Gets or sets the TCP v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortTCPv4(System.UInt32)">
            <summary>
Gets or sets the TCP v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortTCPv4">
            <summary>
Gets or sets the TCP v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortUDPv6(System.UInt32)">
            <summary>
Gets or sets the UDP v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortUDPv6">
            <summary>
Gets or sets the UDP v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_PortUDPv4(System.UInt32)">
            <summary>
Gets or sets the UDP v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_PortUDPv4">
            <summary>
Gets or sets the UDP v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_LogFileWrite(&lt;unknown type&gt;)">
            <summary>
Gets or sets log file write flag.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_LogFileWrite">
            <summary>
Gets or sets log file write flag.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_LogHeader(&lt;unknown type&gt;)">
            <summary>
Gets or sets log file header flag.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_LogHeader">
            <summary>
Gets or sets log file header flag.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_LogLevelConsole(System.UInt32)">
            <summary>
Gets or sets the console log level (0 .. 4).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_LogLevelConsole">
            <summary>
Gets or sets the console log level (0 .. 4).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_LogLevel(System.UInt32)">
            <summary>
Gets or sets the log level (0 .. 5).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_LogLevel">
            <summary>
Gets or sets the log level (0 .. 5).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_LogMessages(System.Boolean)">
            <summary>
Gets or sets a value that specifies log incomming and outgoing messages.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_LogMessages">
            <summary>
Gets or sets a value that specifies log incomming and outgoing messages.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_LogFileName(System.String)">
            <summary>
Gets or sets the log filename and path.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_LogFileName">
            <summary>
Gets or sets the log filename and path.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.set_UseConfig(System.Boolean)">
            <summary>
Gets or sets a value that specifies if an end point configuration should be used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.get_UseConfig">
            <summary>
Gets or sets a value that specifies if an end point configuration should be used.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortRangeTLSv6">
            <summary>
Gets or sets the TLS v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortTLSv6">
            <summary>
Gets or sets the TLS v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortRangeTLSv4">
            <summary>
Gets or sets the TLS v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortTLSv4">
            <summary>
Gets or sets the TLS v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortRangeTCPv6">
            <summary>
Gets or sets the TCP v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortTCPv6">
            <summary>
Gets or sets the TCP v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortRangeTCPv4">
            <summary>
Gets or sets the TCP v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortTCPv4">
            <summary>
Gets or sets the TCP v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortRangeUDPv6">
            <summary>
Gets or sets the UDP v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortUDPv6">
            <summary>
Gets or sets the UDP v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortRangeUDPv4">
            <summary>
Gets or sets the UDP v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.PortUDPv4">
            <summary>
Gets or sets the UDP v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.LogFileWrite">
            <summary>
Gets or sets log file write flag.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.LogHeader">
            <summary>
Gets or sets log file header flag.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.LogLevelConsole">
            <summary>
Gets or sets the console log level (0 .. 4).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.LogLevel">
            <summary>
Gets or sets the log level (0 .. 5).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.LogMessages">
            <summary>
Gets or sets a value that specifies log incomming and outgoing messages.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.LogFileName">
            <summary>
Gets or sets the log filename and path.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.EndPointConfig.UseConfig">
            <summary>
Gets or sets a value that specifies if an end point configuration should be used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfig.#ctor">
            <summary>
Endpoint configuration.
</summary>
            <summary>
Endpoint configuration.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.EndPointConfig">
            <summary>
Endpoint configuration.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortRangeTLSv6(System.UInt32)">
            <summary>
Set the TLS v6 transport port range (default 0, random port).
</summary>
            <param name="portRange">The port range.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortRangeTLSv6">
            <summary>
Get the TLS v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortRangeTLSv4(System.UInt32)">
            <summary>
Set the TLS v4 transport port range (default 0, random port).
</summary>
            <param name="portRange">The port range.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortRangeTLSv4">
            <summary>
Get the TLS v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortRangeTCPv6(System.UInt32)">
            <summary>
Set the TCP v6 transport port range (default 0, random port).
</summary>
            <param name="portRange">The port range.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortRangeTCPv6">
            <summary>
Get the TCP v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortRangeTCPv4(System.UInt32)">
            <summary>
Set the TCP v4 transport port range (default 0, random port).
</summary>
            <param name="portRange">The port range.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortRangeTCPv4">
            <summary>
Get the TCP v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortRangeUDPv6(System.UInt32)">
            <summary>
Set the UDP v6 transport port range (default 0, random port).
</summary>
            <param name="portRange">The port range.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortRangeUDPv6">
            <summary>
Get the UDP v6 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortRangeUDPv4(System.UInt32)">
            <summary>
Set the UDP v4 transport port range (default 0, random port).
</summary>
            <param name="portRange">The port range.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortRangeUDPv4">
            <summary>
Get the UDP v4 transport port range (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortTLSv6(System.UInt32)">
            <summary>
Set the TLS v6 transport port (default 0, random port).
</summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortTLSv6">
            <summary>
Get the TLS v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortTLSv4(System.UInt32)">
            <summary>
Set the TLS v4 transport port (default 0, random port).
</summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortTLSv4">
            <summary>
Get the TLS v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortTCPv6(System.UInt32)">
            <summary>
Set the TCP v6 transport port (default 0, random port).
</summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortTCPv6">
            <summary>
Get the TCP v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortTCPv4(System.UInt32)">
            <summary>
Set the TCP v4 transport port (default 0, random port).
</summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortTCPv4">
            <summary>
Get the TCP v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortUDPv6(System.UInt32)">
            <summary>
Set the UDP v6 transport port (default 0, random port).
</summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortUDPv6">
            <summary>
Get the UDP v6 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetPortUDPv4(System.UInt32)">
            <summary>
Set the UDP v4 transport port (default 0, random port).
</summary>
            <param name="port">The port.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetPortUDPv4">
            <summary>
Get the UDP v4 transport port (default 0, random port).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetFileHeaderFlag(System.UInt32)">
            <summary>
Set the log file header flag.
</summary>
            <param name="flag">The log file header flag.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetFileHeaderFlag">
            <summary>
Get the log file header flag.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetFileWriteFlag(System.UInt32)">
            <summary>
Set the log file write flag.
</summary>
            <param name="flag">The file flag.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetFileWriteFlag">
            <summary>
Get the log file write flag.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetConsoleLogLevel(System.UInt32)">
            <summary>
Set console log level.
</summary>
            <param name="level">The log level (0 .. 4).</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetConsoleLogLevel">
            <summary>
Get console log level.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetLogLevel(System.UInt32)">
            <summary>
Set log level.
</summary>
            <param name="level">The log level (0 .. 5).</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetLogLevel">
            <summary>
Get log level.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetLogMessages(System.Boolean)">
            <summary>
Set log incomming and outgoing messages.
</summary>
            <param name="logMessages">True to log messages; else false.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetLogMessages">
            <summary>
Get log incomming and outgoing messages.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetFileName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set the log file name and path.
</summary>
            <param name="fileName">The file name and path.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetFileName">
            <summary>
Get the log file name and path.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.SetHasConfiguration(System.Boolean)">
            <summary>
Set has configuration.
</summary>
            <param name="hasConfig">The file name and path.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.GetHasConfiguration">
            <summary>
Get has configuration.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.Dispose">
            <summary>
Endpoint configuration.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.EndPointConfiguration.#ctor">
            <summary>
Endpoint configuration.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.EndPointConfiguration">
            <summary>
Endpoint configuration.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.LogWriteFlag">
            <summary>
Log file write type.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.FILE_APPEND">
            <summary>
Append to existing file.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.FILE_WRITING">
            <summary>
Open file for writing (overwriting the file).
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.FILE_DEFAULT">
            <summary>
Open file for writing (overwriting the file).
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.LogHeaderFlag">
            <summary>
Log file header type.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_INDENT">
            <summary>
Indentation [yes]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_THREAD_SWC">
            <summary>
Add mark when thread has switched [yes]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_THREAD_ID">
            <summary>
Include thread identification [no]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_LEVEL_TEXT">
            <summary>
Include level text string [no]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_COLOR">
            <summary>
Colorize logs [yes on win32]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_SPACE">
            <summary>
Include two spaces before log [yes]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_CR">
            <summary>
Include carriage return [no]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_NEWLINE">
            <summary>
Terminate each call with newline [yes]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_SENDER">
            <summary>
Include sender in the log [yes]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_MICRO_SEC">
            <summary>
Include microseconds [yes]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_TIME">
            <summary>
Include time [yes]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_DAY_OF_MON">
            <summary>
Include day of month [no]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_MONTH">
            <summary>
Include month [no]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_YEAR">
            <summary>
Include year digit [no]
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.LOG_HAS_DAY_NAME">
            <summary>
Include day name [default: no]
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.set_Continue(System.Boolean)">
            <summary>
Gets or sets the Initially will be set to true, application can set this to false
if it no longer wants to receive further notification (for example,
after it hangs up the call).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.get_Continue">
            <summary>
Gets or sets the Initially will be set to true, application can set this to false
if it no longer wants to receive further notification (for example,
after it hangs up the call).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.set_FinalNotify(System.Boolean)">
            <summary>
Gets or sets the If true, no further notification will be reported. The statusCode
specified in this callback is the final status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.get_FinalNotify">
            <summary>
Gets or sets the If true, no further notification will be reported. The statusCode
specified in this callback is the final status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.set_Reason(System.String)">
            <summary>
Gets or sets the status progress reason.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.get_Reason">
            <summary>
Gets or sets the status progress reason.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.set_Code(&lt;unknown type&gt;)">
            <summary>
Gets or sets the status progress of the transfer request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.get_Code">
            <summary>
Gets or sets the status progress of the transfer request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCreateMediaTransport_Handler(pj.OnCreateMediaTransportParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Media Transport function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallMediaEvent_Handler(pj.OnCallMediaEventParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Media Event function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallMediaTransportState_Handler(pj.OnCallMediaTransportStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Media Transport State function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallRedirected_Handler(pj.OnCallRedirectedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Redirected function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnTypingIndication_Handler(pj.OnTypingIndicationParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Typing Indication function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnInstantMessageStatus_Handler(pj.OnInstantMessageStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Instant Message Status function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnInstantMessage_Handler(pj.OnInstantMessageParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Instant Message function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallRxOffer_Handler(pj.OnCallRxOfferParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Rx Offer function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallReplaced_Handler(pj.OnCallReplacedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Replaced function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallReplaceRequest_Handler(pj.OnCallReplaceRequestParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Replace Request function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallTransferStatus_Handler(pj.OnCallTransferStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Transfer Status function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallTransferRequest_Handler(pj.OnCallTransferRequestParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Transfer Request function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnDtmfDigit_Handler(pj.OnDtmfDigitParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Dtmf Digit function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnStreamDestroyed_Handler(pj.OnStreamDestroyedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Stream Destroyed function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnStreamCreated_Handler(pj.OnStreamCreatedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Stream Created function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallSdpCreated_Handler(pj.OnCallSdpCreatedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call sdp created function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallTsxState_Handler(pj.OnCallTsxStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Tsx State function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallMediaState_Handler(pj.OnCallMediaStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call Media State function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.OnCallState_Handler(pj.OnCallStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
On Call State function callback.
</summary>
            <param name="prm">The on incoming call parameters.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.MarshalString(System.String,std.basic_string&lt;System.Char,std.char_traits{System.Char},std.allocator&lt;System.Char&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.MarshalString(System.String,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
MarshalString
</summary>
            <param name="s">The string.</param>
            <param name="os">The native string.</param>
        </member>
        <member name="M:pjsua_im_create_accept(pj_pool_t*)">
Create Accept header for MESSAGE.

</member>
        <member name="M:pjsua_im_process_pager(System.Int32,pj_str_t!System.Runtime.CompilerServices.IsConst*,pj_str_t!System.Runtime.CompilerServices.IsConst*,pjsip_rx_data*)">
 Private: process pager message.
	    This may trigger pjsua_ui_on_pager() or pjsua_ui_on_typing().

</member>
        <member name="M:pjsua_im_accept_pager(pjsip_rx_data*,pjsip_generic_array_hdr**)">
 Private: check if we can accept the message.
	    If not, then p_accept header will be filled with a valid
	    Accept header.

</member>
        <member name="M:pjsua_media_subsys_destroy(System.UInt32)">
Destroy pjsua media subsystem.

</member>
        <member name="M:pjsua_media_subsys_start">
Start pjsua media subsystem.

</member>
        <member name="M:pjsua_media_subsys_init(pjsua_media_config!System.Runtime.CompilerServices.IsConst*)">
Init media subsystems.

</member>
        <member name="M:pjsua_call_subsys_start">
Start call subsystem.

</member>
        <member name="M:pjsua_call_subsys_init(pjsua_config!System.Runtime.CompilerServices.IsConst*)">
Init call subsystem.

</member>
        <member name="M:pjsua_start_mwi(System.Int32,System.Int32)">
Start MWI subscription

</member>
        <member name="M:pjsua_im_init">
Init IM module handler to handle incoming MESSAGE outside dialog.

</member>
        <member name="M:pjsua_pres_delete_acc(System.Int32,System.UInt32)">
Terminate server subscription for the account 

</member>
        <member name="M:pjsua_pres_unpublish(pjsua_acc*,System.UInt32)">
Send un-PUBLISH

</member>
        <member name="M:pjsua_pres_init_publish_acc(System.Int32)">
Send PUBLISH

</member>
        <member name="M:pjsua_pres_init_acc(System.Int32)">
Init presence for aoocunt.

</member>
        <member name="M:pjsua_pres_refresh">
Refresh presence subscriptions

</member>
        <member name="M:pjsua_pres_init">
Init presence.

</member>
        <member name="M:pjsua_call_on_incoming(pjsip_rx_data*)">
Handle incoming invite request.

</member>
        <member name="M:normalize_route_uri(pj_pool_t*,pj_str_t*)">
Normalize route URI (check for ";lr" and append one if it doesn't
exist and pjsua_config.force_lr is set.

</member>
        <member name="M:pjsua_im_data_dup(pj_pool_t*,pjsua_im_data!System.Runtime.CompilerServices.IsConst*)">
Duplicate IM data.

</member>
        <member name="T:pjsua_im_data">
IM callback data.

</member>
        <member name="T:pjsua_data">
Global pjsua application data.


Get the instance of pjsua

</member>
        <member name="T:pjsua_conf_setting">
Additional parameters for conference bridge.

</member>
        <member name="T:pjsua_file_data">
File player/recorder data.

</member>
        <member name="T:pjsua_buddy">
Maximum length of subscription termination reason. 
Buddy data.

</member>
        <member name="T:pjsua_transport_data">
Transport.

</member>
        <member name="T:pjsua_acc">
Account

</member>
        <member name="T:pjsua_srv_pres">
Server presence subscription list head.

</member>
        <member name="T:call_answer">
Maximum number of SDP "m=" lines to be supported.

</member>
        <member name="F:pjsua_call_media.med_create_cb">
Media transport creation callback. 
</member>
        <member name="T:pjsua_call_media">
Forward decl of pjsua call media 

Call's media stream.

</member>
        <member name="T:pjsua_call">
This is the private header used by pjsua library implementation. 
Applications should not include this file.

Forward decl of pjsua call 

Structure to be attached to invite dialog. 
Given a dialog "dlg", application can retrieve this structure
by accessing dlg-&gt;mod_data[pjsua.mod.id].

</member>
        <member name="P:Nequeo.Net.PjSip.OnStreamDestroyedParam.StreamIndex">
            <summary>
Gets or sets the stream index in the media session.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnStreamDestroyedParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnStreamDestroyedParam.#ctor">
            <summary>
This structure contains parameters for Call::onStreamDestroyed() callback.
</summary>
            <summary>
This structure contains parameters for Call::onStreamDestroyed() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnStreamDestroyedParam">
            <summary>
This structure contains parameters for Call::onStreamDestroyed() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnDtmfDigitParam.Digit">
            <summary>
Gets or sets the DTMF ASCII digit.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnDtmfDigitParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnDtmfDigitParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnDtmfDigitParam.#ctor">
            <summary>
This structure contains parameters for Call::onDtmfDigit() callback.
</summary>
            <summary>
This structure contains parameters for Call::onDtmfDigit() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnDtmfDigitParam">
            <summary>
This structure contains parameters for Call::onDtmfDigit() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTransferRequestParam.Setting">
            <summary>
Gets or sets the current call setting, application can update this setting
for the call being transferred.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTransferRequestParam.DestinationUri">
            <summary>
Gets or sets the destination where the call will be transferred to.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTransferRequestParam.Code">
            <summary>
Gets or sets the status progress of the transfer request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTransferRequestParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTransferRequestParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferRequestParam.#ctor">
            <summary>
This structure contains parameters for Call::onCallTransferRequest() callback.
</summary>
            <summary>
This structure contains parameters for Call::onCallTransferRequest() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallTransferRequestParam">
            <summary>
This structure contains parameters for Call::onCallTransferRequest() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTransferStatusParam.Continue">
            <summary>
Gets or sets the Initially will be set to true, application can set this to false
if it no longer wants to receive further notification (for example,
after it hangs up the call).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTransferStatusParam.FinalNotify">
            <summary>
Gets or sets the If true, no further notification will be reported. The statusCode
specified in this callback is the final status.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTransferStatusParam.Reason">
            <summary>
Gets or sets the status progress reason.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTransferStatusParam.Code">
            <summary>
Gets or sets the status progress of the transfer request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTransferStatusParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTransferStatusParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTransferStatusParam.#ctor">
            <summary>
This structure contains parameters for Call::onCallTransferStatus() callback.
</summary>
            <summary>
This structure contains parameters for Call::onCallTransferStatus() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallTransferStatusParam">
            <summary>
This structure contains parameters for Call::onCallTransferStatus() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallReplaceRequestParam.Code">
            <summary>
Gets or sets the Status code to be set by application. Application should only
return a final status(200 - 699).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallReplaceRequestParam.Reason">
            <summary>
Gets or sets the optional status text to be set by application.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallReplaceRequestParam.Setting">
            <summary>
Gets or sets the current call setting, application can update this setting for the call being replaced.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallReplaceRequestParam.RxData">
            <summary>
Gets or sets the incoming INVITE request to replace the call.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallReplaceRequestParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallReplaceRequestParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplaceRequestParam.#ctor">
            <summary>
This structure contains parameters for Call::onCallReplaceRequest() callback.
</summary>
            <summary>
This structure contains parameters for Call::onCallReplaceRequest() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallReplaceRequestParam">
            <summary>
This structure contains parameters for Call::onCallReplaceRequest() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallSdpCreatedParam.RemoteSdp">
            <summary>
Gets or sets the remote SDP, will be empty if local is SDP offerer.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallSdpCreatedParam.Sdp">
            <summary>
Gets or sets the SDP has just been created.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallSdpCreatedParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallSdpCreatedParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallSdpCreatedParam.#ctor">
            <summary>
This structure contains parameters for Call::onCallSdpCreated() callback.
</summary>
            <summary>
This structure contains parameters for Call::onCallSdpCreated() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallSdpCreatedParam">
            <summary>
This structure contains parameters for Call::onCallSdpCreated() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallReplacedParam.CallID">
            <summary>
Gets or sets the new call id.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallReplacedParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallReplacedParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallReplacedParam.#ctor">
            <summary>
This structure contains parameters for Call::onCallReplaced() callback.
</summary>
            <summary>
This structure contains parameters for Call::onCallReplaced() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallReplacedParam">
            <summary>
This structure contains parameters for Call::onCallReplaced() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallRxOfferParam.Code">
            <summary>
Gets or sets the Status code to be returned for answering the offer. On input,
it contains status code 200. Currently, valid values are only 200 and 488.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallRxOfferParam.Setting">
            <summary>
Gets or sets the current call setting, application can update this setting for answering the offer.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallRxOfferParam.Offer">
            <summary>
Gets or sets the new offer received.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallRxOfferParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallRxOfferParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRxOfferParam.#ctor">
            <summary>
This structure contains parameters for Call::onCallRxOffer() callback.
</summary>
            <summary>
This structure contains parameters for Call::onCallRxOffer() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallRxOfferParam">
            <summary>
This structure contains parameters for Call::onCallRxOffer() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SdpSession.WholeSdp">
            <summary>
Gets or sets the whole SDP as a string.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SdpSession.#ctor">
            <summary>
This structure describes SDP session description.
</summary>
            <summary>
This structure describes SDP session description.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.SdpSession">
            <summary>
This structure describes SDP session description.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallRedirectedParam.Redirect">
            <summary>
Gets or sets the redirect options.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallRedirectedParam.TargetUri">
            <summary>
Gets or sets the current target to be tried.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallRedirectedParam.EventType">
            <summary>
Gets or sets the sip event type.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallRedirectedParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallRedirectedParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallRedirectedParam.#ctor">
            <summary>
This structure contains parameters for Call::onCallRedirected() callback.
</summary>
            <summary>
This structure contains parameters for Call::onCallRedirected() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallRedirectedParam">
            <summary>
This structure contains parameters for Call::onCallRedirected() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.SipErrorCode">
            <summary>
Gets or sets the optional SIP error code.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.Status">
            <summary>
Gets or sets the last error code related to the media transport state.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.State">
            <summary>
Gets or sets the media transport state.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.MediaIndex">
            <summary>
Gets or sets the media index.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaTransportStateParam.#ctor">
            <summary>
This structure contains parameters for Call::onCallMediaTransportState() callback.
</summary>
            <summary>
On call state paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallMediaTransportStateParam">
            <summary>
This structure contains parameters for Call::onCallMediaTransportState() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaEventParam.Event">
            <summary>
Gets or sets the media event.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaEventParam.MediaIndex">
            <summary>
Gets or sets the media stream index.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaEventParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaEventParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaEventParam.#ctor">
            <summary>
This structure contains parameters for Call::onCallMediaEvent() callback.
</summary>
            <summary>
This structure contains parameters for Call::onCallMediaEvent() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallMediaEventParam">
            <summary>
This structure contains parameters for Call::onCallMediaEvent() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCreateMediaTransportParam.Flags">
            <summary>
Gets or sets the bitmask from pjsua_create_media_transport_flag.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCreateMediaTransportParam.MediaIndex">
            <summary>
Gets or sets the media index in the SDP for which this media transport will be used.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCreateMediaTransportParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCreateMediaTransportParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCreateMediaTransportParam.#ctor">
            <summary>
This structure contains parameters for Call::onCreateMediaTransport() callback.
</summary>
            <summary>
This structure contains parameters for Call::onCreateMediaTransport() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCreateMediaTransportParam">
            <summary>
This structure contains parameters for Call::onCreateMediaTransport() callback.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTsxStateParam.EventType">
            <summary>
Gets or sets the sip event type.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTsxStateParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallTsxStateParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallTsxStateParam.#ctor">
            <summary>
On call tsx state paramters.
</summary>
            <summary>
On call tsx state paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallTsxStateParam">
            <summary>
On call tsx state paramters.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallStateParam.EventType">
            <summary>
Gets or sets the sip event type.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallStateParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallStateParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallStateParam.#ctor">
            <summary>
On call state paramters.
</summary>
            <summary>
On call state paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallStateParam">
            <summary>
On call state paramters.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.NoMedia.#ctor">
            <summary>
No media.
</summary>
            <summary>
No media.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.NoMedia.Dispose">
            <summary>
No media deconstructor.
</summary>
            <summary>
No media deconstructor.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.NoMedia">
            <summary>
No media.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UnknownMedia.#ctor">
            <summary>
Unknown media.
</summary>
            <summary>
Unknown media.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.UnknownMedia.Dispose">
            <summary>
Unknown media deconstructor.
</summary>
            <summary>
Unknown media deconstructor.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.UnknownMedia">
            <summary>
Unknown media.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoMedia.#ctor">
            <summary>
Video media.
</summary>
            <summary>
Audio media.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoMedia.Dispose">
            <summary>
Video media. deconstructor.
</summary>
            <summary>
Audio media deconstructor.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.VideoMedia">
            <summary>
Video media.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaEvent.set_Type(Nequeo.Net.PjSip.MediaEventType)">
            <summary>
Gets or sets the event type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaEvent.get_Type">
            <summary>
Gets or sets the event type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaEvent.set_Data(Nequeo.Net.PjSip.MediaEventData)">
            <summary>
Gets or sets the Additional data/parameters about the event. The type of data
will be specific to the event type being reported.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaEvent.get_Data">
            <summary>
Gets or sets the Additional data/parameters about the event. The type of data
will be specific to the event type being reported.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaStateParam.set_Info(Nequeo.Net.PjSip.CallInfo)">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaStateParam.get_Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaStateParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaStateParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaStateParam.Info">
            <summary>
Gets or sets the call information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnCallMediaStateParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnCallMediaStateParam.#ctor">
            <summary>
On call media state paramters.
</summary>
            <summary>
On call media state paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnCallMediaStateParam">
            <summary>
On call media state paramters.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.PresenceState.set_StatusText(System.String)">
            <summary>
Gets or sets the text to describe buddy's online status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.PresenceState.get_StatusText">
            <summary>
Gets or sets the text to describe buddy's online status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.PresenceState.set_Status(&lt;unknown type&gt;)">
            <summary>
Gets or sets the buddy's online status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.PresenceState.get_Status">
            <summary>
Gets or sets the buddy's online status.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.PresenceState.set_RpidId(System.String)">
            <summary>
Gets or sets the optional RPID ID string.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.PresenceState.get_RpidId">
            <summary>
Gets or sets the optional RPID ID string.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.PresenceState.set_Note(System.String)">
            <summary>
Gets or sets the optional text describing the person/element.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.PresenceState.get_Note">
            <summary>
Gets or sets the optional text describing the person/element.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.PresenceState.set_Activity(&lt;unknown type&gt;)">
            <summary>
Gets or sets the activity type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.PresenceState.get_Activity">
            <summary>
Gets or sets the activity type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipMediaType.set_Type(System.String)">
            <summary>
Gets or sets the media type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipMediaType.get_Type">
            <summary>
Gets or sets the media type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipMediaType.set_SubType(System.String)">
            <summary>
Gets or sets the media subtype.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipMediaType.get_SubType">
            <summary>
Gets or sets the media subtype.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_Empty(System.UInt32)">
            <summary>
Gets or sets the Number of empty on GET events.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_Empty">
            <summary>
Gets or sets the Number of empty on GET events.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_Discard(System.UInt32)">
            <summary>
Gets or sets the Number of discarded frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_Discard">
            <summary>
Gets or sets the Number of discarded frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_Lost(System.UInt32)">
            <summary>
Gets or sets the Number of lost frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_Lost">
            <summary>
Gets or sets the Number of lost frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_AvgBurst(System.UInt32)">
            <summary>
Gets or sets the Average burst, in frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_AvgBurst">
            <summary>
Gets or sets the Average burst, in frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_DevDelayMsec(System.UInt32)">
            <summary>
Gets or sets the Standard deviation of delay, in ms.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_DevDelayMsec">
            <summary>
Gets or sets the Standard deviation of delay, in ms.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_MaxDelayMsec(System.UInt32)">
            <summary>
Gets or sets the Maximum delay, in ms.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_MaxDelayMsec">
            <summary>
Gets or sets the Maximum delay, in ms.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_MinDelayMsec(System.UInt32)">
            <summary>
Gets or sets the Minimum delay, in ms.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_MinDelayMsec">
            <summary>
Gets or sets the Minimum delay, in ms.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_AvgDelayMsec(System.UInt32)">
            <summary>
Gets or sets the Average delay, in ms.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_AvgDelayMsec">
            <summary>
Gets or sets the Average delay, in ms.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_Size(System.UInt32)">
            <summary>
Gets or sets the Current buffer size, in frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_Size">
            <summary>
Gets or sets the Current buffer size, in frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_Prefetch(System.UInt32)">
            <summary>
Gets or sets the Current prefetch value, in frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_Prefetch">
            <summary>
Gets or sets the Current prefetch value, in frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_Burst(System.UInt32)">
            <summary>
Gets or sets the Current burst level, in frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_Burst">
            <summary>
Gets or sets the Current burst level, in frames.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_MaxPrefetch(System.UInt32)">
            <summary>
Gets or sets the Maximum allowed prefetch, in frms. 
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_MaxPrefetch">
            <summary>
Gets or sets the Maximum allowed prefetch, in frms.  
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_MinPrefetch(System.UInt32)">
            <summary>
Gets or sets the Minimum allowed prefetch, in frms. 
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_MinPrefetch">
            <summary>
Gets or sets the Minimum allowed prefetch, in frms. 
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_FrameSize(System.UInt32)">
            <summary>
Gets or sets the Individual frame size, in bytes. 
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_FrameSize">
            <summary>
Gets or sets the Individual frame size, in bytes. 
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_RtpTxLastSeq(System.UInt16)">
            <summary>
Gets or sets the last TX RTP sequence. 
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_RtpTxLastSeq">
            <summary>
Gets or sets the last TX RTP sequence. 
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_RtpTxLastTs(System.UInt32)">
            <summary>
Gets or sets the last TX RTP timestamp.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_RtpTxLastTs">
            <summary>
Gets or sets the last TX RTP timestamp.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.set_Start(Nequeo.Net.PjSip.TimeVal)">
            <summary>
Gets or sets the time when session was created.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.get_Start">
            <summary>
Gets or sets the time when session was created.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.set_MaxBps(System.UInt32)">
            <summary>
Gets or sets the maximum bitrate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.get_MaxBps">
            <summary>
Gets or sets the maximum bitrate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.set_AvgBps(System.UInt32)">
            <summary>
Gets or sets the average bitrate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.get_AvgBps">
            <summary>
Gets or sets the average bitrate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.set_BitsPerSample(System.UInt32)">
            <summary>
Gets or sets the number of bits per sample.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.get_BitsPerSample">
            <summary>
Gets or sets the number of bits per sample.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.set_FrameTimeUsec(System.UInt32)">
            <summary>
Gets or sets the frame interval, in microseconds.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.get_FrameTimeUsec">
            <summary>
Gets or sets the frame interval, in microseconds.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.set_ChannelCount(System.UInt32)">
            <summary>
Gets or sets the number of channels.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.get_ChannelCount">
            <summary>
Gets or sets the number of channels.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.set_ClockRate(System.UInt32)">
            <summary>
Gets or sets the audio clock rate in samples or Hz.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.get_ClockRate">
            <summary>
Gets or sets the audio clock rate in samples or Hz.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStartedParam.set_Renew(System.Boolean)">
            <summary>
Gets or sets true for registration and false for unregistration.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStartedParam.get_Renew">
            <summary>
Gets or sets true for registration and false for unregistration.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.set_Listeners(System.Int32[])">
            <summary>
Gets or sets the Array of listeners (in other words, ports where this port is transmitting to.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.get_Listeners">
            <summary>
Gets or sets the Array of listeners (in other words, ports where this port is transmitting to.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.set_RxLevelAdj(System.Single)">
            <summary>
Gets or sets the Rx level adjustment. Value 1.0 means no adjustment, value 0 means
the port is muted, value 2.0 means the level is amplified two times.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.get_RxLevelAdj">
            <summary>
Gets or sets the Rx level adjustment. Value 1.0 means no adjustment, value 0 means
the port is muted, value 2.0 means the level is amplified two times.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.set_TxLevelAdj(System.Single)">
            <summary>
Gets or sets the Tx level adjustment. Value 1.0 means no adjustment, value 0 means
the port is muted, value 2.0 means the level is amplified two times.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.get_TxLevelAdj">
            <summary>
Gets or sets the Tx level adjustment. Value 1.0 means no adjustment, value 0 means
the port is muted, value 2.0 means the level is amplified two times.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.set_Format(Nequeo.Net.PjSip.MediaFormatAudio)">
            <summary>
Gets or sets the media audio format information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.get_Format">
            <summary>
Gets or sets the media audio format information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.set_Name(System.String)">
            <summary>
Gets or sets the port name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.get_Name">
            <summary>
Gets or sets the port name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.set_PortId(System.Int32)">
            <summary>
Gets or sets the conference port number.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.get_PortId">
            <summary>
Gets or sets the conference port number.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.get_UseDefaultCallSetting">
            <summary>
Gets the use default values.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.set_TxOption(Nequeo.Net.PjSip.SipTxOption)">
            <summary>
Gets or sets the list of headers etc to be added to outgoing response message.
Note that this message data will be persistent in all next
answers / responses for this INVITE request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.get_TxOption">
            <summary>
Gets or sets the list of headers etc to be added to outgoing response message.
Note that this message data will be persistent in all next
answers / responses for this INVITE request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.set_Code(&lt;unknown type&gt;)">
            <summary>
Gets or sets the status code.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.get_Code">
            <summary>
Gets or sets the status code.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.set_Reason(System.String)">
            <summary>
Gets or sets the reason phrase.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.get_Reason">
            <summary>
Gets or sets the reason phrase.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.set_Options(System.UInt32)">
            <summary>
Gets or sets the options.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.get_Options">
            <summary>
Gets or sets the options.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.set_Setting(Nequeo.Net.PjSip.CallSetting)">
            <summary>
Gets or sets the call settings.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.get_Setting">
            <summary>
Gets or sets the call settings.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnStreamCreatedParam.set_StreamIndex(System.UInt32)">
            <summary>
Gets or sets the stream index in the media session.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnStreamCreatedParam.get_StreamIndex">
            <summary>
Gets or sets the stream index in the media session.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnStreamCreatedParam.set_CurrentCall(Nequeo.Net.PjSip.Call)">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnStreamCreatedParam.get_CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnStreamCreatedParam.StreamIndex">
            <summary>
Gets or sets the stream index in the media session.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnStreamCreatedParam.CurrentCall">
            <summary>
Gets or sets the current call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnStreamCreatedParam.#ctor">
            <summary>
This structure contains parameters for Call::onStreamCreated() callback.
</summary>
            <summary>
This structure contains parameters for Call::onStreamCreated() callback.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnStreamCreatedParam">
            <summary>
This structure contains parameters for Call::onStreamCreated() callback.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.GetCallOpParam(Nequeo.Net.PjSip.CallOpParam,pj.CallOpParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Get the pj call options.
</summary>
            <param name="callOpParam">Optional call setting.</param>
            <param name="callOpParam">Optional pj call setting.</param>
            <summary>
Get the pj call options.
</summary>
            <param name="callOpParam">Optional call setting.</param>
            <param name="prm">Optional pj call setting.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.Create">
            <summary>
Create the call.
</summary>
            <summary>
Create the call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.GetCallCallback">
            <summary>
Get the call callback reference.
</summary>
            <summary>
Get the call callback reference.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.GetMedTransportInfo(System.UInt32)">
            <summary>
Get media transport info for the specified media index.
</summary>
            <param name="mediaIndex">Media stream index.</param>
            <returns>The transport info.</returns>
            <summary>
Get media transport info for the specified media index.
</summary>
            <param name="mediaIndex">Media stream index.</param>
            <returns>The transport info.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.GetStreamStat(System.UInt32)">
            <summary>
Get media stream statistic for the specified media index.
</summary>
            <param name="mediaIndex">Media stream index.</param>
            <returns>The stream statistic.</returns>
            <summary>
Get media stream statistic for the specified media index.
</summary>
            <param name="mediaIndex">Media stream index.</param>
            <returns>The stream statistic.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.GetStreamInfo(System.UInt32)">
            <summary>
Get media stream info for the specified media index.
</summary>
            <param name="mediaIndex">Media stream index.</param>
            <returns>The stream info.</returns>
            <summary>
Get media stream info for the specified media index.
</summary>
            <param name="mediaIndex">Media stream index.</param>
            <returns>The stream info.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.SetVideoStream(&lt;unknown type&gt;,Nequeo.Net.PjSip.CallSetVideoStreamParam)">
            <summary>
Add, remove, modify, and or manipulate video media stream for the
specified call. This may trigger a re - INVITE or UPDATE to be sent
for the call.
</summary>
            <param name="videoStreamOperation">The video stream operation to be performed.</param>
            <param name="callSetVideoStreamParam">The parameters for the video stream operation.</param>
            <summary>
Add, remove, modify, and or manipulate video media stream for the
specified call. This may trigger a re - INVITE or UPDATE to be sent
for the call.
</summary>
            <param name="videoStreamOperation">The video stream operation to be performed.</param>
            <param name="callSetVideoStreamParam">The parameters for the video stream operation.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.VideoStreamIsRunning(System.Int32,&lt;unknown type&gt;)">
            <summary>
Determine if video stream for the specified call is currently running
(i.e.has been created, started, and not being paused) for the specified
direction.
</summary>
            <param name="mediaIndex">Media stream index, or -1 to specify default video media.</param>
            <param name="mediaDirection">The direction to be checked.</param>
            <returns>True if stream is currently running for the specified direction.</returns>
            <summary>
Determine if video stream for the specified call is currently running
(i.e.has been created, started, and not being paused) for the specified
direction.
</summary>
            <param name="mediaIndex">Media stream index, or -1 to specify default video media.</param>
            <param name="mediaDirection">The direction to be checked.</param>
            <returns>True if stream is currently running for the specified direction.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.GetVideoStreamIndex">
            <summary>
Get the media stream index of the default video stream in the call.
Typically this will just retrieve the stream index of the first
activated video stream in the call.If none is active, it will return
the first inactive video stream.
</summary>
            <returns>The media stream index or -1 if no video stream is present in the call.</returns>
            <summary>
Get the media stream index of the default video stream in the call.
Typically this will just retrieve the stream index of the first
activated video stream in the call.If none is active, it will return
the first inactive video stream.
</summary>
            <returns>The media stream index or -1 if no video stream is present in the call.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.Dump(System.Boolean,System.String)">
            <summary>
Dump call and media statistics to string.
</summary>
            <param name="withMedia">True to include media information too.</param>
            <param name="indent">Spaces for left indentation.</param>
            <returns>Call dump and media statistics string.</returns>
            <summary>
Dump call and media statistics to string.
</summary>
            <param name="withMedia">True to include media information too.</param>
            <param name="indent">Spaces for left indentation.</param>
            <returns>Call dump and media statistics string.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.SendRequest(Nequeo.Net.PjSip.CallSendRequestParam)">
            <summary>
Send arbitrary request with the call. This is useful for example to send
INFO request.Note that application should not use this function to send
requests which would change the invite session's state, such as
re - INVITE, UPDATE, PRACK, and BYE.
</summary>
            <param name="callSendRequestParam">Sending call request parameter.</param>
            <summary>
Send arbitrary request with the call. This is useful for example to send
INFO request.Note that application should not use this function to send
requests which would change the invite session's state, such as
re - INVITE, UPDATE, PRACK, and BYE.
</summary>
            <param name="callSendRequestParam">Sending call request parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.SendTypingIndication(Nequeo.Net.PjSip.SendTypingIndicationParam)">
            <summary>
Send IM typing indication inside INVITE session.
</summary>
            <param name="sendTypingIndicationParam">Sending instant message parameter.</param>
            <summary>
Send IM typing indication inside INVITE session.
</summary>
            <param name="sendTypingIndicationParam">Sending instant message parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.SendInstantMessage(Nequeo.Net.PjSip.SendInstantMessageParam)">
            <summary>
Send instant messaging inside INVITE session.
</summary>
            <param name="sendInstantMessageParam">Sending instant message parameter.</param>
            <summary>
Send instant messaging inside INVITE session.
</summary>
            <param name="sendInstantMessageParam">Sending instant message parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.DialDtmf(System.String)">
            <summary>
Send DTMF digits to remote using RFC 2833 payload formats.
</summary>
            <param name="digits">DTMF string digits to be sent.</param>
            <summary>
Send DTMF digits to remote using RFC 2833 payload formats.
</summary>
            <param name="digits">DTMF string digits to be sent.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.ProcessRedirect(&lt;unknown type&gt;)">
            <summary>
Accept or reject redirection response. Application MUST call this
function after it signaled PJSIP_REDIRECT_PENDING in the
onCallRedirected() callback,
to notify the call whether to accept or reject the redirection
to the current target.Application can use the combination of
PJSIP_REDIRECT_PENDING command in onCallRedirected() callback and
this function to ask for user permission before redirecting the call.
Note that if the application chooses to reject or stop redirection(by
using PJSIP_REDIRECT_REJECT or PJSIP_REDIRECT_STOP respectively), the
call disconnection callback will be called before this function returns.
And if the application rejects the target, the a onCallRedirected()
callback may also be called before this function returns if there is
another target to try.
</summary>
            <param name="redirectResponse">
Redirection operation to be applied to the current
target.The semantic of this argument is similar
to the description in the onCallRedirected()
callback, except that the PJSIP_REDIRECT_PENDING is
not accepted here.</param>
            <summary>
Accept or reject redirection response. Application MUST call this
function after it signaled PJSIP_REDIRECT_PENDING in the
onCallRedirected() callback,
to notify the call whether to accept or reject the redirection
to the current target.Application can use the combination of
PJSIP_REDIRECT_PENDING command in onCallRedirected() callback and
this function to ask for user permission before redirecting the call.
Note that if the application chooses to reject or stop redirection(by
using PJSIP_REDIRECT_REJECT or PJSIP_REDIRECT_STOP respectively), the
call disconnection callback will be called before this function returns.
And if the application rejects the target, the a onCallRedirected()
callback may also be called before this function returns if there is
another target to try.
</summary>
            <param name="redirectResponse">
Redirection operation to be applied to the current
target.The semantic of this argument is similar
to the description in the onCallRedirected()
callback, except that the PJSIP_REDIRECT_PENDING is
not accepted here.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.TransferReplaces(Nequeo.Net.PjSip.Call,Nequeo.Net.PjSip.CallOpParam)">
            <summary>
Initiate call transfer to the specified address. This function will send
REFER request to instruct remote call party to initiate a new INVITE
session to the specified destination target.
If application is interested to monitor the successfulness and
the progress of the transfer request, it can implement
onCallTransferStatus() callback which will report the progress
of the call transfer request.
</summary>
            <param name="destination">The call to be replaced.</param>
            <param name="callOpParam">Optional call setting. callOpParam.options Application may specify
PJSUA_XFER_NO_REQUIRE_REPLACES to suppress the
inclusion of "Require: replaces" in
the outgoing INVITE request created by the REFER request.</param>
            <summary>
Initiate call transfer to the specified address. This function will send
REFER request to instruct remote call party to initiate a new INVITE
session to the specified destination / target.
If application is interested to monitor the successfulness and
the progress of the transfer request, it can implement
onCallTransferStatus() callback which will report the progress
of the call transfer request.
</summary>
            <param name="destination">The call to be replaced.</param>
            <param name="callOpParam">Optional call setting. callOpParam.options Application may specify
PJSUA_XFER_NO_REQUIRE_REPLACES to suppress the
inclusion of "Require: replaces" in
the outgoing INVITE request created by the REFER request.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.Transfer(System.String,Nequeo.Net.PjSip.CallOpParam)">
            <summary>
Initiate call transfer to the specified address. This function will send
REFER request to instruct remote call party to initiate a new INVITE
session to the specified destination / target.
If application is interested to monitor the successfulness and
the progress of the transfer request, it can implement
onCallTransferStatus() callback which will report the progress
of the call transfer request.
</summary>
            <param name="destination">The URI of new target to be contacted. The URI may be
in name address or addr - spec format.</param>
            <param name="callOpParam">Optional call setting.</param>
            <summary>
Initiate call transfer to the specified address. This function will send
REFER request to instruct remote call party to initiate a new INVITE
session to the specified destination / target.
If application is interested to monitor the successfulness and
the progress of the transfer request, it can implement
onCallTransferStatus() callback which will report the progress
of the call transfer request.
</summary>
            <param name="destination">The URI of new target to be contacted. The URI may be
in name address or addr - spec format.</param>
            <param name="callOpParam">Optional call setting.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.Update(Nequeo.Net.PjSip.CallOpParam)">
            <summary>
Send UPDATE request.
</summary>
            <param name="callOpParam">Optional call setting.</param>
            <summary>
Send UPDATE request.
</summary>
            <param name="callOpParam">Optional call setting.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.Reinvite(Nequeo.Net.PjSip.CallOpParam)">
            <summary>
Send re-INVITE.
The final status of the request itself will be reported on the
onCallMediaState() callback, which inform the application that
the media state of the call has changed.
</summary>
            <param name="callOpParam">Optional call setting. 
callOpParam.opt.flag  Bitmask of pjsua_call_flag constants. Specifying
PJSUA_CALL_UNHOLD here will release call hold.</param>
            <summary>
Send re-INVITE.
The final status of the request itself will be reported on the
onCallMediaState() callback, which inform the application that
the media state of the call has changed.
</summary>
            <param name="callOpParam">Optional call setting. 
callOpParam.opt.flag  Bitmask of pjsua_call_flag constants. Specifying
PJSUA_CALL_UNHOLD here will release call hold.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.SetHold(Nequeo.Net.PjSip.CallOpParam)">
            <summary>
Put the specified call on hold. This will send re-INVITE with the
appropriate SDP to inform remote that the call is being put on hold.
The final status of the request itself will be reported on the
onCallMediaState() callback, which inform the application that
the media state of the call has changed.
</summary>
            <param name="callOpParam">Optional call setting. 
callOpParam.options   Bitmask of pjsua_call_flag constants. Currently,
only the flag PJSUA_CALL_UPDATE_CONTACT can be used.</param>
            <summary>
Put the specified call on hold. This will send re-INVITE with the
appropriate SDP to inform remote that the call is being put on hold.
The final status of the request itself will be reported on the
onCallMediaState() callback, which inform the application that
the media state of the call has changed.
</summary>
            <param name="callOpParam">Optional call setting. 
prm.options   Bitmask of pjsua_call_flag constants. Currently,
only the flag PJSUA_CALL_UPDATE_CONTACT can be used.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.Hangup(Nequeo.Net.PjSip.CallOpParam)">
            <summary>
Hangup call by using method that is appropriate according to the
call state.This function is different than answering the call with
3xx - 6xx response(with answer()), in that this function
will hangup the call regardless of the state and role of the call,
while answer() only works with incoming calls on EARLY state.
</summary>
            <param name="callOpParam">Optional call setting. Incoming call. If the value is zero, "603/Decline" will be sent.</param>
            <summary>
Hangup call by using method that is appropriate according to the
call state.This function is different than answering the call with
3xx - 6xx response(with answer()), in that this function
will hangup the call regardless of the state and role of the call,
while answer() only works with incoming calls on EARLY state.
</summary>
            <param name="callOpParam">Optional call setting. incoming call. If the value is zero, "603/Decline" will be sent.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.Answer(Nequeo.Net.PjSip.CallOpParam)">
            <summary>
Send response to incoming INVITE request with call setting param.
Depending on the status code specified as parameter, this function may
send provisional response, establish the call, or terminate the call.
Notes about call setting:
 -if call setting is changed in the subsequent call to this function,
  only the first call setting supplied will applied.So normally
   application will not supply call setting before getting confirmation
   from the user.
 -if no call setting is supplied when SDP has to be sent, i.e: answer
   with status code 183 or 2xx, the default call setting will be used,
check CallSetting for its default values.
</summary>
            <param name="callOpParam">Optional call setting. callOpParam.statusCode Status code, (100-699).</param>
            <summary>
Send response to incoming INVITE request with call setting param.
Depending on the status code specified as parameter, this function may
send provisional response, establish the call, or terminate the call.
Notes about call setting:
If call setting is changed in the subsequent call to this function,
only the first call setting supplied will applied.So normally
application will not supply call setting before getting confirmation
from the user.
If no call setting is supplied when SDP has to be sent, i.e: answer
with status code 183 or 2xx, the default call setting will be used,
check CallSetting for its default values.
</summary>
            <param name="callOpParam">Optional call setting. callOpParam.statusCode Status code, (100-699).</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.MakeCall(System.String,Nequeo.Net.PjSip.CallOpParam)">
            <summary>
Make outgoing call to the specified URI.
</summary>
            <param name="uri">URI to be put in the To header (normally is the same as the target URI).</param>
            <param name="callOpParam">Optional call setting.</param>
            <summary>
Make outgoing call to the specified URI.
</summary>
            <param name="uri">URI to be put in the To header (normally is the same as the target URI).</param>
            <param name="callOpParam">Optional call setting.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.GetRemNatType">
            <summary>
Get the NAT type of remote's endpoint. This is a proprietary feature
of PJSUA - LIB which sends its NAT type in the SDP when natTypeInSdp
is set in UaConfig. This function can only be called after SDP has been received from remote,
which means for incoming call, this function can be called as soon as
call is received as long as incoming call contains SDP, and for outgoing
call, this function can be called only after SDP is received(normally in
200 OK response to INVITE).As a general case, application should call
this function after or in onCallMediaState() callback.
</summary>
            <returns>The NAT type.</returns>
            <summary>
Get the NAT type of remote's endpoint. This is a proprietary feature
of PJSUA - LIB which sends its NAT type in the SDP when natTypeInSdp
is set in UaConfig. This function can only be called after SDP has been received from remote,
which means for incoming call, this function can be called as soon as
call is received as long as incoming call contains SDP, and for outgoing
call, this function can be called only after SDP is received(normally in
200 OK response to INVITE).As a general case, application should call
this function after or in onCallMediaState() callback.
</summary>
            <returns>The NAT type.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.RemoteHasCap(Nequeo.Net.PjSip.HeaderType,System.String,System.String)">
            <summary>
Get media for the specified media index.
</summary>
            <param name="htype">The header type (pjsip_hdr_e) to be checked, which
value may be :
HeaderType::PJSIP_H_ACCEPT
HeaderType::PJSIP_H_ALLOW
HeaderType::PJSIP_H_SUPPORTED</param>
            <param name="hname">If htype specifies HeaderType::PJSIP_H_OTHER, then the header
name must be supplied in this argument.Otherwise
the value must be set to empty string("").</param>
            <param name="token">The capability token to check. For example, if 
htype is HeaderType::PJSIP_H_ALLOW, then token specifies the
method names; if htype is HeaderType::PJSIP_H_SUPPORTED, then
token specifies the extension names such as "100rel".</param>
            <returns>If the specified capability is explicitly supported.</returns>
            <summary>
Get media for the specified media index.
</summary>
            <param name="htype">The header type (pjsip_hdr_e) to be checked, which
value may be :
HeaderType::PJSIP_H_ACCEPT
HeaderType::PJSIP_H_ALLOW
HeaderType::PJSIP_H_SUPPORTED</param>
            <param name="hname">If htype specifies HeaderType::PJSIP_H_OTHER, then the header
name must be supplied in this argument.Otherwise
the value must be set to empty string("").</param>
            <param name="token">The capability token to check. For example, if 
htype is HeaderType::PJSIP_H_ALLOW, then token specifies the
method names; if htype is HeaderType::PJSIP_H_SUPPORTED, then
token specifies the extension names such as "100rel".</param>
            <returns>If the specified capability is explicitly supported.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.GetMedia(System.UInt32)">
            <summary>
Check if remote peer support the specified capability.
</summary>
            <param name="medIdx">The media index.</param>
            <returns>The media.</returns>
            <summary>
Get media for the specified media index.
</summary>
            <param name="medIdx">The media index.</param>
            <returns>The media.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.HasMedia">
            <summary>
Check if call has an active media session.
</summary>
            <returns>True if the call has media; else false.</returns>
            <summary>
Check if call has an active media session.
</summary>
            <returns>True if the call has media; else false.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.GetId">
            <summary>
Get PJSUA-LIB call ID or index associated with this call.
</summary>
            <returns>The current call id.</returns>
            <summary>
Get PJSUA-LIB call ID or index associated with this call.
</summary>
            <returns>The current call id.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.IsActive">
            <summary>
Check if this call has active INVITE session and the INVITE
session has not been disconnected.
</summary>
            <returns>True if the call is active; else false.</returns>
            <summary>
Check if this call has active INVITE session and the INVITE
session has not been disconnected.
</summary>
            <returns>True if the call is active; else false.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.GetInfo">
            <summary>
Get detail information about this call.
</summary>
            <returns>Call information.</returns>
            <summary>
Get detail information about this call.
</summary>
            <returns>Call information.</returns>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCreateMediaTransport">
            <summary>
This callback can be used by application to implement custom media
transport adapter for the call, or to replace the media transport
with something completely new altogether.
This callback is called when a new call is created.The library has
created a media transport for the call, and it is provided as the
\a mediaTp argument of this callback.The callback may change it
with the instance of media transport to be used by the call.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallMediaEvent">
            <summary>
Notification about media events such as video notifications. This
callback will most likely be called from media threads, thus
application must not perform heavy processing in this callback.
Especially, application must not destroy the call or media in this
callback.If application needs to perform more complex tasks to
handle the event, it should post the task to another thread.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallMediaTransportState">
            <summary>
This callback is called when media transport state is changed.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallRedirected">
            <summary>
This callback is called when the call is about to resend the
INVITE request to the specified target, following the previously
received redirection response.
Application may accept the redirection to the specified target,
reject this target only and make the session continue to try the next
target in the list if such target exists, stop the whole
redirection process altogether and cause the session to be
disconnected, or defer the decision to ask for user confirmation.
This callback is optional,
the default behavior is to NOT follow the redirection response.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnTypingIndication">
            <summary>
Notify application about typing indication.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnInstantMessageStatus">
            <summary>
Notify application about the delivery status of outgoing MESSAGE request.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnInstantMessage">
            <summary>
Notify application on incoming MESSAGE request.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallRxOffer">
            <summary>
Notify application when call has received new offer from remote
(i.e.re - INVITE / UPDATE with SDP is received).Application can
decide to accept / reject the offer by setting the code(default
is 200).If the offer is accepted, application can update the
call setting to be applied in the answer.When this callback is
not implemented, the default behavior is to accept the offer using
current call setting.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallReplaced">
            <summary>
Notify application that an existing call has been replaced with
a new call.This happens when PJSUA - API receives incoming INVITE
request with Replaces header.
After this callback is called, normally PJSUA - API will disconnect
this call and establish a new call \a newCallId.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallReplaceRequest">
            <summary>
Notify application about incoming INVITE with Replaces header.
Application may reject the request by setting non - 2xx code.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallTransferStatus">
            <summary>
Notify application of the status of previously sent call
transfer request.Application can monitor the status of the
call transfer request, for example to decide whether to
terminate existing call.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallTransferRequest">
            <summary>
Notify application on call being transferred (i.e. REFER is received).
Application can decide to accept / reject transfer request
by setting the code(default is 202).When this callback
is not implemented, the default behavior is to accept the
transfer.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnDtmfDigit">
            <summary>
Notify application upon incoming DTMF digits.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnStreamDestroyed">
            <summary>
Notify application when media session has been unregistered from the
conference bridge and about to be destroyed.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnStreamCreated">
            <summary>
Notify application when media session is created and before it is
registered to the conference bridge.Application may return different
media port if it has added media processing port to the stream.This
media port then will be added to the conference bridge instead.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallSdpCreated">
            <summary>
Notify application when a call has just created a local SDP (for
initial or subsequent SDP offer / answer).Application can implement
this callback to modify the SDP, before it is being sent and / or
negotiated with remote SDP, for example to apply per account / call
basis codecs priority or to add custom / proprietary SDP attributes.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallTsxState">
            <summary>
This is a general notification callback which is called whenever
a transaction within the call has changed state.Application can
implement this callback for example to monitor the state of
outgoing requests, or to answer unhandled incoming requests
(such as INFO) with a final response.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallMediaState">
            <summary>
Notify application when media state in the call has changed.
Normal application would need to implement this callback, e.g.
to connect the call's media to sound device. When ICE is used,
this callback will also be called to report ICE negotiation failure.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Call.OnCallState">
            <summary>
Notify application when call state has changed.
Application may then query the call info to get the
detail call states by calling getInfo() function.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.Finalize">
            <summary>
Sip call.
</summary>
            <summary>
Sip call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.Dispose">
            <summary>
Sip call.
</summary>
            <summary>
Sip call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Call.#ctor(Nequeo.Net.PjSip.Account,System.Int32)">
            <summary>
Sip call.
</summary>
            <param name="account">The Sip account.</param>
            <param name="callId">An index call id (0 - 3).</param>
            <summary>
Sip call.
</summary>
            <param name="account">The Sip account.</param>
            <param name="callId">An index call id (0 - 3).</param>
        </member>
        <member name="T:Nequeo.Net.PjSip.Call">
            <summary>
Sip call.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaEvent.Type">
            <summary>
Gets or sets the event type.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaEvent.Data">
            <summary>
Gets or sets the Additional data/parameters about the event. The type of data
will be specific to the event type being reported.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaEvent.#ctor">
            <summary>
This structure describes a media event.
</summary>
            <summary>
This structure describes a media event.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaEvent">
            <summary>
This structure describes a media event.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaEventData.FormatChanged">
            <summary>
Gets or sets the media format changed event data.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaEventData.#ctor">
            <summary>
Media event data.
</summary>
            <summary>
Media event data.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaEventData">
            <summary>
Media event data.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFmtChangedEvent.Height">
            <summary>
Gets or sets the new height.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFmtChangedEvent.Width">
            <summary>
Gets or sets the new width.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFmtChangedEvent.#ctor">
            <summary>
This structure describes a media format changed event.
</summary>
            <summary>
This structure describes a media format changed event.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaFmtChangedEvent">
            <summary>
This structure describes a media format changed event.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaTransportInfo.RemoteRtcpName">
            <summary>
Gets or sets the remote address where RTCP originated from.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaTransportInfo.RemoteRtpName">
            <summary>
Gets or sets the remote address where RTP originated from.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaTransportInfo.Dispose">
            <summary>
This structure describes media transport informations.
</summary>
            <summary>
This structure describes media transport informations.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaTransportInfo.#ctor">
            <summary>
This structure describes media transport informations.
</summary>
            <summary>
This structure describes media transport informations.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaTransportInfo">
            <summary>
This structure describes media transport informations.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.Empty">
            <summary>
Gets or sets the Number of empty on GET events.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.Discard">
            <summary>
Gets or sets the Number of discarded frames.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.Lost">
            <summary>
Gets or sets the Number of lost frames.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.AvgBurst">
            <summary>
Gets or sets the Average burst, in frames.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.DevDelayMsec">
            <summary>
Gets or sets the Standard deviation of delay, in ms.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.MaxDelayMsec">
            <summary>
Gets or sets the Maximum delay, in ms.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.MinDelayMsec">
            <summary>
Gets or sets the Minimum delay, in ms.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.AvgDelayMsec">
            <summary>
Gets or sets the Average delay, in ms.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.Size">
            <summary>
Gets or sets the Current buffer size, in frames.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.Prefetch">
            <summary>
Gets or sets the Current prefetch value, in frames.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.Burst">
            <summary>
Gets or sets the Current burst level, in frames.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.MaxPrefetch">
            <summary>
Gets or sets the Maximum allowed prefetch, in frms. 
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.MinPrefetch">
            <summary>
Gets or sets the Minimum allowed prefetch, in frms. 
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.FrameSize">
            <summary>
Gets or sets the Individual frame size, in bytes. 
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.RtpTxLastSeq">
            <summary>
Gets or sets the last TX RTP sequence. 
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.RtpTxLastTs">
            <summary>
Gets or sets the last TX RTP timestamp.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamStat.Start">
            <summary>
Gets or sets the time when session was created.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.Dispose">
            <summary>
Media stream statistic.
</summary>
            <summary>
Media stream statistic.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamStat.#ctor">
            <summary>
Media stream statistic.
</summary>
            <summary>
Media stream statistic.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaStreamStat">
            <summary>
Media stream statistic.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamInfo.CodecClockRate">
            <summary>
Gets or sets the codec clock rate.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamInfo.CodecName">
            <summary>
Gets or sets the codec name.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamInfo.RxPayloadType">
            <summary>
Gets or sets the incoming codec payload type.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamInfo.TxPayloadType">
            <summary>
Gets or sets the outgoing codec payload type.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamInfo.RemoteRtcpAddress">
            <summary>
Gets or sets the optional remote RTCP address.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamInfo.RemoteRtpAddress">
            <summary>
Gets or sets the remote RTP address.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamInfo.Direction">
            <summary>
Gets or sets the media direction.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamInfo.TransportProtocol">
            <summary>
Gets or sets the transport protocol (RTP/AVP, etc.)
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaStreamInfo.Type">
            <summary>
Gets or sets the media type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.Dispose">
            <summary>
Media stream info.
</summary>
            <summary>
Media stream info.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaStreamInfo.#ctor">
            <summary>
Media stream info.
</summary>
            <summary>
Media stream info.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaStreamInfo">
            <summary>
Media stream info.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallSetVideoStreamParam.CaptureDevice">
            <summary>
Gets or sets the specify the video capture device ID. This can be set to
PJMEDIA_VID_DEFAULT_CAPTURE_DEV to specify the default capture
device as configured in the account.
This field is valid for the following video stream operations :
PJSUA_CALL_VID_STRM_ADD and PJSUA_CALL_VID_STRM_CHANGE_CAP_DEV.
Default : PJMEDIA_VID_DEFAULT_CAPTURE_DEV.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallSetVideoStreamParam.Direction">
            <summary>
Gets or sets the Specify the media stream direction.
This field is valid for the following video stream operations :
PJSUA_CALL_VID_STRM_ADD and PJSUA_CALL_VID_STRM_CHANGE_DIR.
Default : PJMEDIA_DIR_ENCODING_DECODING
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallSetVideoStreamParam.MediaIndex">
            <summary>
Gets or sets the specify the media stream index. This can be set to -1 to denote
the default video stream in the call, which is the first active
video stream or any first video stream if none is active.
This field is valid for all video stream operations, except
PJSUA_CALL_VID_STRM_ADD.

Default: -1 (first active video stream, or any first video stream
            if none is active)
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetVideoStreamParam.Dispose">
            <summary>
This structure contains parameters for Call::vidSetStream()
</summary>
            <summary>
This structure contains parameters for Call::vidSetStream()
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetVideoStreamParam.#ctor">
            <summary>
This structure contains parameters for Call::vidSetStream()
</summary>
            <summary>
This structure contains parameters for Call::vidSetStream()
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallSetVideoStreamParam">
            <summary>
This structure contains parameters for Call::vidSetStream()
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallSendRequestParam.TxOption">
            <summary>
Gets or sets the list of headers etc to be included in outgoing request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallSendRequestParam.Method">
            <summary>
Gets or sets the SIP method of the request.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSendRequestParam.Dispose">
            <summary>
This structure contains parameters for Call::sendRequest()
</summary>
            <summary>
This structure contains parameters for Call::sendRequest()
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSendRequestParam.#ctor">
            <summary>
This structure contains parameters for Call::sendRequest()
</summary>
            <summary>
This structure contains parameters for Call::sendRequest()
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallSendRequestParam">
            <summary>
This structure contains parameters for Call::sendRequest()
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.RemVideoCount">
            <summary>
Gets or sets the number of video streams offered by remote.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.RemAudioCount">
            <summary>
Gets or sets the number of audio streams offered by remote.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.RemOfferer">
            <summary>
Gets or sets the flag if remote was SDP offerer.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.TotalDuration">
            <summary>
Gets or sets the total call duration, including set-up time.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.ConnectDuration">
            <summary>
Gets or sets the Up-to-date call connected duration (zero when call is not established).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.ProvMedia">
            <summary>
Gets or sets the Array of provisional media information. This contains the media info
in the provisioning state, that is when the media session is being
created / updated(SDP offer / answer is on progress).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.Media">
            <summary>
Gets or sets the array of active media information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.LastReason">
            <summary>
Gets or sets the reason phrase describing the last status.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.LastStatusCode">
            <summary>
Gets or sets the last status code heard, which can be used as cause code.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.StateText">
            <summary>
Gets or sets the text describing the state.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.State">
            <summary>
Gets or sets the call state.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.Setting">
            <summary>
Gets or sets the call setting.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.CallIdString">
            <summary>
Gets or sets the dialog Call-ID string.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.RemoteContact">
            <summary>
Gets or sets the remote contact.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.RemoteUri">
            <summary>
Gets or sets the remote uri.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.LocalContact">
            <summary>
Gets or sets the local contact.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.LocalUri">
            <summary>
Gets or sets the local uri.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.Role">
            <summary>
Gets or sets the call role (UAC == caller).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.AccountId">
            <summary>
Gets or sets the account id.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallInfo.Id">
            <summary>
Gets or sets the call id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.Dispose">
            <summary>
Call information. Application can query the call information by calling Call::getInfo().
</summary>
            <summary>
Call information. Application can query the call information by calling Call::getInfo().
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallInfo.#ctor">
            <summary>
Call information. Application can query the call information by calling Call::getInfo().
</summary>
            <summary>
Call information. Application can query the call information by calling Call::getInfo().
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallInfo">
            <summary>
Call information. Application can query the call information by calling Call::getInfo().
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.TimeVal.Milliseconds">
            <summary>
Gets or sets the milliseconds fraction of the time.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.TimeVal.Seconds">
            <summary>
Gets or sets the seconds part of the time.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TimeVal.Dispose">
            <summary>
Representation of time value.
</summary>
            <summary>
Representation of time value.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TimeVal.#ctor">
            <summary>
Representation of time value.
</summary>
            <summary>
Representation of time value.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.TimeVal">
            <summary>
Representation of time value.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallMediaInfo.VideoWindowEx">
            <summary>
The video window instance for incoming video. Only valid if
videoIncomingWindowId is not PJSUA_INVALID_ID and
the media type is video.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallMediaInfo.VideoCapDev">
            <summary>
Gets or sets the video capture device for outgoing transmission, if any,
or PJMEDIA_VID_INVALID_DEV.Only valid if the media type is video.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallMediaInfo.VideoIncomingWindowId">
            <summary>
Gets or sets the window id for incoming video, if any, or
PJSUA_INVALID_ID. Only valid if the media type is video.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallMediaInfo.AudioConfSlot">
            <summary>
Gets or sets the conference port number for the call. Only valid if the media type is audio.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallMediaInfo.Status">
            <summary>
Gets or sets the call media status.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallMediaInfo.Direction">
            <summary>
Gets or sets the media direction.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallMediaInfo.Type">
            <summary>
Gets or sets the media type.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallMediaInfo.Index">
            <summary>
Gets or sets the media index in SDP.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.Dispose">
            <summary>
Call media information.
</summary>
            <summary>
Call media information deconstructor.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMediaInfo.#ctor">
            <summary>
Call media information.
</summary>
            <summary>
Call media information.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallMediaInfo">
            <summary>
Call media information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.GeVideoDeviceHandleType(&lt;unknown type&gt;)">
            <summary>
Get the VideoDeviceHandleType.
</summary>
            <param name="videoDeviceHandleType">The VideoDeviceHandleType.</param>
            <returns>The VideoDeviceHandleType.</returns>
            <summary>
Get the VideoDeviceHandleType.
</summary>
            <param name="videoDeviceHandleType">The VideoDeviceHandleType.</param>
            <returns>The VideoDeviceHandleType.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.GeVideoDeviceHandleTypeEx(pjmedia_vid_dev_hwnd_type)">
            <summary>
Get the VideoDeviceHandleType.
</summary>
            <param name="videoDeviceHandleType">The VideoDeviceHandleType.</param>
            <returns>The VideoDeviceHandleType.</returns>
            <summary>
Get the VideoDeviceHandleType.
</summary>
            <param name="videoDeviceHandleType">The VideoDeviceHandleType.</param>
            <returns>The VideoDeviceHandleType.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.SetVideoWindowID(System.Int32)">
            <summary>
Set the video window id.
</summary>
            <param name="videoWindowID">The video window id.</param>
            <summary>
Set the video window id.
</summary>
            <param name="videoWindowID">The video window id.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.SetCallMediaInfoRef(pj.CallMediaInfo*)">
            <summary>
Set call media info.
</summary>
            <param name="pjCallMediaInfo">Thecall media info.</param>
            <summary>
Set call media info.
</summary>
            <param name="pjCallMediaInfo">Thecall media info.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.SetVideoPreviewRef(pj.VideoPreview*)">
            <summary>
Set video preview.
</summary>
            <param name="pjVideoPreview">The video preview.</param>
            <summary>
Set video preview.
</summary>
            <param name="pjVideoPreview">The video preview.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.#ctor(pj.VideoWindow*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Video window.
</summary>
            <param name="pjVideoWindow">The video window.</param>
            <summary>
Video window.
</summary>
            <param name="pjVideoWindow">The video window.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.GetVideoWindowID">
            <summary>
Get the video window id.
</summary>
            <returns>The video window id.</returns>
            <summary>
Get the video window id.
</summary>
            <returns>The video window id.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.SetWindow(Nequeo.Net.PjSip.VideoWindowHandle)">
            <summary>
Set output window. This operation is valid only when the underlying
video device supports PJMEDIA_VIDEO_DEV_CAP_OUTPUT_WINDOW capability AND
allows the output window to be changed on - the - fly, otherwise Error will
be thrown. Currently it is only supported on Android.
</summary>
            <param name="window">The new output window.</param>
            <summary>
Set output window. This operation is valid only when the underlying
video device supports PJMEDIA_VIDEO_DEV_CAP_OUTPUT_WINDOW capability AND
allows the output window to be changed on - the - fly, otherwise Error will
be thrown.Currently it is only supported on Android.
</summary>
            <param name="window">The new output window.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.Rotate(System.Int32)">
            <summary>
Rotate the video window. This function will change the video orientation
and also possibly the video window size(width and height get swapped).
This operation is not valid for native windows(VideoWindowInfo. 
isNative = true), on which native windowing API must be used instead.
</summary>
            <param name="angle">The rotation angle in degrees, must be multiple of 90.
Specify positive value for clockwise rotation or
negative value for counter - clockwise rotation.</param>
            <summary>
Rotate the video window. This function will change the video orientation
and also possibly the video window size(width and height get swapped).
This operation is not valid for native windows(VideoWindowInfo. 
isNative = true), on which native windowing API must be used instead.
</summary>
            <param name="angle">The rotation angle in degrees, must be multiple of 90.
Specify positive value for clockwise rotation or
negative value for counter - clockwise rotation.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.SetSize(Nequeo.Net.PjSip.MediaSize)">
            <summary>
Resize window. This operation is not valid for native windows
(VideoWindowInfo.isNative = true), on which native windowing API
must be used instead.
</summary>
            <param name="size">The new window size.</param>
            <summary>
Resize window. This operation is not valid for native windows
(VideoWindowInfo.isNative = true), on which native windowing API
must be used instead.
</summary>
            <param name="size">The new window size.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.SetPosition(Nequeo.Net.PjSip.MediaCoordinate)">
            <summary>
Set video window position. This operation is not valid for native windows
(VideoWindowInfo.isNative = true), on which native windowing API
must be used instead.
</summary>
            <param name="position">The window position.</param>
            <summary>
Set video window position. This operation is not valid for native windows
(VideoWindowInfo.isNative = true), on which native windowing API
must be used instead.
</summary>
            <param name="position">The window position.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.Show(System.Boolean)">
            <summary>
Show or hide window. This operation is not valid for native windows
(VideoWindowInfo.isNative = true), on which native windowing API
must be used instead.
</summary>
            <param name="show">Set to true to show the window, false to hide the window.</param>
            <summary>
Show or hide window. This operation is not valid for native windows
(VideoWindowInfo.isNative = true), on which native windowing API
must be used instead.
</summary>
            <param name="show">Set to true to show the window, false to hide the window.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.GetInfo">
            <summary>
Get window info.
</summary>
            <returns>The video window info.</returns>
            <summary>
Get window info.
</summary>
            <returns>The video window info.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindow.Dispose">
            <summary>
Video window. deconstructor.
</summary>
            <summary>
Video window deconstructor.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.VideoWindow">
            <summary>
Video window.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoWindowInfo.WindowSize">
            <summary>
Gets or sets the window size.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoWindowInfo.WindowPosition">
            <summary>
Gets or sets the window position.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoWindowInfo.Show">
            <summary>
Gets or sets the window show status. The window is hidden if false.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoWindowInfo.RenderDeviceId">
            <summary>
Gets or sets the renderer device ID.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoWindowInfo.WindowHandle">
            <summary>
Gets or sets the video window handle.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoWindowInfo.IsNative">
            <summary>
Gets or sets the flag to indicate whether this window is a native window,
such as created by built - in preview device.If this field is
true, only the video window handle field of this
structure is valid.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.Dispose">
            <summary>
This structure describes video window info.
</summary>
            <summary>
This structure describes video window info.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowInfo.#ctor">
            <summary>
This structure describes video window info.
</summary>
            <summary>
This structure describes video window info.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.VideoWindowInfo">
            <summary>
This structure describes video window info.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaSize.Height">
            <summary>
Gets or sets the height.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaSize.Width">
            <summary>
Gets or sets the width.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaSize.Dispose">
            <summary>
Representation of media size.
</summary>
            <summary>
Representation of media size.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaSize.#ctor">
            <summary>
Representation of media size.
</summary>
            <summary>
Representation of media size.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaSize">
            <summary>
Representation of media size.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaCoordinate.Y">
            <summary>
Gets or sets the Y position of the coordinate.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaCoordinate.X">
            <summary>
Gets or sets the X position of the coordinate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaCoordinate.Dispose">
            <summary>
Representation of media coordinate.
</summary>
            <summary>
Representation of media coordinate.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaCoordinate.#ctor">
            <summary>
Representation of media coordinate.
</summary>
            <summary>
Representation of media coordinate.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaCoordinate">
            <summary>
Representation of media coordinate.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoWindowHandle.Type">
            <summary>
Gets or sets the window handle type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowHandle.Dispose">
            <summary>
Video window handle.
</summary>
            <summary>
Video window handle.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoWindowHandle.#ctor">
            <summary>
Video window handle.
</summary>
            <summary>
Video window handle.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.VideoWindowHandle">
            <summary>
Video window handle.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.VideoDeviceHandleType">
            <summary>
Enumeration of window handle type.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_VID_DEV_HWND_TYPE_ANDROID">
            <summary>
Native window handle on Android.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_VID_DEV_HWND_TYPE_IOS">
            <summary>
Native view on iOS.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_VID_DEV_HWND_TYPE_WINDOWS">
            <summary>
Native window handle on Windows.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_VID_DEV_HWND_TYPE_NONE">
            <summary>
Type none.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallOpParam.UseDefaultCallSetting">
            <summary>
Gets the use default values.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallOpParam.TxOption">
            <summary>
Gets or sets the list of headers etc to be added to outgoing response message.
Note that this message data will be persistent in all next
answers / responses for this INVITE request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallOpParam.Code">
            <summary>
Gets or sets the status code.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallOpParam.Reason">
            <summary>
Gets or sets the reason phrase.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallOpParam.Options">
            <summary>
Gets or sets the options.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallOpParam.Setting">
            <summary>
Gets or sets the call settings.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.Dispose">
            <summary>
Call options.
</summary>
            <summary>
Call options.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.#ctor(System.Boolean)">
            <summary>
Call options.
</summary>
            <param name="useDefaultCallSetting">Use default call settings. Setting useDefaultCallSetting to true will initialize opt with default
call setting values.</param>
            <summary>
Call options.
</summary>
            <param name="useDefaultCallSetting">Use default call settings. Setting useDefaultCallSetting to true will initialize opt with default
call setting values.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallOpParam.#ctor">
            <summary>
Call options.
</summary>
            <summary>
Call options.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallOpParam">
            <summary>
Call options.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallSetting.UseDefaultValues">
            <summary>
Gets the use default values.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallSetting.VideoCount">
            <summary>
Gets or sets the number of simultaneous active video streams for this call. Setting
this to zero will disable video in this call.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallSetting.AudioCount">
            <summary>
Gets or sets the number of simultaneous active audio streams for this call. Setting
this to zero will disable audio in this call.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallSetting.ReqKeyframeMethod">
            <summary>
Gets or sets this flag controls what methods to request keyframe are allowed on
the call. Value is bitmask of VidReqKeyframeMethod.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CallSetting.Flag">
            <summary>
Gets or sets the bitmask of CallFlag constants.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.Dispose">
            <summary>
Call settings.
</summary>
            <summary>
Call settings.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.#ctor(System.Boolean)">
            <summary>
Call settings.
</summary>
            <param name="useDefaultValues">Use default values.</param>
            <summary>
Call settings.
</summary>
            <param name="useDefaultValues">Use default values.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallSetting.#ctor">
            <summary>
Call settings.
</summary>
            <summary>
Call settings.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallSetting">
            <summary>
Call settings.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.HeaderType">
            <summary>
Header types, as defined by RFC3261.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCreateMediaTransport_Function(=FUNC:System.Void(pj.OnCreateMediaTransportParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the CreateMediaTransport function callback.
</summary>
            <param name="onCreateMediaTransportCallBack">The CreateMediaTransport function callback.</param>
            <summary>
Set the CreateMediaTransport function callback.
</summary>
            <param name="onCreateMediaTransportCallBack">The CreateMediaTransport function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallMediaEvent_Function(=FUNC:System.Void(pj.OnCallMediaEventParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the CallMediaEvent function callback.
</summary>
            <param name="onCallMediaEventCallBack">The CallMediaEvent function callback.</param>
            <summary>
Set the CallMediaEvent function callback.
</summary>
            <param name="onCallMediaEventCallBack">The CallMediaEvent function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallMediaTransportState_Function(=FUNC:System.Void(pj.OnCallMediaTransportStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the CallMediaTransportState function callback.
</summary>
            <param name="onCallMediaTransportStateCallBack">The CallMediaTransportState function callback.</param>
            <summary>
Set the CallMediaTransportState function callback.
</summary>
            <param name="onCallMediaTransportStateCallBack">The CallMediaTransportState function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallRedirected_Function(=FUNC:pjsip_redirect_op(pj.OnCallRedirectedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the CallRedirected function callback.
</summary>
            <param name="onCallRedirectedCallBack">The CallRedirected function callback.</param>
            <summary>
Set the CallRedirected function callback.
</summary>
            <param name="onCallRedirectedCallBack">The CallRedirected function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnTypingIndication_Function(=FUNC:System.Void(pj.OnTypingIndicationParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the TypingIndication function callback.
</summary>
            <param name="onTypingIndicationCallBack">The TypingIndication function callback.</param>
            <summary>
Set the TypingIndication function callback.
</summary>
            <param name="onTypingIndicationCallBack">The TypingIndication function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnInstantMessageStatus_Function(=FUNC:System.Void(pj.OnInstantMessageStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the InstantMessageStatus function callback.
</summary>
            <param name="onInstantMessageStatusCallBack">The InstantMessageStatus function callback.</param>
            <summary>
Set the InstantMessageStatus function callback.
</summary>
            <param name="onInstantMessageStatusCallBack">The InstantMessageStatus function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnInstantMessage_Function(=FUNC:System.Void(pj.OnInstantMessageParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the InstantMessage function callback.
</summary>
            <param name="onInstantMessageCallBack">The InstantMessage function callback.</param>
            <summary>
Set the InstantMessage function callback.
</summary>
            <param name="onInstantMessageCallBack">The InstantMessage function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallRxOffer_Function(=FUNC:System.Void(pj.OnCallRxOfferParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the CallRxOffer function callback.
</summary>
            <param name="onCallRxOfferCallBack">The CallRxOffer function callback.</param>
            <summary>
Set the CallRxOffer function callback.
</summary>
            <param name="onCallRxOfferCallBack">The CallRxOffer function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallReplaced_Function(=FUNC:System.Void(pj.OnCallReplacedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the CallReplaced function callback.
</summary>
            <param name="onCallReplacedCallBack">The CallReplaced function callback.</param>
            <summary>
Set the CallReplaced function callback.
</summary>
            <param name="onCallReplacedCallBack">The CallReplaced function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallReplaceRequest_Function(=FUNC:System.Void(pj.OnCallReplaceRequestParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the CallReplaceRequest function callback.
</summary>
            <param name="onCallReplaceRequestCallBack">The CallReplaceRequest function callback.</param>
            <summary>
Set the CallReplaceRequest function callback.
</summary>
            <param name="onCallReplaceRequestCallBack">The CallReplaceRequest function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallTransferStatus_Function(=FUNC:System.Void(pj.OnCallTransferStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the CallTransferStatus function callback.
</summary>
            <param name="onCallTransferStatusCallBack">The CallTransferStatus function callback.</param>
            <summary>
Set the CallTransferStatus function callback.
</summary>
            <param name="onCallTransferStatusCallBack">The CallTransferStatus function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallTransferRequest_Function(=FUNC:System.Void(pj.OnCallTransferRequestParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the CallTransferRequest function callback.
</summary>
            <param name="onCallTransferRequestCallBack">The CallTransferRequest function callback.</param>
            <summary>
Set the CallTransferRequest function callback.
</summary>
            <param name="onCallTransferRequestCallBack">The CallTransferRequest function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnDtmfDigit_Function(=FUNC:System.Void(pj.OnDtmfDigitParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the DtmfDigit function callback.
</summary>
            <param name="onDtmfDigitCallBack">The DtmfDigit function callback.</param>
            <summary>
Set the DtmfDigit function callback.
</summary>
            <param name="onDtmfDigitCallBack">The DtmfDigit function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnStreamDestroyed_Function(=FUNC:System.Void(pj.OnStreamDestroyedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the StreamDestroyed function callback.
</summary>
            <param name="onStreamDestroyedCallBack">The StreamDestroyed function callback.</param>
            <summary>
Set the StreamDestroyed function callback.
</summary>
            <param name="onStreamDestroyedCallBack">The StreamDestroyed function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnStreamCreated_Function(=FUNC:System.Void(pj.OnStreamCreatedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the StreamCreated function callback.
</summary>
            <param name="onStreamCreatedCallBack">The StreamCreated function callback.</param>
            <summary>
Set the StreamCreated function callback.
</summary>
            <param name="onStreamCreatedCallBack">The StreamCreated function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallSdpCreated_Function(=FUNC:System.Void(pj.OnCallSdpCreatedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the CallSdpCreated function callback.
</summary>
            <param name="onCallSdpCreatedCallBack">The CallSdpCreated function callback.</param>
            <summary>
Set the CallSdpCreated function callback.
</summary>
            <param name="onCallSdpCreatedCallBack">The CallSdpCreated function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallTsxState_Function(=FUNC:System.Void(pj.OnCallTsxStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on call tsx state function callback.
</summary>
            <param name="onCallTsxStateCallBack">The on call tsx state function callback.</param>
            <summary>
Set the on call tsx state function callback.
</summary>
            <param name="onCallTsxStateCallBack">The on call tsx state function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallMediaState_Function(=FUNC:System.Void(pj.OnCallMediaStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on call media state function callback.
</summary>
            <param name="onCallMediaStateCallBack">The on call media state function callback.</param>
            <summary>
Set the on call media state function callback.
</summary>
            <param name="onCallMediaStateCallBack">The on call media state function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Set_OnCallState_Function(=FUNC:System.Void(pj.OnCallStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on call state function callback.
</summary>
            <param name="onCallStateCallBack">The on call state function callback.</param>
            <summary>
Set the on call state function callback.
</summary>
            <param name="onCallStateCallBack">The on call state function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCreateMediaTransport(pj.OnCreateMediaTransportParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This callback can be used by application to implement custom media
transport adapter for the call, or to replace the media transport
with something completely new altogether.

This callback is called when a new call is created.The library has
created a media transport for the call, and it is provided as the
mediaTp argument of this callback.The callback may change it
with the instance of media transport to be used by the call.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
This callback can be used by application to implement custom media
transport adapter for the call, or to replace the media transport
with something completely new altogether.

This callback is called when a new call is created.The library has
created a media transport for the call, and it is provided as the
mediaTp argument of this callback.The callback may change it
with the instance of media transport to be used by the call.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallMediaEvent(pj.OnCallMediaEventParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notification about media events such as video notifications. This
callback will most likely be called from media threads, thus
application must not perform heavy processing in this callback.
Especially, application must not destroy the call or media in this
callback.If application needs to perform more complex tasks to
handle the event, it should post the task to another thread.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notification about media events such as video notifications. This
callback will most likely be called from media threads, thus
application must not perform heavy processing in this callback.
Especially, application must not destroy the call or media in this
callback.If application needs to perform more complex tasks to
handle the event, it should post the task to another thread.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallMediaTransportState(pj.OnCallMediaTransportStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This callback is called when media transport state is changed.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
This callback is called when media transport state is changed.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallRedirected(pj.OnCallRedirectedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This callback is called when the call is about to resend the
INVITE request to the specified target, following the previously
received redirection response.

Application may accept the redirection to the specified target,
reject this target only and make the session continue to try the next
target in the list if such target exists, stop the whole
redirection process altogether and cause the session to be
disconnected, or defer the decision to ask for user confirmation.

This callback is optional, the default behavior is to NOT follow the redirection response.
</summary>
            <param name="prm">Callback parameter.</param>
            <returns>Redirection options.</returns>
            <summary>
This callback is called when the call is about to resend the
INVITE request to the specified target, following the previously
received redirection response.

Application may accept the redirection to the specified target,
reject this target only and make the session continue to try the next
target in the list if such target exists, stop the whole
redirection process altogether and cause the session to be
disconnected, or defer the decision to ask for user confirmation.

This callback is optional, the default behavior is to NOT follow the redirection response.
</summary>
            <param name="prm">Callback parameter.</param>
            <returns>Redirection options.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onTypingIndication(pj.OnTypingIndicationParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application about typing indication.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application about typing indication.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onInstantMessageStatus(pj.OnInstantMessageStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application about the delivery status of outgoing MESSAGE request.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application about the delivery status of outgoing MESSAGE request.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onInstantMessage(pj.OnInstantMessageParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application on incoming MESSAGE request.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application on incoming MESSAGE request.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallRxOffer(pj.OnCallRxOfferParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application when call has received new offer from remote
(i.e.re - INVITE / UPDATE with SDP is received).Application can
decide to accept / reject the offer by setting the code(default
is 200).If the offer is accepted, application can update the
call setting to be applied in the answer.When this callback is
not implemented, the default behavior is to accept the offer using
current call setting.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application when call has received new offer from remote
(i.e.re - INVITE / UPDATE with SDP is received).Application can
decide to accept / reject the offer by setting the code(default
is 200).If the offer is accepted, application can update the
call setting to be applied in the answer.When this callback is
not implemented, the default behavior is to accept the offer using
current call setting.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallReplaced(pj.OnCallReplacedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application that an existing call has been replaced with
a new call.This happens when PJSUA - API receives incoming INVITE
request with Replaces header.
After this callback is called, normally PJSUA - API will disconnect
this call and establish a new call newCallId.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application that an existing call has been replaced with
a new call.This happens when PJSUA - API receives incoming INVITE
request with Replaces header.
After this callback is called, normally PJSUA - API will disconnect
this call and establish a new call newCallId.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallReplaceRequest(pj.OnCallReplaceRequestParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application about incoming INVITE with Replaces header.
Application may reject the request by setting non - 2xx code.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application about incoming INVITE with Replaces header.
Application may reject the request by setting non - 2xx code.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallTransferStatus(pj.OnCallTransferStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application of the status of previously sent call
transfer request.Application can monitor the status of the
call transfer request, for example to decide whether to
terminate existing call.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application of the status of previously sent call
transfer request.Application can monitor the status of the
call transfer request, for example to decide whether to
terminate existing call.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallTransferRequest(pj.OnCallTransferRequestParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application on call being transferred (i.e. REFER is received).
Application can decide to accept / reject transfer request
by setting the code(default is 202).When this callback
is not implemented, the default behavior is to accept the
transfer.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application on call being transferred (i.e. REFER is received).
Application can decide to accept / reject transfer request
by setting the code(default is 202).When this callback
is not implemented, the default behavior is to accept the
transfer.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onDtmfDigit(pj.OnDtmfDigitParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application upon incoming DTMF digits.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application upon incoming DTMF digits.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onStreamDestroyed(pj.OnStreamDestroyedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application when media session has been unregistered from the
conference bridge and about to be destroyed.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application when media session has been unregistered from the
conference bridge and about to be destroyed.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onStreamCreated(pj.OnStreamCreatedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application when media session is created and before it is
registered to the conference bridge.Application may return different
media port if it has added media processing port to the stream.This
media port then will be added to the conference bridge instead.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application when media session is created and before it is
registered to the conference bridge.Application may return different
media port if it has added media processing port to the stream.This
media port then will be added to the conference bridge instead.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallSdpCreated(pj.OnCallSdpCreatedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application when a call has just created a local SDP (for
initial or subsequent SDP offer / answer).Application can implement
this callback to modify the SDP, before it is being sent and / or
negotiated with remote SDP, for example to apply per account / call
basis codecs priority or to add custom / proprietary SDP attributes.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application when a call has just created a local SDP (for
initial or subsequent SDP offer / answer).Application can implement
this callback to modify the SDP, before it is being sent and / or
negotiated with remote SDP, for example to apply per account / call
basis codecs priority or to add custom / proprietary SDP attributes.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallTsxState(pj.OnCallTsxStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
This is a general notification callback which is called whenever
a transaction within the call has changed state.Application can
implement this callback for example to monitor the state of
outgoing requests, or to answer unhandled incoming requests
(such as INFO) with a final response.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
This is a general notification callback which is called whenever
a transaction within the call has changed state.Application can
implement this callback for example to monitor the state of
outgoing requests, or to answer unhandled incoming requests
(such as INFO) with a final response.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallMediaState(pj.OnCallMediaStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application when media state in the call has changed.
Normal application would need to implement this callback, e.g.
to connect the call's media to sound device. When ICE is used,
this callback will also be called to report ICE negotiation failure.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application when media state in the call has changed.
Normal application would need to implement this callback, e.g.
to connect the call's media to sound device. When ICE is used,
this callback will also be called to report ICE negotiation failure.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.onCallState(pj.OnCallStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application when call state has changed.
Application may then query the call info to get the
detail call states by calling getInfo() function.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application when call state has changed.
Application may then query the call info to get the
detail call states by calling getInfo() function.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.Dispose">
            <summary>
Call callbacks.
</summary>
            <summary>
Contact callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallCallback.#ctor(Nequeo.Net.PjSip.AccountCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Int32)">
            <summary>
Call callbacks.
</summary>
            <param name="account">The Sip account.</param>
            <param name="callId">An index call id (0 - 3).</param>
            <summary>
Call callbacks.
</summary>
            <param name="account">The Sip account.</param>
            <param name="callId">An index call id (0 - 3).</param>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallCallback">
            <summary>
Call callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.SetConnectionMappings(Nequeo.Net.PjSip.AccountConnection,Nequeo.Net.PjSip.ConnectionMapper*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Set account connection mapping.
</summary>
            <param name="accountConnection">Account connection configuration.</param>
            <param name="connectionMapper">Account connection mapping configuration.</param>
            <summary>
Set account connection mapping.
</summary>
            <param name="accountConnection">Account connection configuration.</param>
            <param name="connectionMapper">Account connection mapping configuration.</param>
        </member>
        <member name="P:Nequeo.Net.PjSip.Account.Contacts">
            <summary>
Gets the contacts.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.GetAccountCallback">
            <summary>
Get the account callback reference.
</summary>
            <summary>
Get the account callback reference.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.FindContact(System.String)">
            <summary>
Find the contact.
</summary>
            <param name="uri">The contact unique uri.</param>
            <returns>The contact.</returns>
            <summary>
Find the contact.
</summary>
            <param name="uri">The contact unique uri.</param>
            <returns>The contact.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.RemoveContact(Nequeo.Net.PjSip.Contact)">
            <summary>
Remove the contact from the list.
</summary>
            <param name="contact">The contact to remove.</param>
            <summary>
Remove the contact from the list.
</summary>
            <param name="contact">The contact to remove.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.GetAllContacts">
            <summary>
Get all contacts.
</summary>
            <returns>A contact array.</returns>
            <summary>
Get all contacts.
</summary>
            <returns>A contact array.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.SetOnlineStatus(Nequeo.Net.PjSip.PresenceState)">
            <summary>
Set the online status.
</summary>
            <param name="presenceState">The presence state.</param>
            <summary>
Set the online status.
</summary>
            <param name="presenceState">The presence state.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.GetAccountInfo">
            <summary>
Get the account info.
</summary>
            <returns>The account info.</returns>
            <summary>
Get the account info.
</summary>
            <returns>The account info.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.IsValid">
            <summary>
Is the account still valid.
</summary>
            <returns>True if valid: else false.</returns>
            <summary>
Is the account still valid.
</summary>
            <returns>True if valid: els false.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.GetAccountId">
            <summary>
Get the account ID or index associated with this account.
</summary>
            <returns>The account ID or index.</returns>
            <summary>
Get the account ID or index associated with this account.
</summary>
            <returns>The account ID or index.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.Registration(System.Boolean)">
            <summary>
Update registration or perform unregistration. Application normally
only needs to call this function if it wants to manually update the
registration or to unregister from the server.
</summary>
            <param name="renew">If False, this will start unregistration process.</param>
            <summary>
Update registration or perform unregistration. Application normally
only needs to call this function if it wants to manually update the
registration or to unregister from the server.
</summary>
            <param name="renew">If False, this will start unregistration process.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.Create">
            <summary>
Create the account.
</summary>
            <summary>
Create the account.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.Account.AccountConnConfig">
            <summary>
Gets or sets the account connection configuration.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Account.OnRegState">
            <summary>
Notify application when registration status has changed.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Account.OnRegStarted">
            <summary>
Notify application when registration or unregistration has been initiated.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Account.OnTypingIndication">
            <summary>
Notify application about typing indication.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Account.OnMwiInfo">
            <summary>
Notification about MWI (Message Waiting Indication) status change.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Account.OnInstantMessageStatus">
            <summary>
Notify application about the delivery status of outgoing pager/instant
message(i.e.MESSAGE) request.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Account.OnInstantMessage">
            <summary>
Notify application on incoming instant message or pager (i.e. MESSAGE
request) that was received outside call context.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Account.OnIncomingSubscribe">
            <summary>
Notification when incoming SUBSCRIBE request is received.
</summary>
        </member>
        <member name="E:Nequeo.Net.PjSip.Account.OnIncomingCall">
            <summary>
Notify application on incoming call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.Finalize">
            <summary>
Sip account finalizer.
</summary>
            <summary>
Sip account finalizer.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.Dispose">
            <summary>
Sip account deconstructor.
</summary>
            <summary>
Sip account.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.#ctor(Nequeo.Net.PjSip.AccountConnection)">
            <summary>
Sip account.
</summary>
            <param name="accountConnection">Account connection configuration.</param>
            <summary>
Sip account.
</summary>
            <param name="accountConnection">Account connection configuration.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.Account.#ctor">
            <summary>
Sip account.
</summary>
            <summary>
Sip account.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.Account">
            <summary>
Sip account.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnRegStateParam.Status">
            <summary>
Gets or sets the Registration operation status.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnRegStateParam.Reason">
            <summary>
Gets or sets the SIP reason phrase received.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnRegStateParam.RxData">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnRegStateParam.Expiration">
            <summary>
Gets or sets the next expiration interval.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnRegStateParam.Code">
            <summary>
Gets or sets the SIP status code of the transaction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStateParam.#ctor">
            <summary>
On registration state paramters.
</summary>
            <summary>
On registration state paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnRegStateParam">
            <summary>
On registration state paramters.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnRegStartedParam.Renew">
            <summary>
Gets or sets true for registration and false for unregistration.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnRegStartedParam.#ctor">
            <summary>
On registration started paramters.
</summary>
            <summary>
On registration started paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnRegStartedParam">
            <summary>
On registration started paramters.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnMwiInfoParam.State">
            <summary>
Gets or sets the MWI subscription state.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnMwiInfoParam.RxData">
            <summary>
Gets or sets the incoming response that causes this callback to be called.
If the transaction fails because of time out or transport error,
the content will be empty.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnMwiInfoParam.#ctor">
            <summary>
On MWI info paramters.
</summary>
            <summary>
On MWI info paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnMwiInfoParam">
            <summary>
On MWI info paramters.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnInstantMessageStatusParam.ToUri">
            <summary>
Gets or sets the destination URI.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnInstantMessageStatusParam.Reason">
            <summary>
Gets or sets the reason phrase of the transaction.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnInstantMessageStatusParam.RxData">
            <summary>
Gets or sets the incoming response that causes this callback to be called.
If the transaction fails because of time out or transport error,
the content will be empty.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnInstantMessageStatusParam.MsgBody">
            <summary>
Gets or sets the message body.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnInstantMessageStatusParam.Code">
            <summary>
Gets or sets the SIP status code of the transaction.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageStatusParam.#ctor">
            <summary>
On instant message status paramters.
</summary>
            <summary>
On instant message status paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnInstantMessageStatusParam">
            <summary>
On instant message status paramters.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnInstantMessageParam.ToUri">
            <summary>
Gets or sets the to URI of the request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnInstantMessageParam.RxData">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnInstantMessageParam.MsgBody">
            <summary>
Gets or sets the message body.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnInstantMessageParam.FromUri">
            <summary>
Gets or sets the sender from URI.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnInstantMessageParam.ContentType">
            <summary>
Gets or sets the MIME type of the message body.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnInstantMessageParam.ContactUri">
            <summary>
Gets or sets the contact URI of the sender.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnInstantMessageParam.#ctor">
            <summary>
On instant message paramters.
</summary>
            <summary>
On instant message paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnInstantMessageParam">
            <summary>
On instant message paramters.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnIncomingSubscribeParam.TxOption">
            <summary>
Gets or sets additional data to be sent with the response, if any.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnIncomingSubscribeParam.RxData">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnIncomingSubscribeParam.Reason">
            <summary>
Gets or sets the reason phrase to respond to the request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnIncomingSubscribeParam.FromUri">
            <summary>
Gets or sets the sender URI.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnIncomingSubscribeParam.Code">
            <summary>
Gets or sets the status code.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingSubscribeParam.#ctor">
            <summary>
On incoming subscribe paramters.
</summary>
            <summary>
On incoming subscribe paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnIncomingSubscribeParam">
            <summary>
On incoming subscribe paramters.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnIncomingCallParam.RxData">
            <summary>
Gets or sets the incoming INVITE request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnIncomingCallParam.CallId">
            <summary>
Gets or sets the library call ID allocated for the new call.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnIncomingCallParam.#ctor">
            <summary>
On incoming call paramters.
</summary>
            <summary>
On incoming call paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnIncomingCallParam">
            <summary>
On incoming call paramters.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SendTypingIndicationParam.TxOption">
            <summary>
Gets or sets the list of headers etc to be included in outgoing request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SendTypingIndicationParam.IsTyping">
            <summary>
Gets or sets True to indicate to remote that local person is currently typing an IM.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendTypingIndicationParam.Dispose">
            <summary>
This structure contains parameters for sending typing indication methods,
e.g: Contact::SendTypingIndication(), Call:SendTypingIndication().
</summary>
            <summary>
This structure contains parameters for sending typing indication methods,
e.g: Contact::SendTypingIndication(), Call:SendTypingIndication().
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendTypingIndicationParam.#ctor">
            <summary>
This structure contains parameters for sending typing indication methods,
e.g: Contact::SendTypingIndication(), Call:SendTypingIndication().
</summary>
            <summary>
This structure contains parameters for sending typing indication methods,
e.g: Contact::SendTypingIndication(), Call:SendTypingIndication().
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.SendTypingIndicationParam">
            <summary>
This structure contains parameters for sending typing indication methods,
e.g: Contact::SendTypingIndication(), Call:SendTypingIndication().
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SendInstantMessageParam.TxOption">
            <summary>
Gets or sets the list of headers etc to be included in outgoing request.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SendInstantMessageParam.Content">
            <summary>
Gets or sets the message content.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SendInstantMessageParam.ContentType">
            <summary>
Gets or sets the MIME type. Default is "text/plain".
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendInstantMessageParam.Dispose">
            <summary>
This structure contains parameters for sending instance message methods,
e.g: Contact::SendInstantMessage(), Call:SendInstantMessage().
</summary>
            <summary>
This structure contains parameters for sending instance message methods,
e.g: Contact::SendInstantMessage(), Call:SendInstantMessage().
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SendInstantMessageParam.#ctor">
            <summary>
This structure contains parameters for sending instance message methods,
e.g: Contact::SendInstantMessage(), Call:SendInstantMessage().
</summary>
            <summary>
This structure contains parameters for sending instance message methods,
e.g: Contact::SendInstantMessage(), Call:SendInstantMessage().
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.SendInstantMessageParam">
            <summary>
This structure contains parameters for sending instance message methods,
e.g: Contact::SendInstantMessage(), Call:SendInstantMessage().
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ContactInfo.PresenceStatus">
            <summary>
Gets or sets the presence status.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ContactInfo.SubTermReason">
            <summary>
Gets or sets the Specifies the last presence subscription termination reason. If 
presence subscription is currently active, the value will be empty.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ContactInfo.SubTermCode">
            <summary>
Gets or sets the specifies the last presence subscription termination code. This would
return the last status of the SUBSCRIBE request.If the subscription
is terminated with NOTIFY by the server, this value will be set to
200, and subscription termination reason will be given in the
SubTermReason field.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ContactInfo.SubStateName">
            <summary>
Gets or sets the representation of subscription state.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ContactInfo.SubState">
            <summary>
Gets or sets If PresMonitorEnabled is true, this specifies the last state of
the presence subscription. If presence subscription session is currently
active, the value will be EVSUB_STATE_ACTIVE.If presence
subscription request has been rejected, the value will be
EVSUB_STATE_TERMINATED, and the termination reason will be
specified in SubTermReason.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ContactInfo.PresMonitorEnabled">
            <summary>
Gets or sets a flag to indicate that we should monitor the presence information for
this buddy(normally yes, unless explicitly disabled).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ContactInfo.Info">
            <summary>
Gets or sets the contact info, only available when presence subscription has
been established to the buddy.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ContactInfo.Uri">
            <summary>
Gets or sets the full URI of the contact.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.Dispose">
            <summary>
Contact information.
</summary>
            <summary>
Contact information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactInfo.#ctor">
            <summary>
Contact information.
</summary>
            <summary>
Contact information.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.ContactInfo">
            <summary>
Contact information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ContactConnection.Uri">
            <summary>
Gets or sets the contact URL or name address (sip:[Name or IP Address]@[Provider Domain or IP Address]:[Optional port number]).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ContactConnection.Subscribe">
            <summary>
Gets or sets specify whether presence subscription should start immediately.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactConnection.Dispose">
            <summary>
Contact connection configuration.
</summary>
            <summary>
Contact connection configuration.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactConnection.#ctor(System.Boolean,System.String)">
            <summary>
Contact connection configuration.
</summary>
            <param name="subscribe">Specify whether presence subscription should start immediately.</param>
            <param name="uri">The contact URL or name address (sip:[Name or IP Address]@[Provider Domain or IP Address]:[Optional port number]).</param>
            <summary>
Contact connection configuration.
</summary>
            <param name="subscribe">Specify whether presence subscription should start immediately.</param>
            <param name="uri">The contact URL or name address (sip:[Name or IP Address]@[Provider Domain or IP Address]:[Optional port number]).</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactConnection.#ctor">
            <summary>
Contact connection configuration.
</summary>
            <summary>
Contact connection configuration.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.ContactConnection">
            <summary>
Contact connection configuration.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactCallback.Set_OnBuddyState_Function(=FUNC:System.Void)">
            <summary>
Set the on buddy state function callback.
</summary>
            <param name="onBuddyStateCallBack">The on buddy state function callback.</param>
            <summary>
Set the on buddy state function callback.
</summary>
            <param name="onBuddyStateCallBack">The on buddy state function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactCallback.onBuddyState">
            <summary>
Notify application when the buddy state has changed.
Application may then query the buddy info to get the details.
</summary>
            <summary>
Notify application when the buddy state has changed.
Application may then query the buddy info to get the details.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactCallback.Create(Nequeo.Net.PjSip.AccountCallback*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,Nequeo.Net.PjSip.ContactMapper*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Create buddy and register the buddy to PJSUA-LIB.
</summary>
            <param name="pjAccount">The account for this buddy.</param>
            <param name="contactMapper">The contact mapper config.</param>
            <summary>
Create buddy and register the buddy to PJSUA-LIB.
</summary>
            <param name="pjAccount">The account for this buddy.</param>
            <param name="contactMapper">The contact mapper config.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactCallback.Dispose">
            <summary>
Contact callbacks.
</summary>
            <summary>
Contact callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactCallback.#ctor">
            <summary>
Contact callbacks.
</summary>
            <summary>
Contact callbacks.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.ContactCallback">
            <summary>
Contact callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactMapper.SetUri(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>
Gets or sets the contact URL or name address (sip:[Name or IP Address]@[Provider Domain or IP Address]:[Optional port number]).
</summary>
            <summary>
Gets or sets the contact URL or name address (sip:[Name or IP Address]@[Provider Domain or IP Address]:[Optional port number]).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactMapper.SetSubscribe(System.Boolean)">
            <summary>
Gets or sets specify whether presence subscription should start immediately.
</summary>
            <summary>
Gets or sets specify whether presence subscription should start immediately.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactMapper.Dispose">
            <summary>
Contact connection mapper.
</summary>
            <summary>
Contact callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ContactMapper.#ctor">
            <summary>
Contact connection mapper.
</summary>
            <summary>
Contact callbacks.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.ContactMapper">
            <summary>
Contact connection mapper.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CodecInfo.Priority">
            <summary>
Gets or sets the codec priority (integer 0-255).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CodecInfo.Description">
            <summary>
Gets or sets the codec description.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.CodecInfo.CodecId">
            <summary>
Gets or sets the codec id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CodecInfo.#ctor">
            <summary>
Codec information.
</summary>
            <summary>
Codec information.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CodecInfo">
            <summary>
Codec information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.#ctor(pj.AudDevManager*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,pj.VidDevManager*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,pj.AccountVideoConfig*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Sip media manager.
</summary>
            <param name="pjAudDevManager">Audio device manager.</param>
            <param name="pjVidDevManager">Video device manager.</param>
            <param name="videoConfig">Video configuration.</param>
            <summary>
Sip media manager.
</summary>
            <param name="pjAudDevManager">Audio device manager.</param>
            <param name="pjVidDevManager">Video device manager.</param>
            <param name="videoConfig">Video configuration.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.SetVideoWindowFlag">
            <summary>
Set the video window flag.
</summary>
            <returns>
0 - No border.
1 - With border.
3 - With border and resizable.
</returns>
            <summary>
Set the video window flag.
</summary>
            <returns>
0 - No border.
1 - With border.
3 - With border and resizable.
</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.SetVideoWindowFlag(System.Boolean,System.Boolean)">
            <summary>
Set the video window flag.
</summary>
            <param name="withBorder">Window with border.</param>
            <param name="resizable">Window is resizable.</param>
            <summary>
Set the video window flag.
</summary>
            <param name="withBorder">Window with border.</param>
            <param name="resizable">Window is resizable.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.StopConferenceCall(Nequeo.Net.PjSip.AudioMedia[])">
            <summary>
Stop conference call between remote parties; allow each party to talk to each other.
</summary>
            <param name="conferenceCalls">Array of remote conference calls.</param>
            <summary>
Stop conference call between remote parties; allow each party to talk to each other.
</summary>
            <param name="conferenceCalls">Array of remote conference calls.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.StartConferenceCall(Nequeo.Net.PjSip.AudioMedia[])">
            <summary>
Start conference call between remote parties; allow each party to talk to each other.
</summary>
            <param name="conferenceCalls">Array of remote conference calls.</param>
            <summary>
Start conference call between remote parties; allow each party to talk to each other.
</summary>
            <param name="conferenceCalls">Array of remote conference calls.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.GetPlaybackDeviceMedia">
            <summary>
Get the AudioMedia of the speaker/playback audio device.
</summary>
            <returns>Audio media for the speaker/playback device.</returns>
            <summary>
Get the AudioMedia of the speaker/playback audio device.
</summary>
            <returns>Audio media for the speaker/playback device.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.GetCaptureDeviceMedia">
            <summary>
Get the AudioMedia of the capture audio device.
</summary>
            <returns>Audio media for the capture device.</returns>
            <summary>
Get the AudioMedia of the capture audio device.
</summary>
            <returns>Audio media for the capture device.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.SetPlaybackDevice(System.Int32)">
            <summary>
Set or change playback sound device. Application may call this
function at any time to replace current sound device.
</summary>
            <param name="deviceID">Device ID of the playback device.</param>
            <summary>
Set or change playback sound device. Application may call this
function at any time to replace current sound device.
</summary>
            <param name="deviceID">Device ID of the playback device.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.GetPlaybackDevice">
            <summary>
Get currently active playback sound devices. If sound devices has not
been created, it is possible that the function returns -1 as device IDs.
</summary>
            <returns>Device ID of the playback device.</returns>
            <summary>
Get currently active playback sound devices. If sound devices has not
been created, it is possible that the function returns -1 as device IDs.
</summary>
            <returns>Device ID of the playback device.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.SetCaptureDevice(System.Int32)">
            <summary>
Set or change capture sound device. Application may call this
function at any time to replace current sound device.
</summary>
            <param name="deviceID">Device ID of the capture device.</param>
            <summary>
Set or change capture sound device. Application may call this
function at any time to replace current sound device.
</summary>
            <param name="deviceID">Device ID of the capture device.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.GetCaptureDevice">
            <summary>
Get currently active capture sound devices. If sound devices has not been
created, it is possible that the function returns -1 as device IDs.
</summary>
            <returns>Device ID of the capture device.</returns>
            <summary>
Get currently active capture sound devices. If sound devices has not been
created, it is possible that the function returns -1 as device IDs.
</summary>
            <returns>Device ID of the capture device.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.SetVideoAutoShow(System.Boolean)">
            <summary>
Gets or sets an indicator specifying that any video is shown automatically.
</summary>
            <param name="value">True to enable video is shown automatically.</param>
            <summary>
Gets or sets an indicator specifying that any video is shown automatically.
</summary>
            <param name="value">True to enable video is shown automatically.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.SetVideoAutoTransmit(System.Boolean)">
            <summary>
Gets or sets an indicator specifying that any video capture is done automatically.
</summary>
            <param name="value">True to enable video capture is done automatically.</param>
            <summary>
Gets or sets an indicator specifying that any video capture is done automatically.
</summary>
            <param name="value">True to enable video capture is done automatically.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.GetVideoRenderDeviceID">
            <summary>
Get the video render device.
</summary>
            <returns>The device ID.</returns>
            <summary>
Get the video render device.
</summary>
            <returns>The device ID.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.GetVideoCaptureDeviceID">
            <summary>
Get the video capture device.
</summary>
            <returns>The device ID.</returns>
            <summary>
Get the video capture device.
</summary>
            <returns>The device ID.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.SetVideoRenderDeviceID(System.Int32)">
            <summary>
Set the video render device.
</summary>
            <param name="deviceID">Device ID of the render device.</param>
            <summary>
Set the video render device.
</summary>
            <param name="deviceID">Device ID of the render device.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.SetVideoCaptureDeviceID(System.Int32)">
            <summary>
Set the video capture device.
</summary>
            <param name="deviceID">Device ID of the capture device.</param>
            <summary>
Set the video capture device.
</summary>
            <param name="deviceID">Device ID of the capture device.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.GetVideoDeviceID(System.String,System.String)">
            <summary>
Get device index based on the driver and device name.
</summary>
            <param name="driverName">The driver name.</param>
            <param name="deviceName">The device name.</param>
            <returns>The device ID. If the device is not found, error will be thrown.</returns>
            <summary>
Get device index based on the driver and device name.
</summary>
            <param name="driverName">The driver name.</param>
            <param name="deviceName">The device name.</param>
            <returns>The device ID. If the device is not found, error will be thrown.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.GetAudioDeviceID(System.String,System.String)">
            <summary>
Get device index based on the driver and device name.
</summary>
            <param name="driverName">The driver name.</param>
            <param name="deviceName">The device name.</param>
            <returns>The device ID. If the device is not found, error will be thrown.</returns>
            <summary>
Get device index based on the driver and device name.
</summary>
            <param name="driverName">The driver name.</param>
            <param name="deviceName">The device name.</param>
            <returns>The device ID. If the device is not found, error will be thrown.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.IsVideoCaptureActive(System.Int32)">
            <summary>
Is the video capture active.
</summary>
            <param name="deviceID">Device ID of the capture device.</param>
            <returns>True if the video capture is active: else false.</returns>
            <summary>
Is the video capture active.
</summary>
            <param name="deviceID">Device ID of the capture device.</param>
            <returns>True if the video capture is active: else false.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.GetVideoDeviceCount">
            <summary>
Get the number of video devices installed in the system.
</summary>
            <returns>The number of video devices installed in the system.</returns>
            <summary>
Get the number of video devices installed in the system.
</summary>
            <returns>The number of video devices installed in the system.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.GetAllVideoDevices">
            <summary>
Get all video devices installed in the system.
</summary>
            <returns>The array of video devices installed in the system.</returns>
            <summary>
Get all video devices installed in the system.
</summary>
            <returns>The array of video devices installed in the system.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.GetAllAudioDevices">
            <summary>
Get all audio devices installed in the system.
</summary>
            <returns>The array of audio devices installed in the system.</returns>
            <summary>
Get all audio devices installed in the system.
</summary>
            <returns>The array of audio devices installed in the system.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaManager.Dispose">
            <summary>
Sip media manager deconstructor.
</summary>
            <summary>
Sip media manager deconstructor.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaManager">
            <summary>
Sip media manager.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetMediaTransportStateEx(pjsua_med_tp_st)">
            <summary>
Get the MediaTransportState.
</summary>
            <param name="mediaTransportState">The MediaTransportState.</param>
            <returns>The MediaTransportState.</returns>
            <summary>
Get the MediaTransportState.
</summary>
            <param name="mediaTransportState">The MediaTransportState.</param>
            <returns>The MediaTransportState.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetMediaEventTypeEx(pjmedia_event_type)">
            <summary>
Get the MediaEventType.
</summary>
            <param name="mediaEventType">The MediaEventType.</param>
            <returns>The MediaEventType.</returns>
            <summary>
Get the MediaEventType.
</summary>
            <param name="mediaEventType">The MediaEventType.</param>
            <returns>The MediaEventType.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetSipEventTypeEx(pjsip_event_id_e)">
            <summary>
Get the SipEventType.
</summary>
            <param name="sipEventType">The SipEventType.</param>
            <returns>The SipEventType.</returns>
            <summary>
Get the SipEventType.
</summary>
            <param name="sipEventType">The SipEventType.</param>
            <returns>The SipEventType.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetMediaTransportProtocolEx(pjmedia_tp_proto)">
            <summary>
Get the MediaTransportProtocol.
</summary>
            <param name="mediaTransportProtocol">The MediaTransportProtocol.</param>
            <returns>The MediaTransportProtocol.</returns>
            <summary>
Get the MediaTransportProtocol.
</summary>
            <param name="mediaTransportProtocol">The MediaTransportProtocol.</param>
            <returns>The MediaTransportProtocol.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetVideoStreamOperationEx(&lt;unknown type&gt;)">
            <summary>
Get the VideoStreamOperation.
</summary>
            <param name="videoStreamOperation">The VideoStreamOperation.</param>
            <returns>The VideoStreamOperation.</returns>
            <summary>
Get the VideoStreamOperation.
</summary>
            <param name="videoStreamOperation">The VideoStreamOperation.</param>
            <returns>The VideoStreamOperation.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetRedirectResponseTypeEx(&lt;unknown type&gt;)">
            <summary>
Get the RedirectResponseType.
</summary>
            <param name="redirectResponseType">The RedirectResponseType.</param>
            <returns>The RedirectResponseType.</returns>
            <summary>
Get the RedirectResponseType.
</summary>
            <param name="redirectResponseType">The RedirectResponseType.</param>
            <returns>The RedirectResponseType.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetStunNatTypeEx(pj_stun_nat_type)">
            <summary>
Get the stun nat type.
</summary>
            <param name="natType">The stun nat type.</param>
            <returns>The stun nat type.</returns>
            <summary>
Get the stun nat type.
</summary>
            <param name="natType">The stun nat type.</param>
            <returns>The stun nat type.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetDialogCapStatusEx(pjsip_dialog_cap_status)">
            <summary>
Get the dialog cap status.
</summary>
            <param name="capStatus">The dialog cap status.</param>
            <returns>The dialog cap status.</returns>
            <summary>
Get the dialog cap status.
</summary>
            <param name="capStatus">The dialog cap status.</param>
            <returns>The dialog cap status.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetCallMediaStatusEx(pjsua_call_media_status)">
            <summary>
Get CallMediaStatus.
</summary>
            <param name="callMediaStatus">The current CallMediaStatus.</param>
            <returns>The CallMediaStatus.</returns>
            <summary>
Get CallMediaStatus.
</summary>
            <param name="callMediaStatus">The current CallMediaStatus.</param>
            <returns>The CallMediaStatus.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetMediaDirectionEx(&lt;unknown type&gt;)">
            <summary>
Get MediaDirection.
</summary>
            <param name="mediaDirection">The current MediaDirection.</param>
            <returns>The MediaDirection.</returns>
            <summary>
Get MediaDirection.
</summary>
            <param name="mediaDirection">The current MediaDirection.</param>
            <returns>The MediaDirection.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetMediaDirectionEx(pjmedia_dir)">
            <summary>
Get MediaDirection.
</summary>
            <param name="mediaDirection">The current MediaDirection.</param>
            <returns>The MediaDirection.</returns>
            <summary>
Get MediaDirection.
</summary>
            <param name="mediaDirection">The current MediaDirection.</param>
            <returns>The MediaDirection.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetInviteSessionStateEx(pjsip_inv_state)">
            <summary>
Get InviteSessionState.
</summary>
            <param name="inviteSessionState">The current InviteSessionState.</param>
            <returns>The InviteSessionState.</returns>
            <summary>
Get InviteSessionState.
</summary>
            <param name="inviteSessionState">The current InviteSessionState.</param>
            <returns>The InviteSessionState.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.GetCallRoleEx(pjsip_role_e)">
            <summary>
Get call role.
</summary>
            <param name="callRole">The current call role.</param>
            <returns>The call role.</returns>
            <summary>
Get call role.
</summary>
            <param name="callRole">The current call role.</param>
            <returns>The call role.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.Dispose">
            <summary>
Call connection mapper.
</summary>
            <summary>
Call connection mapper.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallMapper.#ctor">
            <summary>
Call connection mapper.
</summary>
            <summary>
Call connection mapper.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallMapper">
            <summary>
Call connection mapper.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaTransportState">
            <summary>
Enumeration of media transport state types.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_MED_TP_DISABLED">
            <summary>
Disabled (transport is initialized, but media is being disabled). 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_MED_TP_RUNNING">
            <summary> 
Running (media_start() has been called). 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_MED_TP_INIT">
            <summary>
Initialized (media_create() has been called). 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_MED_TP_IDLE">
            <summary> 
Media transport creation is completed, but not initialized yet. 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_MED_TP_CREATING">
            <summary>
Just before media transport is created, which can finish
asynchronously later.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_MED_TP_NULL">
            <summary> 
Null, this is the state before media transport is created. 
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaEventType">
            <summary>
This enumeration describes list of media events.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.MediaEventType.PJMEDIA_EVENT_ORIENT_CHANGED">
            <summary>
Video orientation has been changed event.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.MediaEventType.PJMEDIA_EVENT_KEYFRAME_MISSING">
            <summary>
Video decoding error due to missing keyframe event.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.MediaEventType.PJMEDIA_EVENT_KEYFRAME_FOUND">
            <summary>
Video keyframe has just been decoded event.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.MediaEventType.PJMEDIA_EVENT_MOUSE_BTN_DOWN">
            <summary>
Mouse button has been pressed event.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.MediaEventType.PJMEDIA_EVENT_WND_RESIZED">
            <summary>
Video window has been resized event.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.MediaEventType.PJMEDIA_EVENT_WND_CLOSED">
            <summary>
Video window has been closed event.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.MediaEventType.PJMEDIA_EVENT_WND_CLOSING">
            <summary>
Video window is being closed.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.MediaEventType.PJMEDIA_EVENT_FMT_CHANGED">
            <summary>
Media format has changed event.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.MediaEventType.PJMEDIA_EVENT_NONE">
            <summary>
No event.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.SipEventType">
            <summary>
Sip event type.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_EVENT_USER">
            <summary>
Indicates that the event was triggered by user action. 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_EVENT_TSX_STATE">
            <summary>
Transaction state changed event. 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_EVENT_TRANSPORT_ERROR">
            <summary> 
Transport error event. 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_EVENT_RX_MSG">
            <summary> 
Message received event. 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_EVENT_TX_MSG">
            <summary> 
Message transmission event. 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_EVENT_TIMER">
            <summary> 
Timer event, normally only used internally in transaction. 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_EVENT_UNKNOWN">
            <summary>
Unidentified event. 
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaTransportProtocol">
            <summary>
Media transport protocol.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_TP_PROTO_UNKNOWN">
            <summary>
Unknown 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_TP_PROTO_RTP_SAVP">
            <summary>
Secure RTP 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_TP_PROTO_RTP_AVP">
            <summary>
RTP using A/V profile 
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_TP_PROTO_NONE">
            <summary>
No transport type 
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.VideoStreamOperation">
            <summary>
This enumeration represents video stream operation on a call.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_VID_STRM_SEND_KEYFRAME">
            <summary>
Send keyframe in the video stream. This will force the stream to
generate and send video keyframe as soon as possible. No
re-INVITE/UPDATE is to be transmitted to remote with this operation.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_VID_STRM_STOP_TRANSMIT">
            <summary>
Stop transmitting video stream. This will cause the stream to
be paused in TX direction, causing it to stop sending any video
packets. No re-INVITE/UPDATE is to be transmitted to remote
with this operation.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_VID_STRM_START_TRANSMIT">
            <summary>
Start transmitting video stream. This will cause previously
stopped stream to start transmitting again. Note that no
re-INVITE/UPDATE is to be transmitted to remote since this
operation only operates on local stream.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_VID_STRM_CHANGE_CAP_DEV">
            <summary>
Change capture device of a video stream.  This will not send
re-INVITE or UPDATE to remote party.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_VID_STRM_CHANGE_DIR">
            <summary>
Change direction of a video stream. This operation can be used
to activate or deactivate an existing video media. This will
cause re-INVITE or UPDATE to be sent to remote party.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_VID_STRM_REMOVE">
            <summary>
Remove/disable an existing video stream. This will
cause re-INVITE or UPDATE to be sent to remote party.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_VID_STRM_ADD">
            <summary>
Add a new video stream. This will add a new m=video line to
the media, regardless of whether existing video is/are present
or not.  This will cause re-INVITE or UPDATE to be sent to remote
party.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_VID_STRM_NO_OP">
            <summary>
No operation
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.RedirectResponseType">
            <summary>
These enumerations specify the action to be performed to a redirect response.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_REDIRECT_STOP">
            <summary>
Stop the whole redirection process altogether. This will cause
the invite session to be disconnected.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_REDIRECT_PENDING">
            <summary>
Defer the redirection decision, for example to request permission
from the end user.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_REDIRECT_ACCEPT_REPLACE">
            <summary>
Accept the redirection to the current target and replace the To
header in the INVITE request with the current target. The INVITE
request will be resent to the current target.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_REDIRECT_ACCEPT">
            <summary>
Accept the redirection to the current target. The INVITE request
will be resent to the current target.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_REDIRECT_REJECT">
            <summary>
Reject the redirection to the current target. The UAC will
select the next target from the target set if exists.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.StunNatType">
            <summary>
This enumeration describes the NAT types, as specified by RFC 3489
Section 5, NAT Variations.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.StunNatType.PJ_STUN_NAT_TYPE_PORT_RESTRICTED">
            <summary>
A port restricted cone NAT is like a restricted cone NAT, but the
restriction includes port numbers. Specifically, an external host
can send a packet, with source IP address X and source port P,
to the internal host only if the internal host had previously sent
a packet to IP address X and port P.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.StunNatType.PJ_STUN_NAT_TYPE_RESTRICTED">
            <summary>
A restricted cone NAT is one where all requests from the same
internal IP address and port are mapped to the same external IP
address and port.  Unlike a full cone NAT, an external host (with
IP address X) can send a packet to the internal host only if the
internal host had previously sent a packet to IP address X.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.StunNatType.PJ_STUN_NAT_TYPE_SYMMETRIC">
            <summary>
A symmetric NAT is one where all requests from the same internal
IP address and port, to a specific destination IP address and port,
are mapped to the same external IP address and port.  If the same
host sends a packet with the same source address and port, but to
a different destination, a different mapping is used.  Furthermore,
only the external host that receives a packet can send a UDP packet
back to the internal host.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.StunNatType.PJ_STUN_NAT_TYPE_FULL_CONE">
            <summary>
A full cone NAT is one where all requests from the same internal
IP address and port are mapped to the same external IP address and
port.  Furthermore, any external host can send a packet to the
internal host, by sending a packet to the mapped external address.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.StunNatType.PJ_STUN_NAT_TYPE_SYMMETRIC_UDP">
            <summary>
Firewall that allows UDP out, and responses have to come back to
the source of the request (like a symmetric NAT, but no
translation.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.StunNatType.PJ_STUN_NAT_TYPE_BLOCKED">
            <summary>
This specifies that communication with server has failed, probably
because UDP packets are blocked.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.StunNatType.PJ_STUN_NAT_TYPE_OPEN">
            <summary>
This specifies that the client has open access to Internet (or
at least, its behind a firewall that behaves like a full-cone NAT,
but without the translation)
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.StunNatType.PJ_STUN_NAT_TYPE_ERR_UNKNOWN">
            <summary>
NAT type is unknown because there is failure in the detection
process, possibly because server does not support RFC 3489.
</summary>
        </member>
        <member name="F:Nequeo.Net.PjSip.StunNatType.PJ_STUN_NAT_TYPE_UNKNOWN">
            <summary>
NAT type is unknown because the detection has not been performed.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.DialogCapStatus">
            <summary>
Dialog capability status.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_DIALOG_CAP_UNKNOWN">
            <summary>
Unknown capability status. This is usually because we lack the 
capability info which is retrieved from capability header specified
in the dialog messages.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_DIALOG_CAP_SUPPORTED">
            <summary>
Capability is supported.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_DIALOG_CAP_UNSUPPORTED">
            <summary>
Capability is unsupported.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.VidReqKeyframeMethod">
            <summary>
Enumeration of video keyframe request methods. Keyframe request is
triggered by decoder, usually when the incoming video stream cannot
be decoded properly due to missing video keyframe.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_VID_REQ_KEYFRAME_RTCP_PLI">
            <summary>
Requesting keyframe via Picture Loss Indication of RTCP feedback.
This is currently not supported.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_VID_REQ_KEYFRAME_SIP_INFO">
            <summary>
Requesting keyframe via SIP INFO message. Note that incoming keyframe
request via SIP INFO will always be handled even if this flag is unset.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallMediaStatus">
            <summary>
This enumeration specifies the media status of a call, and it's part
of pjsua_call_info structure.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_MEDIA_ERROR">
            <summary>
The media has reported error (e.g. ICE negotiation)
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_MEDIA_REMOTE_HOLD">
            <summary>
The media is currently put on hold by remote endpoint
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_MEDIA_LOCAL_HOLD">
            <summary>
The media is currently put on hold by local endpoint
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_MEDIA_ACTIVE">
            <summary>
The media is active
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_MEDIA_NONE">
            <summary>
Call currently has no media, or the media is not used.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallFlag">
            <summary>
Flags to be given to various call APIs. More than one flags may be
specified by bitmasking them.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_NO_SDP_OFFER">
            <summary>
Do not send SDP when sending INVITE or UPDATE. This flag is only valid
for #pjsua_call_make_call(), #pjsua_call_reinvite()/reinvite2(), or
#pjsua_call_update()/update2(). For re-invite/update, specifying
PJSUA_CALL_UNHOLD will take precedence over this flag.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_INCLUDE_DISABLED_MEDIA">
            <summary>
Include SDP "m=" line with port set to zero for each disabled media
(i.e when aud_cnt or vid_cnt is set to zero). This flag is only valid
for #pjsua_call_make_call(), #pjsua_call_reinvite(), and
#pjsua_call_update(). Note that even this flag is applicable in
#pjsua_call_reinvite() and #pjsua_call_update(), it will only take
effect when the re-INVITE/UPDATE operation regenerates SDP offer,
such as changing audio or video count in the call setting.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_UPDATE_CONTACT">
            <summary>
Update the local invite session's contact with the contact URI from
the account. This flag is only valid for #pjsua_call_set_hold2(),
#pjsua_call_reinvite() and #pjsua_call_update(). This flag is useful
in IP address change situation, after the local account's Contact has
been updated (typically with re-registration) use this flag to update
the invite session with the new Contact and to inform this new Contact
to the remote peer with the outgoing re-INVITE or UPDATE.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSUA_CALL_UNHOLD">
            <summary>
When the call is being put on hold, specify this flag to unhold it.
This flag is only valid for #pjsua_call_reinvite() and
#pjsua_call_update(). Note: for compatibility reason, this flag must
have value of 1 because previously the unhold option is specified as
boolean value.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.InviteSessionState">
            <summary>
Describes invite session state.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_INV_STATE_DISCONNECTED">
            <summary>
Session is terminated.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_INV_STATE_CONFIRMED">
            <summary>
After ACK is sent/received.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_INV_STATE_CONNECTING">
            <summary>
After 2xx is sent/received.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_INV_STATE_EARLY">
            <summary>
After response with To tag.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_INV_STATE_INCOMING">
            <summary>
After INVITE is received.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_INV_STATE_CALLING">
            <summary>
After INVITE is sent.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_INV_STATE_NULL">
            <summary>
Before INVITE is sent or received.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallRole">
            <summary>
Call transaction role.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_UAS_ROLE">
            <summary>
Role is UAS.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_UAC_ROLE">
            <summary>
Role is UAC.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_ROLE_UAS">
            <summary>
Role is UAS.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJSIP_ROLE_UAC">
            <summary>
Role is UAC.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.GetAudioMedia">
            <summary>
Get the pj audio media.
</summary>
            <returns>The pj audio media.</returns>
            <summary>
Get the pj audio media.
</summary>
            <returns>The pj audio media.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.#ctor(pj.AudioMedia*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Audio media.
</summary>
            <param name="pjAudioMedia">The pj audio media.</param>
            <summary>
Audio media.
</summary>
            <param name="pjAudioMedia">The pj audio media.</param>
        </member>
        <member name="P:Nequeo.Net.PjSip.AudioMedia.Id">
            <summary>
Gets or sets the conference port Id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.TypecastFromMedia(Nequeo.Net.PjSip.MediaBase)">
            <summary>
Typecast from base class MediaBase.
</summary>
            <param name="media">The object to be downcasted.</param>
            <returns>The object as AudioMedia instance.</returns>
            <summary>
Typecast from base class MediaBase.
</summary>
            <param name="media">The object to be downcasted.</param>
            <returns>The object as AudioMedia instance.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.GetTxLevel">
            <summary>
Get the last transmitted signal level.
</summary>
            <returns>Signal level in percent.</returns>
            <summary>
Get the last transmitted signal level.
</summary>
            <returns>Signal level in percent.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.GetRxLevel">
            <summary>
Get the last received signal level.
</summary>
            <returns>Signal level in percent.</returns>
            <summary>
Get the last received signal level.
</summary>
            <returns>Signal level in percent.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.AdjustTxLevel(System.Single)">
            <summary>
Adjust the signal level to be received from this media port (to
the bridge) by making it louder or quieter.
</summary>
            <param name="level">Signal level adjustment. Value 1.0 means no level 
adjustment, while value 0 means to mute the port.</param>
            <summary>
Adjust the signal level to be received from this media port (to
the bridge) by making it louder or quieter.
</summary>
            <param name="level">Signal level adjustment. Value 1.0 means no level 
adjustment, while value 0 means to mute the port.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.AdjustRxLevel(System.Single)">
            <summary>
Adjust the signal level to be transmitted from the bridge to this
media port by making it louder or quieter.
</summary>
            <param name="level">Signal level adjustment. Value 1.0 means no level 
adjustment, while value 0 means to mute the port.</param>
            <summary>
Adjust the signal level to be transmitted from the bridge to this
media port by making it louder or quieter.
</summary>
            <param name="level">Signal level adjustment. Value 1.0 means no level 
adjustment, while value 0 means to mute the port.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.StopTransmit(Nequeo.Net.PjSip.AudioMedia)">
            <summary>
Stop media flow to destination/sink port.
</summary>
            <param name="sink">The destination media.</param>
            <summary>
Stop media flow to destination/sink port.
</summary>
            <param name="sink">The destination media.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.StartTransmit(Nequeo.Net.PjSip.AudioMedia)">
            <summary>
Establish unidirectional media flow to sink. This media port
will act as a source, and it may transmit to multiple destinations / sink.
And if multiple sources are transmitting to the same sink, the media
will be mixed together.Source and sink may refer to the same Media,
effectively looping the media.

If bidirectional media flow is desired, application needs to call
this method twice, with the second one called from the opposite source
media.
</summary>
            <param name="sink">The destination media.</param>
            <summary>
Establish unidirectional media flow to sink. This media port
will act as a source, and it may transmit to multiple destinations / sink.
And if multiple sources are transmitting to the same sink, the media
will be mixed together.Source and sink may refer to the same Media,
effectively looping the media.

If bidirectional media flow is desired, application needs to call
this method twice, with the second one called from the opposite source
media.
</summary>
            <param name="sink">The destination media.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.GetPortInfoFromId(System.Int32)">
            <summary>
Get information about the specified conference port.
</summary>
            <param name="portId">The port id.</param>
            <returns>The conference port.</returns>
            <summary>
Get information about the specified conference port.
</summary>
            <param name="portId">The port id.</param>
            <returns>The conference port.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.GetPortId">
            <summary>
Get port id.
</summary>
            <returns>The port id.</returns>
            <summary>
Get port id.
</summary>
            <returns>The port id.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.GetPortInfo">
            <summary>
Get information about the specified conference port.
</summary>
            <returns>The conference port.</returns>
            <summary>
Get information about the specified conference port.
</summary>
            <returns>The conference port.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioMedia.Dispose">
            <summary>
Audio media. deconstructor.
</summary>
            <summary>
Sip media manager deconstructor.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.AudioMedia">
            <summary>
Audio media.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallAudioMedia.SetPortId(System.Int32)">
            <summary>
Set the conference port identification associated with the
call audio media.
</summary>
            <param name="id">The conference port.</param>
            <summary>
Set the conference port identification associated with the
call audio media.
</summary>
            <param name="id">The conference port.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallAudioMedia.Dispose">
            <summary>
Call audio media.
</summary>
            <summary>
Call audio media.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.CallAudioMedia.#ctor">
            <summary>
Call audio media.
</summary>
            <summary>
Call audio media.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.CallAudioMedia">
            <summary>
Call audio media.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ConfPortInfo.Listeners">
            <summary>
Gets or sets the Array of listeners (in other words, ports where this port is transmitting to.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ConfPortInfo.RxLevelAdj">
            <summary>
Gets or sets the Rx level adjustment. Value 1.0 means no adjustment, value 0 means
the port is muted, value 2.0 means the level is amplified two times.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ConfPortInfo.TxLevelAdj">
            <summary>
Gets or sets the Tx level adjustment. Value 1.0 means no adjustment, value 0 means
the port is muted, value 2.0 means the level is amplified two times.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ConfPortInfo.Format">
            <summary>
Gets or sets the media audio format information.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ConfPortInfo.Name">
            <summary>
Gets or sets the port name.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.ConfPortInfo.PortId">
            <summary>
Gets or sets the conference port number.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConfPortInfo.#ctor">
            <summary>
This structure descibes information about a particular media port that
has been registered into the conference bridge.
</summary>
            <summary>
This structure descibes information about a particular media port that
has been registered into the conference bridge.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.ConfPortInfo">
            <summary>
This structure descibes information about a particular media port that
has been registered into the conference bridge.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatVideo.MaxBps">
            <summary>
Gets or sets the maximum bitrate.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatVideo.AvgBps">
            <summary>
Gets or sets the average bitrate.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatVideo.FpsDenum">
            <summary>
Gets or sets the frames per second denumerator.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatVideo.FpsNum">
            <summary>
Gets or sets the frames per second numerator.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatVideo.Height">
            <summary>
Gets or sets the video height.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatVideo.Width">
            <summary>
Gets or sets the video width.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatVideo.#ctor">
            <summary>
This structure describe detail information about an video media.
</summary>
            <summary>
This structure describe detail information about an video media.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaFormatVideo">
            <summary>
This structure describe detail information about an video media.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatAudio.MaxBps">
            <summary>
Gets or sets the maximum bitrate.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatAudio.AvgBps">
            <summary>
Gets or sets the average bitrate.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatAudio.BitsPerSample">
            <summary>
Gets or sets the number of bits per sample.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatAudio.FrameTimeUsec">
            <summary>
Gets or sets the frame interval, in microseconds.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatAudio.ChannelCount">
            <summary>
Gets or sets the number of channels.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormatAudio.ClockRate">
            <summary>
Gets or sets the audio clock rate in samples or Hz.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormatAudio.#ctor">
            <summary>
This structure describe detail information about an audio media.
</summary>
            <summary>
This structure describe detail information about an audio media.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaFormatAudio">
            <summary>
This structure describe detail information about an audio media.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoDeviceInfo.MediaFormats">
            <summary>
Gets or sets the array of media formats.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoDeviceInfo.Caps">
            <summary>
Gets or sets the device capabilities, as bitmask combination.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoDeviceInfo.Direction">
            <summary>
Gets or sets the supported direction of the video device, i.e. whether it supports
capture only, render only, or both.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoDeviceInfo.Driver">
            <summary>
Gets or sets the underlying driver name.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoDeviceInfo.Name">
            <summary>
Gets or sets the device name.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.VideoDeviceInfo.Id">
            <summary>
Gets or sets the device id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.VideoDeviceInfo.#ctor">
            <summary>
Video device info.
</summary>
            <summary>
Video device info.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.VideoDeviceInfo">
            <summary>
Video device info.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaDirection">
            <summary>
Media direction.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_DIR_CAPTURE_RENDER">
            <summary>
Same as ENCODING_DECODING.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_DIR_CAPTURE_PLAYBACK">
            <summary>
Same as ENCODING_DECODING.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_DIR_ENCODING_DECODING">
            <summary>
Incoming and outgoing stream, same as PJMEDIA_DIR_CAPTURE_PLAYBACK.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_DIR_RENDER">
            <summary>
Same as decoding.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_DIR_PLAYBACK">
            <summary>
Same as decoding.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_DIR_DECODING">
            <summary>
Decoding (incoming from network) stream, also known as playback.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_DIR_CAPTURE">
            <summary>
Same as encoding direction.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_DIR_ENCODING">
            <summary>
Encoding (outgoing to network) stream, also known as capture.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_DIR_NONE">
            <summary>
None.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AudioDeviceInfo.MediaFormats">
            <summary>
Gets or sets the array of media formats.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AudioDeviceInfo.Routes">
            <summary>
Gets or sets the supported audio device routes, as bitmask combination
The value may be zero if the device does not support audio routing.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AudioDeviceInfo.Caps">
            <summary>
Gets or sets the device capabilities, as bitmask combination.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AudioDeviceInfo.Driver">
            <summary>
Gets or sets the underlying driver name.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AudioDeviceInfo.DefaultSamplesPerSec">
            <summary>
Gets or sets the default sampling rate.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AudioDeviceInfo.OutputCount">
            <summary>
Gets or sets the maximum number of output channels supported by this device. If the
value is zero, the device does not support output operation(i.e. it is an input only device).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AudioDeviceInfo.InputCount">
            <summary>
Get or sets the maximum number of input channels supported by this device. If the
value is zero, the device does not support input operation (i.e. it is a playback only device).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AudioDeviceInfo.Name">
            <summary>
Gets or sets the device name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AudioDeviceInfo.#ctor">
            <summary>
Audio device info.
</summary>
            <summary>
Audio device info.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.AudioDeviceInfo">
            <summary>
Audio device info.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormat.GetMediaType(&lt;unknown type&gt;)">
            <summary>
Get the media type.
</summary>
            <param name="mediaType">The current media type.</param>
            <returns>The media type.</returns>
            <summary>
Get the media type.
</summary>
            <param name="mediaType">The current media type.</param>
            <returns>The media type.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormat.GetMediaTypeEx(pjmedia_type)">
            <summary>
Get the media type.
</summary>
            <param name="mediaType">The current media type.</param>
            <returns>The media type.</returns>
            <summary>
Get the media type.
</summary>
            <param name="mediaType">The current media type.</param>
            <returns>The media type.</returns>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormat.Type">
            <summary>
Gets or sets the media type.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.MediaFormat.Id">
            <summary>
Gets or sets the media format id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaFormat.#ctor">
            <summary>
This structure contains all the information needed to completely describe a media.
</summary>
            <summary>
This structure contains all the information needed to completely describe a media.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaFormat">
            <summary>
This structure contains all the information needed to completely describe a media.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.PresenceState.StatusText">
            <summary>
Gets or sets the text to describe buddy's online status.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.PresenceState.Status">
            <summary>
Gets or sets the buddy's online status.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.PresenceState.RpidId">
            <summary>
Gets or sets the optional RPID ID string.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.PresenceState.Note">
            <summary>
Gets or sets the optional text describing the person/element.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.PresenceState.Activity">
            <summary>
Gets or sets the activity type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.PresenceState.#ctor">
            <summary>
Presence state.
</summary>
            <summary>
Presence state.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.PresenceState">
            <summary>
Presence state.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountInfo.Uri">
            <summary>
Gets or sets the account URI.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountInfo.RegStatusText">
            <summary>
Gets or sets a describing the registration status.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountInfo.RegStatus">
            <summary>
Gets or sets the status code.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountInfo.RegLastErr">
            <summary>
Gets or sets the Last registration error code. When the status field contains a SIP
status code that indicates a registration failure, last registration
error code contains the error code that causes the failure.In any
other case, its value is zero.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountInfo.RegIsConfigured">
            <summary>
Gets or sets a flag to tell whether this account has registration setting (reg_uri is not empty).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountInfo.RegIsActive">
            <summary>
Gets or sets a flag to tell whether this account is currently registered (has active registration session).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountInfo.RegExpiresSec">
            <summary>
Gets or sets an up to date expiration interval for account registration session.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountInfo.OnlineStatusText">
            <summary>
Gets or sets the presence online status text.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountInfo.OnlineStatus">
            <summary>
Gets or sets the presence online status for this account.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountInfo.IsDefault">
            <summary>
Gets or sets a flag to indicate whether this is the default account.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountInfo.Id">
            <summary>
Gets or sets the account id.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountInfo.#ctor">
            <summary>
Account information.
</summary>
            <summary>
Account information.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.AccountInfo">
            <summary>
Account information.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.Set_OnRegState_Function(=FUNC:System.Void(pj.OnRegStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on Reg State function callback.
</summary>
            <param name="onRegStateCallBack">The on Reg State function callback.</param>
            <summary>
Set the on Reg State function callback.
</summary>
            <param name="onRegStateCallBack">The on Reg State function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.Set_OnRegStarted_Function(=FUNC:System.Void(pj.OnRegStartedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on Reg Started function callback.
</summary>
            <param name="onRegStartedCallBack">The on Reg Started function callback.</param>
            <summary>
Set the on Reg Started function callback.
</summary>
            <param name="onRegStartedCallBack">The on Reg Started function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.Set_OnTypingIndication_Function(=FUNC:System.Void(pj.OnTypingIndicationParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on Typing Indication function callback.
</summary>
            <param name="onTypingIndicationCallBack">The on Typing Indication function callback.</param>
            <summary>
Set the on Typing Indication function callback.
</summary>
            <param name="onTypingIndicationCallBack">The on Typing Indication function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.Set_OnMwiInfo_Function(=FUNC:System.Void(pj.OnMwiInfoParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on Mwi Info function callback.
</summary>
            <param name="onMwiInfoCallBack">The on Mwi Info function callback.</param>
            <summary>
Set the on Mwi Info function callback.
</summary>
            <param name="onMwiInfoCallBack">The on Mwi Info function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.Set_OnInstantMessageStatus_Function(=FUNC:System.Void(pj.OnInstantMessageStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on Instant Message Status function callback.
</summary>
            <param name="onInstantMessageStatusCallBack">The on Instant Message Status function callback.</param>
            <summary>
Set the on Instant Message Status function callback.
</summary>
            <param name="onInstantMessageStatusCallBack">The on Instant Message Status function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.Set_OnInstantMessage_Function(=FUNC:System.Void(pj.OnInstantMessageParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on Instant Message function callback.
</summary>
            <param name="onInstantMessageCallBack">The on Instant Message function callback.</param>
            <summary>
Set the on Instant Message function callback.
</summary>
            <param name="onInstantMessageCallBack">The on Instant Message function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.Set_OnIncomingSubscribe_Function(=FUNC:System.Void(pj.OnIncomingSubscribeParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on Incoming Subscribe function callback.
</summary>
            <param name="onIncomingSubscribeCallBack">The on Incoming Subscribe function callback.</param>
            <summary>
Set the on Incoming Subscribe function callback.
</summary>
            <param name="onIncomingSubscribeCallBack">The on Incoming Subscribe function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.Set_OnIncomingCall_Function(=FUNC:System.Void(pj.OnIncomingCallParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced))">
            <summary>
Set the on incoming call function callback.
</summary>
            <param name="onIncomingCallBack">The on incoming call function callback.</param>
            <summary>
Set the on incoming call function callback.
</summary>
            <param name="onIncomingCallBack">The on incoming call function callback.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.onMwiInfo(pj.OnMwiInfoParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notification about MWI (Message Waiting Indication) status change.
This callback can be called upon the status change of the
SUBSCRIBE request(for example, 202/Accepted to SUBSCRIBE is received)
or when a NOTIFY reqeust is received.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notification about MWI (Message Waiting Indication) status change.
This callback can be called upon the status change of the
SUBSCRIBE request(for example, 202/Accepted to SUBSCRIBE is received)
or when a NOTIFY reqeust is received.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.onTypingIndication(pj.OnTypingIndicationParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application about typing indication.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application about typing indication.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.onInstantMessageStatus(pj.OnInstantMessageStatusParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application about the delivery status of outgoing pager/instant
message(i.e.MESSAGE) request.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application about the delivery status of outgoing pager/instant
message(i.e.MESSAGE) request.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.onInstantMessage(pj.OnInstantMessageParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application on incoming instant message or pager (i.e. MESSAGE
request) that was received outside call context.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application on incoming instant message or pager (i.e. MESSAGE
request) that was received outside call context.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.onIncomingSubscribe(pj.OnIncomingSubscribeParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notification when incoming SUBSCRIBE request is received. Application
may use this callback to authorize the incoming subscribe request
(e.g.ask user permission if the request should be granted).

If this callback is not implemented, all incoming presence subscription
requests will be accepted.

If this callback is implemented, application has several choices on
what to do with the incoming request:
- it may reject the request immediately by specifying non-200 class
   final response in the IncomingSubscribeParam.code parameter.
 - it may immediately accept the request by specifying 200 as the
IncomingSubscribeParam.code parameter. This is the default value if
  application doesn't set any value to the IncomingSubscribeParam.code
  parameter.In this case, the library will automatically send NOTIFY
  request upon returning from this callback.
 - it may delay the processing of the request, for example to request
user permission whether to accept or reject the request. In this
   case, the application MUST set the IncomingSubscribeParam.code
argument to 202, then IMMEDIATELY calls presNotify() with
state PJSIP_EVSUB_STATE_PENDING and later calls presNotify()
   again to accept or reject the subscription request.

Any IncomingSubscribeParam.code other than 200 and 202 will be treated
as 200.

Application MUST return from this callback immediately (e.g.it must
not block in this callback while waiting for user confirmation).
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notification when incoming SUBSCRIBE request is received. Application
may use this callback to authorize the incoming subscribe request
(e.g.ask user permission if the request should be granted).

If this callback is not implemented, all incoming presence subscription
requests will be accepted.

If this callback is implemented, application has several choices on
what to do with the incoming request:
- it may reject the request immediately by specifying non-200 class
   final response in the IncomingSubscribeParam.code parameter.
 - it may immediately accept the request by specifying 200 as the
IncomingSubscribeParam.code parameter. This is the default value if
  application doesn't set any value to the IncomingSubscribeParam.code
  parameter.In this case, the library will automatically send NOTIFY
  request upon returning from this callback.
 - it may delay the processing of the request, for example to request
user permission whether to accept or reject the request. In this
   case, the application MUST set the IncomingSubscribeParam.code
argument to 202, then IMMEDIATELY calls presNotify() with
state PJSIP_EVSUB_STATE_PENDING and later calls presNotify()
   again to accept or reject the subscription request.

Any IncomingSubscribeParam.code other than 200 and 202 will be treated
as 200.

Application MUST return from this callback immediately (e.g.it must
not block in this callback while waiting for user confirmation).
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.onRegState(pj.OnRegStateParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application when registration status has changed.
Application may then query the account info to get the
registration details.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application when registration status has changed.
Application may then query the account info to get the
registration details.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.onRegStarted(pj.OnRegStartedParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application when registration or unregistration has been
initiated. Note that this only notifies the initial registration
and unregistration. Once registration session is active, subsequent
refresh will not cause this callback to be called.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application when registration or unregistration has been
initiated. Note that this only notifies the initial registration
and unregistration. Once registration session is active, subsequent
refresh will not cause this callback to be called.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.onIncomingCall(pj.OnIncomingCallParam*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Notify application on incoming call.
</summary>
            <param name="prm">Callback parameter.</param>
            <summary>
Notify application on incoming call.
</summary>
            <param name="prm">Callback parameter.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.GetAccountVideoConfig">
            <summary>
Get the account video configration.
</summary>
            <returns>The account video configuration.</returns>
            <summary>
Get the account video configration.
</summary>
            <returns>The account video configuration.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.Initialise(Nequeo.Net.PjSip.ConnectionMapper*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Initialise all setting.
</summary>
            <param name="mapper">Account connection mapper.</param>
            <summary>
Initialise all setting.
</summary>
            <param name="mapper">Account connection mapper.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.Dispose">
            <summary>
Account callbacks.
</summary>
            <summary>
Account callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountCallback.#ctor">
            <summary>
Account callbacks.
</summary>
            <summary>
Account callbacks.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.AccountCallback">
            <summary>
Account callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.GetSubscriptionStateEx(pjsip_evsub_state)">
            <summary>
Get subscription state.
</summary>
            <param name="subscriptionState">The current subscription state.</param>
            <returns>The subscription state.</returns>
            <summary>
Get subscription state.
</summary>
            <param name="subscriptionState">The current subscription state.</param>
            <returns>The subscription state.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.GetBuddyStatusEx(pjsua_buddy_status)">
            <summary>
Get the buddy status.
</summary>
            <param name="status">The current buddy status.</param>
            <returns>The buddy status.</returns>
            <summary>
Get the buddy status.
</summary>
            <param name="status">The current buddy status.</param>
            <returns>The buddy status.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.GetBuddyStatusEx(&lt;unknown type&gt;)">
            <summary>
Get the buddy status.
</summary>
            <param name="status">The current buddy status.</param>
            <returns>The buddy status.</returns>
            <summary>
Get the buddy status.
</summary>
            <param name="status">The current buddy status.</param>
            <returns>The buddy status.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.GetActivityEx(pjrpid_activity)">
            <summary>
Get the activity.
</summary>
            <param name="activity">The current activity.</param>
            <returns>The activity.</returns>
            <summary>
Get the activity.
</summary>
            <param name="activity">The current activity.</param>
            <returns>The activity.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.GetActivityEx(&lt;unknown type&gt;)">
            <summary>
Get the activity.
</summary>
            <param name="activity">The current activity.</param>
            <returns>The activity.</returns>
            <summary>
Get the activity.
</summary>
            <param name="activity">The current activity.</param>
            <returns>The activity.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.GetStatusCodeEx(&lt;unknown type&gt;)">
            <summary>
Get the status code.
</summary>
            <param name="statusCode">The current status code.</param>
            <returns>The status code.</returns>
            <summary>
Get the status code.
</summary>
            <param name="statusCode">The current status code.</param>
            <returns>The status code.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.GetStatusCodeEx(pjsip_status_code)">
            <summary>
Get the status code.
</summary>
            <param name="statusCode">The current status code.</param>
            <returns>The status code.</returns>
            <summary>
Get the status code.
</summary>
            <param name="statusCode">The current status code.</param>
            <returns>The status code.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.GetSRTPSecureSignalingEx(&lt;unknown type&gt;)">
            <summary>
Get srtp secure signaling.
</summary>
            <param name="srtpSecureSignaling">The current srtp secure signaling.</param>
            <returns>The srtp secure signaling.</returns>
            <summary>
Get srtp secure signaling.
</summary>
            <param name="srtpSecureSignaling">The current srtp secure signaling.</param>
            <returns>The srtp secure signaling.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.GetSrtpUseEx(&lt;unknown type&gt;)">
            <summary>
Get srtp use.
</summary>
            <param name="srtpUse">The current srtp use.</param>
            <returns>The srtp use.</returns>
            <summary>
Get srtp use.
</summary>
            <param name="srtpUse">The current srtp use.</param>
            <returns>The srtp use.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.GetIPv6UseEx(&lt;unknown type&gt;)">
            <summary>
Get ip v6 use.
</summary>
            <param name="ipv6Use">The current ipv6 use.</param>
            <returns>The ipv6 use.</returns>
            <summary>
Get ip v6 use.
</summary>
            <param name="ipv6Use">The current ipv6 use.</param>
            <returns>The ipv6 use.</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetVideoAutoShow(System.Boolean)">
            <summary>
Gets or sets an indicator specifying that any video is shown automatically.
</summary>
            <summary>
Gets or sets an indicator specifying that any video is shown automatically.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetVideoAutoTransmit(System.Boolean)">
            <summary>
Gets or sets an indicator specifying that any video capture is done automatically.
</summary>
            <summary>
Gets or sets an indicator specifying that any video capture is done automatically.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetVideoRateControlBandwidth(System.UInt32)">
            <summary>
Gets or sets specify the Upstream/outgoing bandwidth. If this is set to zero, the video stream
will use codec maximum bitrate setting. Default : 0.
</summary>
            <summary>
Gets or sets specify the Upstream/outgoing bandwidth. If this is set to zero, the video stream
will use codec maximum bitrate setting. Default : 0.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetIceEnabled(System.Boolean)">
            <summary>
Gets or sets an indicator specifying that ice is enabled: default false.
</summary>
            <summary>
Gets or sets an indicator specifying that ice is enabled: default false.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetNoIceRtcp(System.Boolean)">
            <summary>
Gets or sets an indicator specifying that ice RTCP should not be used: default false.
</summary>
            <summary>
Gets or sets an indicator specifying that ice RTCP should not be used: default false.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetIsDefault(System.Boolean)">
            <summary>
Gets or sets an indicator specifying this account is the default.
</summary>
            <summary>
Gets or sets an indicator specifying this account is the default.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetAuthCredentials(std.vector&lt;pj.AuthCredInfo,std.allocator&lt;pj.AuthCredInfo&gt;&gt;)">
            <summary>
Gets or sets the authentication credentials.
</summary>
            <summary>
Gets or sets the authentication credentials.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetPublishShutdownWaitMsec(System.UInt32)">
            <summary>
Gets or sets Maximum time to wait for unpublication transaction(s) to complete
during shutdown process, before sending unregistration.The library
tries to wait for the unpublication(un-PUBLISH) to complete before
sending REGISTER request to unregister the account, during library
shutdown process.If the value is set too short, it is possible that
the unregistration is sent before unpublication completes, causing
unpublication request to fail. Value is in milliseconds.
</summary>
            <summary>
Gets or sets Maximum time to wait for unpublication transaction(s) to complete
during shutdown process, before sending unregistration.The library
tries to wait for the unpublication(un-PUBLISH) to complete before
sending REGISTER request to unregister the account, during library
shutdown process.If the value is set too short, it is possible that
the unregistration is sent before unpublication completes, causing
unpublication request to fail. Value is in milliseconds.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetPublishQueue(System.Boolean)">
            <summary>
Gets or sets specify whether the client publication session should queue the
PUBLISH request should there be another PUBLISH transaction still
pending.If this is set to false, the client will return error
on the PUBLISH request if there is another PUBLISH transaction still
in progress.
</summary>
            <summary>
Gets or sets specify whether the client publication session should queue the
PUBLISH request should there be another PUBLISH transaction still
pending.If this is set to false, the client will return error
on the PUBLISH request if there is another PUBLISH transaction still
in progress.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetPublishEnabled(System.Boolean)">
            <summary>
Gets or sets if this flag is set, the presence information of this account will
be PUBLISH-ed to the server where the account belongs.
</summary>
            <summary>
Gets or sets if this flag is set, the presence information of this account will
be PUBLISH-ed to the server where the account belongs.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetMWIExpirationSec(System.UInt32)">
            <summary>
Gets or sets specify the default expiration time (in seconds) for Message
Waiting Indication(RFC 3842) event subscription.This must not be zero.
</summary>
            <summary>
Gets or sets specify the default expiration time (in seconds) for Message
Waiting Indication(RFC 3842) event subscription.This must not be zero.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetMessageWaitingIndication(System.Boolean)">
            <summary>
Gets or sets true to subscribe to message waiting indication events (RFC 3842).
</summary>
            <summary>
Gets or sets true to subscribe to message waiting indication events (RFC 3842).
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetMediaTransportPortRange(System.UInt32)">
            <summary>
Gets or sets specify the port range for socket binding, relative to the start
port number specified in MediaTransportPort that this setting is only
applicable when the start port number is non zero.
</summary>
            <summary>
Gets or sets specify the port range for socket binding, relative to the start
port number specified in MediaTransportPort that this setting is only
applicable when the start port number is non zero.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetMediaTransportPort(System.UInt32)">
            <summary>
Gets or sets UDP port number to bind locally. This setting MUST be specified
even when default port is desired.If the value is zero, the
transport will be bound to any available port, and application
can query the port by querying the transport info.
</summary>
            <summary>
Gets or sets UDP port number to bind locally. This setting MUST be specified
even when default port is desired.If the value is zero, the
transport will be bound to any available port, and application
can query the port by querying the transport info.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetSRTPSecureSignaling(&lt;unknown type&gt;)">
            <summary>
Gets or sets specify whether SRTP requires secure signaling to be used. This option
is only used when SRTPUse option is non-zero.
</summary>
            <summary>
Gets or sets specify whether SRTP requires secure signaling to be used. This option
is only used when SRTPUse option is non-zero.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetSRTPUse(&lt;unknown type&gt;)">
            <summary>
Gets or sets specify whether secure media transport should be used for this account.
</summary>
            <summary>
Gets or sets specify whether secure media transport should be used for this account.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetIPv6Use(&lt;unknown type&gt;)">
            <summary>
Gets or sets specify whether IPv6 should be used on media. Default is not used.
</summary>
            <summary>
Gets or sets specify whether IPv6 should be used on media. Default is not used.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetTimerSessExpiresSec(System.UInt32)">
            <summary>
Gets or sets specify Session Timer expiration period, in seconds.
Must not be lower than timerMinSE.Default is 1800.
</summary>
            <summary>
Gets or sets specify Session Timer expiration period, in seconds.
Must not be lower than timerMinSE.Default is 1800.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetTimerMinSESec(System.UInt32)">
            <summary>
Gets or sets specify minimum Session Timer expiration period, in seconds.
Must not be lower than 90. Default is 90.
</summary>
            <summary>
Gets or sets specify minimum Session Timer expiration period, in seconds.
Must not be lower than 90. Default is 90.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetDelayBeforeRefreshSec(System.UInt32)">
            <summary>
Gets or sets specify the number of seconds to refresh the client registration
before the registration expires.
</summary>
            <summary>
Gets or sets specify the number of seconds to refresh the client registration
before the registration expires.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetUnregWaitSec(System.UInt32)">
            <summary>
Gets or sets specify the maximum time to wait for unregistration requests to
complete during library shutdown sequence.
</summary>
            <summary>
Gets or sets specify the maximum time to wait for unregistration requests to
complete during library shutdown sequence.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetFirstRetryIntervalSec(System.UInt32)">
            <summary>
Gets or sets specifies the interval for the first registration retry. The
registration retry is explained in RetryIntervalSec.
</summary>
            <summary>
Gets or sets specifies the interval for the first registration retry. The
registration retry is explained in RetryIntervalSec.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetTimeoutSec(System.UInt32)">
            <summary>
Gets or sets interval for registration, in seconds. If the value is zero,
default interval will be used 300 seconds.
</summary>
            <summary>
Gets or sets interval for registration, in seconds. If the value is zero,
default interval will be used 300 seconds.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetRetryIntervalSec(System.UInt32)">
            <summary>
Gets or sets Specify interval of auto registration retry upon registration failure
(including caused by transport problem), in second.Set to 0 to
disable auto re-registration. Note that if the registration retry
occurs because of transport failure, the first retry will be done
after FirstRetryIntervalSec seconds instead.
</summary>
            <summary>
Gets or sets Specify interval of auto registration retry upon registration failure
(including caused by transport problem), in second.Set to 0 to
disable auto re-registration. Note that if the registration retry
occurs because of transport failure, the first retry will be done
after FirstRetryIntervalSec seconds instead.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetRegisterOnAdd(System.Boolean)">
            <summary>
Gets or sets specify whether the account should register as soon as it is
added to the UA.Application can set this to false and control
the registration manually with Account.Registration().
</summary>
            <summary>
Gets or sets specify whether the account should register as soon as it is
added to the UA.Application can set this to false and control
the registration manually with Account.Registration().
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetDropCallsOnFail(System.Boolean)">
            <summary>
Gets or sets specify whether calls of the configured account should be dropped
after registration failure and an attempt of re-registration has also failed.
</summary>
            <summary>
Gets or sets specify whether calls of the configured account should be dropped
after registration failure and an attempt of re-registration has also failed.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetPriority(System.Int32)">
            <summary>
Gets or sets the account priority.
</summary>
            <summary>
Gets or sets the account priority.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetSpPort(System.Int32)">
            <summary>
Gets or sets the service provider host name or IP address.
</summary>
            <summary>
Gets or sets the service provider host name or IP address.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetSpHost(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>
Gets or sets the service provider host name or IP address.
</summary>
            <summary>
Gets or sets the service provider host name or IP address.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.SetAccountName(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;)">
            <summary>
Gets or sets the account name or service phone number.
</summary>
            <summary>
Gets or sets the account name or service phone number.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.Dispose">
            <summary>
Account connection mapper.
</summary>
            <summary>
Account callbacks.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ConnectionMapper.#ctor">
            <summary>
Account connection mapper.
</summary>
            <summary>
Account callbacks.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.ConnectionMapper">
            <summary>
Account connection mapper.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.SubscriptionState">
            <summary>
This enumeration describes basic subscription state as described in the 
RFC 3265. The standard specifies that extensions may define additional
states.In the case where the state is not known, the subscription state
will be set to PJSIP_EVSUB_STATE_UNKNOWN, and the token will be kept
in state_str member of the susbcription structure.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.EVSUB_STATE_UNKNOWN">
            <summary>
Subscription state can not be determined.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.EVSUB_STATE_TERMINATED">
            <summary>
Subscription is terminated.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.EVSUB_STATE_ACTIVE">
            <summary>
Subscription is active.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.EVSUB_STATE_PENDING">
            <summary>
Subscription is pending.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.EVSUB_STATE_ACCEPTED">
            <summary>
2xx response to SUBSCRIBE has been sent/received.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.EVSUB_STATE_SENT">
            <summary>
Client has sent SUBSCRIBE request.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.EVSUB_STATE_NULL">
            <summary>
State is NULL.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.BuddyStatus">
            <summary>
Buddy status type.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.OFFLINE">
            <summary>
Buddy is offline.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.ONLINE">
            <summary>
Buddy is known to be online.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.RpidActivity">
            <summary>
Rpid activity type.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.BUSY">
            <summary>
The person is busy.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.AWAY">
            <summary>
The person is away.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.UNKNOWN">
            <summary>
Activity is unknown. The activity would then be conceived in the "note" field.
</summary>
            <summary>
Online status is unknown (possibly because no presence subscription has been established).
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.StatusCode">
            <summary>
Status code type.
</summary>
            <remarks>
This enumeration lists standard SIP status codes according to RFC 3261.
In addition, it also declares new status class 7xx for errors generated
by the stack.This status class however should not get transmitted on the wire.
</remarks>
        </member>
        <member name="F:&lt;unknown type&gt;.SC__force_32bit">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_NOT_ACCEPTABLE_ANYWHERE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_DOES_NOT_EXIST_ANYWHERE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_DECLINE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_BUSY_EVERYWHERE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_PRECONDITION_FAILURE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_MESSAGE_TOO_LARGE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_VERSION_NOT_SUPPORTED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_SERVER_TIMEOUT">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_TSX_TRANSPORT_ERROR">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_SERVICE_UNAVAILABLE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_BAD_GATEWAY">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_NOT_IMPLEMENTED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_INTERNAL_SERVER_ERROR">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_UNDECIPHERABLE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_REQUEST_PENDING">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_REQUEST_UPDATED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_BAD_EVENT">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_NOT_ACCEPTABLE_HERE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_REQUEST_TERMINATED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_BUSY_HERE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.AC_AMBIGUOUS">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_ADDRESS_INCOMPLETE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_TOO_MANY_HOPS">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_LOOP_DETECTED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_CALL_TSX_DOES_NOT_EXIST">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_TEMPORARILY_UNAVAILABLE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_INTERVAL_TOO_BRIEF">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_SESSION_TIMER_TOO_SMALL">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_EXTENSION_REQUIRED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_BAD_EXTENSION">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_UNSUPPORTED_URI_SCHEME">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_UNSUPPORTED_MEDIA_TYPE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_REQUEST_URI_TOO_LONG">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_REQUEST_ENTITY_TOO_LARGE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_GONE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_TSX_TIMEOUT">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_REQUEST_TIMEOUT">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_PROXY_AUTHENTICATION_REQUIRED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_NOT_ACCEPTABLE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_METHOD_NOT_ALLOWED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_NOT_FOUND">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_FORBIDDEN">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_PAYMENT_REQUIRED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_UNAUTHORIZED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_BAD_REQUEST">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_ALTERNATIVE_SERVICE">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_USE_PROXY">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_MOVED_TEMPORARILY">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_MOVED_PERMANENTLY">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_MULTIPLE_CHOICES">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_ACCEPTED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_OK">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_PROGRESS">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_QUEUED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_CALL_BEING_FORWARDED">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_RINGING">
            <summary />
        </member>
        <member name="F:&lt;unknown type&gt;.SC_TRYING">
            <summary />
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.VideoAutoShow">
            <summary>
Gets or sets an indicator specifying that any video is shown automatically.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.VideoAutoTransmit">
            <summary>
Gets or sets an indicator specifying that any video capture is done automatically.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.VideoRateControlBandwidth">
            <summary>
Gets or sets specify the Upstream/outgoing bandwidth. If this is set to zero, the video stream
will use codec maximum bitrate setting. Default : 0.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.IceEnabled">
            <summary>
Gets or sets an indicator specifying that ice is enabled: default false.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.NoIceRtcp">
            <summary>
Gets or sets an indicator specifying that ice RTCP should not be used: default false.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.IsDefault">
            <summary>
Gets or sets an indicator specifying this account is the default.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.AuthCredentials">
            <summary>
Gets or sets the authentication credentials.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.PublishShutdownWaitMsec">
            <summary>
Gets or sets Maximum time to wait for unpublication transaction(s) to complete
during shutdown process, before sending unregistration.The library
tries to wait for the unpublication(un-PUBLISH) to complete before
sending REGISTER request to unregister the account, during library
shutdown process.If the value is set too short, it is possible that
the unregistration is sent before unpublication completes, causing
unpublication request to fail. Value is in milliseconds.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.PublishQueue">
            <summary>
Gets or sets specify whether the client publication session should queue the
PUBLISH request should there be another PUBLISH transaction still
pending.If this is set to false, the client will return error
on the PUBLISH request if there is another PUBLISH transaction still
in progress.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.PublishEnabled">
            <summary>
Gets or sets if this flag is set, the presence information of this account will
be PUBLISH-ed to the server where the account belongs.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.MWIExpirationSec">
            <summary>
Gets or sets specify the default expiration time (in seconds) for Message
Waiting Indication(RFC 3842) event subscription.This must not be zero.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.MessageWaitingIndication">
            <summary>
Gets or sets true to subscribe to message waiting indication events (RFC 3842).
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.MediaTransportPortRange">
            <summary>
Gets or sets specify the port range for socket binding, relative to the start
port number specified in MediaTransportPort that this setting is only
applicable when the start port number is non zero.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.MediaTransportPort">
            <summary>
Gets or sets UDP port number to bind locally. This setting MUST be specified
even when default port is desired.If the value is zero, the
transport will be bound to any available port, and application
can query the port by querying the transport info.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.SRTPSecureSignaling">
            <summary>
Gets or sets specify whether SRTP requires secure signaling to be used. This option
is only used when SRTPUse option is non-zero.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.SRTPUse">
            <summary>
Gets or sets specify whether secure media transport should be used for this account.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.IPv6Use">
            <summary>
Gets or sets specify whether IPv6 should be used on media. Default is not used.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.TimerSessExpiresSec">
            <summary>
Gets or sets specify Session Timer expiration period, in seconds.
Must not be lower than timerMinSE.Default is 1800.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.TimerMinSESec">
            <summary>
Gets or sets specify minimum Session Timer expiration period, in seconds.
Must not be lower than 90. Default is 90.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.DelayBeforeRefreshSec">
            <summary>
Gets or sets specify the number of seconds to refresh the client registration
before the registration expires.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.UnregWaitSec">
            <summary>
Gets or sets specify the maximum time to wait for unregistration requests to
complete during library shutdown sequence.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.FirstRetryIntervalSec">
            <summary>
Gets or sets specifies the interval for the first registration retry. The
registration retry is explained in RetryIntervalSec.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.TimeoutSec">
            <summary>
Gets or sets interval for registration, in seconds. If the value is zero,
default interval will be used 300 seconds.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.RetryIntervalSec">
            <summary>
Gets or sets Specify interval of auto registration retry upon registration failure
(including caused by transport problem), in second.Set to 0 to
disable auto re-registration. Note that if the registration retry
occurs because of transport failure, the first retry will be done
after FirstRetryIntervalSec seconds instead.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.RegisterOnAdd">
            <summary>
Gets or sets specify whether the account should register as soon as it is
added to the UA.Application can set this to false and control
the registration manually with Account.Registration().
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.DropCallsOnFail">
            <summary>
Gets or sets specify whether calls of the configured account should be dropped
after registration failure and an attempt of re-registration has also failed.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.Priority">
            <summary>
Gets or sets the account priority.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.SpPort">
            <summary>
Gets or sets the service provider host name or IP address.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.SpHost">
            <summary>
Gets or sets the service provider host name or IP address.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AccountConnection.AccountName">
            <summary>
Gets or sets the account name or service phone number.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.Dispose">
            <summary>
Account connection configuration.
</summary>
            <summary>
Account connection configuration.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
Account connection configuration.
</summary>
            <param name="accountName">The account name or service phone number.</param>
            <param name="spHost">The service provider host name or IP address.</param>
            <param name="username">The sip username.</param>
            <param name="password">The sip password.</param>
            <summary>
Account connection configuration.
</summary>
            <param name="accountName">The account name or service phone number.</param>
            <param name="spHost">The service provider host name or IP address.</param>
            <param name="username">The sip username.</param>
            <param name="password">The sip password.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AccountConnection.#ctor">
            <summary>
Account connection configuration.
</summary>
            <summary>
Account connection configuration.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.AccountConnection">
            <summary>
Account connection configuration.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.SRTP_Use">
            <summary>
Secure media transport type.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SRTP_MANDATORY">
            <summary>
Mandatory.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SRTP_OPTIONAL">
            <summary>
Optional.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SRTP_DISABLED">
            <summary>
Disabled.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.SRTP_SecureSignaling">
            <summary>
Secure media transport signaling.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SRTP_SECURESIGNALING_REQUIRES_END_TO_END">
            <summary>
SRTP requires secure end-to-end transport (SIPS).
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SRTP_SECURESIGNALING_REQUIRES">
            <summary>
SRTP requires secure transport such as TLS.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.SRTP_SECURESIGNALING_DISABLED">
            <summary>
SRTP does not require secure signaling.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.IPv6_Use">
            <summary>
Use IP v6.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.IPV6_ENABLED">
            <summary>
Enabled.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.IPV6_DISABLED">
            <summary>
Disabled.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AuthenticateCredentials.AuthCredentials">
            <summary>
Gets or sets the authenticate credentials.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthenticateCredentials.Dispose">
            <summary>
Authenticate credentials deconstructor.
</summary>
            <summary>
Authenticate credentials deconstructor.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthenticateCredentials.#ctor">
            <summary>
If registration is desired, normally there should
be at least one credential specified, to successfully authenticate
against the service provider. More credentials can be specified, for
example when the requests are expected to be challenged by the
proxies in the route set.
</summary>
            <summary>
If registration is desired, normally there should
be at least one credential specified, to successfully authenticate
against the service provider. More credentials can be specified, for
example when the requests are expected to be challenged by the
proxies in the route set.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.AuthenticateCredentials">
            <summary>
If registration is desired, normally there should
be at least one credential specified, to successfully authenticate
against the service provider. More credentials can be specified, for
example when the requests are expected to be challenged by the
proxies in the route set.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AuthCredInfo.DataType">
            <summary>
Gets or sets the type of data that is contained in the "data" field. Use 0 if the data
contains plain text password.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AuthCredInfo.Username">
            <summary>
Gets or sets the authentication user name.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AuthCredInfo.Scheme">
            <summary>
Gets or sets the authentication scheme (e.g. "digest").
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AuthCredInfo.Realm">
            <summary>
Gets or sets the Realm on which this credential is to be used. Use "*" to make
a credential that can be used to authenticate against any challenges.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.AuthCredInfo.Data">
            <summary>
Gets or sets the the data, which can be a plain text password or a hashed digest.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
Credential information. Credential contains information to authenticate against a service.
</summary>
            <param name="username">The sip username.</param>
            <param name="password">The sip password.</param>
            <param name="scheme">The authentication scheme (e.g. "digest").</param>
            <param name="realm">Realm on which this credential is to be used. Use "*" to make a credential that can be used to authenticate against any challenges.</param>
            <param name="dataType">Type of data that is contained in the "data" field. Use 0 if the data contains plain text password.</param>
            <summary>
Credential information. Credential contains information to authenticate against a service.
</summary>
            <param name="username">The sip username.</param>
            <param name="password">The sip password.</param>
            <param name="scheme">The authentication scheme (e.g. "digest").</param>
            <param name="realm">Realm on which this credential is to be used. Use "*" to make a credential that can be used to authenticate against any challenges.</param>
            <param name="dataType">Type of data that is contained in the "data" field. Use 0 if the data contains plain text password.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.#ctor(System.String,System.String)">
            <summary>
Credential information. Credential contains information to authenticate against a service.
</summary>
            <param name="username">The sip username.</param>
            <param name="password">The sip password.</param>
            <summary>
Credential information. Credential contains information to authenticate against a service.
</summary>
            <param name="username">The sip username.</param>
            <param name="password">The sip password.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.AuthCredInfo.#ctor">
            <summary>
Credential information. Credential contains information to authenticate against a service.
</summary>
            <summary>
Credential information. Credential contains information to authenticate against a service.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.AuthCredInfo">
            <summary>
Credential information. Credential contains information to authenticate against a service.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.set_UsageCount(System.UInt32)">
            <summary>
Gets or sets the current number of objects currently referencing this transport.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.get_UsageCount">
            <summary>
Gets or sets the current number of objects currently referencing this transport.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.set_Flags(System.UInt32)">
            <summary>
Gets or sets the transport flags.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.get_Flags">
            <summary>
Gets or sets the transport flags.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.set_LocalName(System.String)">
            <summary>
Gets or sets the local socket address name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.get_LocalName">
            <summary>
Gets or sets the local socket address name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.set_LocalAddress(System.String)">
            <summary>
Gets or sets the local socket address.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.get_LocalAddress">
            <summary>
Gets or sets the local socket address.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.set_Info(System.String)">
            <summary>
Gets or sets the transport info.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.get_Info">
            <summary>
Gets or sets the transport info.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.set_TypeName(System.String)">
            <summary>
Gets or sets the transport type name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.get_TypeName">
            <summary>
Gets or sets the transport type name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.set_Protocol(System.String)">
            <summary>
Gets or sets the transport protocol.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.get_Protocol">
            <summary>
Gets or sets the transport protocol.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.set_Transport(&lt;unknown type&gt;)">
            <summary>
Gets or sets the transport type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.get_Transport">
            <summary>
Gets or sets the transport type.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.set_TransportId(System.Int32)">
            <summary>
Gets or sets the transport identification.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.get_TransportId">
            <summary>
Gets or sets the transport identification.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.TransportInfo.UsageCount">
            <summary>
Gets or sets the current number of objects currently referencing this transport.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.TransportInfo.Flags">
            <summary>
Gets or sets the transport flags.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.TransportInfo.LocalName">
            <summary>
Gets or sets the local socket address name.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.TransportInfo.LocalAddress">
            <summary>
Gets or sets the local socket address.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.TransportInfo.Info">
            <summary>
Gets or sets the transport info.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.TransportInfo.TypeName">
            <summary>
Gets or sets the transport type name.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.TransportInfo.Protocol">
            <summary>
Gets or sets the transport protocol.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.TransportInfo.Transport">
            <summary>
Gets or sets the transport type.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.TransportInfo.TransportId">
            <summary>
Gets or sets the transport identification.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.TransportInfo.#ctor">
            <summary>
Transport info.
</summary>
            <summary>
Transport info.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.TransportInfo">
            <summary>
Transport info.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.TransportType">
            <summary>
Transport type; usage if flag.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TLS">
            <summary>
TLS transport.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.TCP">
            <summary>
TCP transport.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.UDP">
            <summary>
UDP transport.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipTxOption.set_Headers(Nequeo.Net.PjSip.SipHeader[])">
            <summary>
Gets or sets additional message headers to be included in the outgoing message.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipTxOption.get_Headers">
            <summary>
Gets or sets additional message headers to be included in the outgoing message.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipTxOption.set_MultipartContentType(Nequeo.Net.PjSip.SipMediaType)">
            <summary>
Gets or sets content type of the multipart body. If application wants to send
multipart message bodies, it puts the parts in multipartParts and set
the content type in multipartContentType.If the message already
contains a body, the body will be added to the multipart bodies.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipTxOption.get_MultipartContentType">
            <summary>
Gets or sets content type of the multipart body. If application wants to send
multipart message bodies, it puts the parts in multipartParts and set
the content type in multipartContentType.If the message already
contains a body, the body will be added to the multipart bodies.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipTxOption.set_TargetUri(System.String)">
            <summary>
Gets or sets optional remote target URI (i.e. Target header). If empty (""), the
target will be set to the remote URI(To header). At the moment this
field is only used when sending initial INVITE and MESSAGE requests.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipTxOption.get_TargetUri">
            <summary>
Gets or sets optional remote target URI (i.e. Target header). If empty (""), the
target will be set to the remote URI(To header). At the moment this
field is only used when sending initial INVITE and MESSAGE requests.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipTxOption.set_MsgBody(System.String)">
            <summary>
Gets or sets Optional message body to be added to the message, only when the
message doesn't have a body.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipTxOption.get_MsgBody">
            <summary>
Gets or sets Optional message body to be added to the message, only when the
message doesn't have a body.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipTxOption.set_ContentType(System.String)">
            <summary>
Gets or sets MIME type of the message body, if application specifies the messageBody
in this structure.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipTxOption.get_ContentType">
            <summary>
Gets or sets MIME type of the message body, if application specifies the messageBody
in this structure.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipTxOption.Headers">
            <summary>
Gets or sets additional message headers to be included in the outgoing message.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipTxOption.MultipartContentType">
            <summary>
Gets or sets content type of the multipart body. If application wants to send
multipart message bodies, it puts the parts in multipartParts and set
the content type in multipartContentType.If the message already
contains a body, the body will be added to the multipart bodies.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipTxOption.TargetUri">
            <summary>
Gets or sets optional remote target URI (i.e. Target header). If empty (""), the
target will be set to the remote URI(To header). At the moment this
field is only used when sending initial INVITE and MESSAGE requests.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipTxOption.MsgBody">
            <summary>
Gets or sets Optional message body to be added to the message, only when the
message doesn't have a body.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipTxOption.ContentType">
            <summary>
Gets or sets MIME type of the message body, if application specifies the messageBody
in this structure.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipTxOption.#ctor">
            <summary>
This structure describes an incoming SIP message. It corresponds to the
rx data structure in SIP library.
</summary>
            <summary>
This structure describes an incoming SIP message. It corresponds to the
rx data structure in SIP library.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.SipTxOption">
            <summary>
This structure describes an incoming SIP message. It corresponds to the
rx data structure in SIP library.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipHeader.Value">
            <summary>
Gets or sets the header value.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipHeader.Name">
            <summary>
Gets or sets the header name.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipHeader.#ctor">
            <summary>
Simple SIP header.
</summary>
            <summary>
Call settings.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.SipHeader">
            <summary>
Simple SIP header.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipMediaType.Type">
            <summary>
 Gets or sets the media type.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipMediaType.SubType">
            <summary>
Gets or sets the media subtype.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipMediaType.#ctor">
            <summary>
SIP media type containing type and subtype. For example, for
"application/sdp", the type is "application" and the subtype is "sdp".
</summary>
            <summary>
SIP media type containing type and subtype. For example, for
"application/sdp", the type is "application" and the subtype is "sdp".
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.SipMediaType">
            <summary>
SIP media type containing type and subtype. For example, for
"application/sdp", the type is "application" and the subtype is "sdp".
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTypingIndicationParam.set_RxData(Nequeo.Net.PjSip.SipRxData)">
            <summary>
Gets or sets the incoming response that causes this callback to be called.
If the transaction fails because of time out or transport error,
the content will be empty.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTypingIndicationParam.get_RxData">
            <summary>
Gets or sets the incoming response that causes this callback to be called.
If the transaction fails because of time out or transport error,
the content will be empty.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTypingIndicationParam.set_ToUri(System.String)">
            <summary>
Gets or sets to URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTypingIndicationParam.get_ToUri">
            <summary>
Gets or sets to URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTypingIndicationParam.set_IsTyping(System.Boolean)">
            <summary>
Gets or sets an indicator if sender is typing.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTypingIndicationParam.get_IsTyping">
            <summary>
Gets or sets an indicator if sender is typing.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTypingIndicationParam.set_FromUri(System.String)">
            <summary>
Gets or sets sender from URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTypingIndicationParam.get_FromUri">
            <summary>
Gets or sets sender from URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTypingIndicationParam.set_ContactUri(System.String)">
            <summary>
Gets or sets Contact URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTypingIndicationParam.get_ContactUri">
            <summary>
Gets or sets Contact URI.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnTypingIndicationParam.RxData">
            <summary>
Gets or sets the incoming response that causes this callback to be called.
If the transaction fails because of time out or transport error,
the content will be empty.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnTypingIndicationParam.ToUri">
            <summary>
Gets or sets to URI.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnTypingIndicationParam.IsTyping">
            <summary>
Gets or sets an indicator if sender is typing.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnTypingIndicationParam.FromUri">
            <summary>
Gets or sets sender from URI.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.OnTypingIndicationParam.ContactUri">
            <summary>
Gets or sets Contact URI.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.OnTypingIndicationParam.#ctor">
            <summary>
On typing indication paramters.
</summary>
            <summary>
On typing indication paramters.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.OnTypingIndicationParam">
            <summary>
On typing indication paramters.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipRxData.WholeMsg">
            <summary>
Gets or sets the whole message data as a string, containing both the header section
and message body section.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipRxData.SrcAddress">
            <summary>
Gets or sets the source address of the message.
</summary>
        </member>
        <member name="P:Nequeo.Net.PjSip.SipRxData.Info">
            <summary>
Gets or sets a short info string describing the request, which normally contains
the request method and its CSeq.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.SipRxData.#ctor">
            <summary>
This structure describes an incoming SIP message. It corresponds to the
rx data structure in SIP library.
</summary>
            <summary>
This structure describes an incoming SIP message. It corresponds to the
rx data structure in SIP library.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.SipRxData">
            <summary>
This structure describes an incoming SIP message. It corresponds to the
rx data structure in SIP library.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ApplicationMedia.#ctor">
            <summary>
Application media.
</summary>
            <summary>
Application media.
</summary>
        </member>
        <member name="M:Nequeo.Net.PjSip.ApplicationMedia.Dispose">
            <summary>
Application media deconstructor.
</summary>
            <summary>
Application media deconstructor.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.ApplicationMedia">
            <summary>
Application media.
</summary>
        </member>
        <member name="T:pj.VidCodecParam">
 Detailed codec attributes used in configuring a codec and in querying
 the capability of codec factories. 

 Please note that codec parameter also contains SDP specific setting,
 #decFmtp and #encFmtp, which may need to be set appropriately based on
 the effective setting. See each codec documentation for more detail.

</member>
        <member name="D:pj.CodecFmtpVector">
Array of codec fmtp 
</member>
        <member name="T:pj.CodecFmtp">
Structure of codec specific parameters which contains name=value pairs.
The codec specific parameters are to be used with SDP according to
the standards (e.g: RFC 3555) in SDP 'a=fmtp' attribute.

</member>
        <member name="D:pj.CodecParam">
Codec parameters, corresponds to pjmedia_codec_param.

</member>
        <member name="D:pj.CodecInfoVector">
Array of codec info 
</member>
        <member name="M:pj.CodecInfo.fromPj(pjsua_codec_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Construct from pjsua_codec_info.

</member>
        <member name="F:pj.CodecInfo.desc">
Codec description.

</member>
        <member name="F:pj.CodecInfo.priority">
Codec priority (integer 0-255).

</member>
        <member name="F:pj.CodecInfo.codecId">
Codec unique identification.

</member>
        <member name="T:pj.CodecInfo">
This structure describes codec information.

</member>
        <member name="M:pj.VidDevManager.Dispose">
Destructor.

</member>
        <member name="M:pj.VidDevManager.#ctor">
Constructor.

</member>
        <member name="M:pj.VidDevManager.setCaptureOrient(System.Int32,pjmedia_orient,System.Boolean)">
 This will configure video orientation of the video capture device.
 If the device is currently active (i.e. if there is a video call
 using the device or a video preview has been started), the method
 will forward the setting to the video device instance to be applied
 immediately, if it supports it.

 The setting will be saved for future opening of the video device,
 if the "keep" argument is set to true. If the video device is
 currently inactive, and the "keep" argument is false, this method
 will throw Error.

 @param dev_id	The video device id
 @param orient	The video orientation.
 @param keep	Specify whether the setting is to be kept for
 			future use.


</member>
        <member name="M:pj.VidDevManager.isCaptureActive(System.Int32)">
 Check whether the video capture device is currently active, i.e. if
 a video preview has been started or there is a video call using
 the device.    

 @param dev_id	The video device id
 
 @return		True if it's active.

</member>
        <member name="M:pj.VidDevManager.switchDev(System.Int32,pj.VideoSwitchParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 This will configure fast switching to another video device.
 If video device is currently active, the method will forward the setting
 to the video device instance to be applied immediately, if it
 supports it.

 This method is only valid if the device has
 PJMEDIA_VID_DEV_CAP_SWITCH capability in VideoDevInfo.caps flags,
 otherwise Error will be thrown.

 @param dev_id	The video device id.
 @param param	The video switch param.

</member>
        <member name="M:pj.VidDevManager.getOutputWindowFlags(System.Int32)">
 Get the window output flags capability to the video device.
 If video device is currently active, the method will forward the request
 to the video device. If video device is currently inactive, and if
 application had previously set the setting and mark the setting as kept,
 then that setting will be returned. Otherwise, this method will
 raise error.

 This method is only valid if the device has
 PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS capability in VideoDevInfo.caps 
 flags, otherwise Error will be thrown.

 @param dev_id	The video device id.
 @return keep	The video format.

</member>
        <member name="M:pj.VidDevManager.setOutputWindowFlags(System.Int32,System.Int32,System.Boolean)">
 This will configure fast switching to another video device.
 If video device is currently active, the method will forward the setting
 to the video device instance to be applied immediately, if it
 supports it.

 This method is only valid if the device has 
 PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW_FLAGS capability in VideoDevInfo.caps 
 flags, otherwise Error will be thrown.
 
 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the video device to be
 used.

 @param dev_id	The video device id.
 @param flags	The video window flag.
 @param keep	Specify whether the setting is to be kept for
 			future use.

</member>
        <member name="M:pj.VidDevManager.getInputScale(System.Int32)">
 Get the video input scale capability to the video device.
 If video device is currently active, the method will forward the request
 to the video device. If video device is currently inactive, and if
 application had previously set the setting and mark the setting as kept,
 then that setting will be returned. Otherwise, this method will
 raise error.

 This method is only valid if the device has
 PJMEDIA_VID_DEV_CAP_FORMAT capability in VideoDevInfo.caps flags,
 otherwise Error will be thrown.

 @param dev_id	The video device id.
 @return keep	The video format.

</member>
        <member name="M:pj.VidDevManager.setInputScale(System.Int32,pj.MediaSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 This will configure video format capability to the video device.
 If video device is currently active, the method will forward the setting
 to the video device instance to be applied immediately, if it
 supports it.

 This method is only valid if the device has
 PJMEDIA_VID_DEV_CAP_INPUT_SCALE capability in VideoDevInfo.caps flags,
 otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the video device to be
 used.

 @param dev_id	The video device id.
 @param scale	The video scale.
 @param keep	Specify whether the setting is to be kept for
 			future use.

</member>
        <member name="M:pj.VidDevManager.getFormat(System.Int32)">
 Get the video format capability to the video device.
 If video device is currently active, the method will forward the request
 to the video device. If video device is currently inactive, and if 
 application had previously set the setting and mark the setting as kept, 
 then that setting will be returned. Otherwise, this method will 
 raise error.

 This method is only valid if the device has
 PJMEDIA_VID_DEV_CAP_FORMAT capability in VideoDevInfo.caps flags,
 otherwise Error will be thrown.

 @param dev_id	The video device id.
 @return keep	The video format.

</member>
        <member name="M:pj.VidDevManager.setFormat(System.Int32,pj.MediaFormatVideo!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 This will configure video format capability to the video device. 
 If video device is currently active, the method will forward the setting 
 to the video device instance to be applied immediately, if it 
 supports it.

 This method is only valid if the device has
 PJMEDIA_VID_DEV_CAP_FORMAT capability in VideoDevInfo.caps flags,
 otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the video device to be
 used.

 @param dev_id	The video device id.	
 @param format	The video format.
 @param keep	Specify whether the setting is to be kept for
 			future use.

</member>
        <member name="M:pj.VidDevManager.capName(pjmedia_vid_dev_cap)">
 Get string info for the specified capability.

 @param cap	The capability ID.

 @return		Capability name.

</member>
        <member name="M:pj.VidDevManager.lookupDev(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Lookup device index based on the driver and device name.

 @param drv_name	The driver name.
 @param dev_name	The device name.

 @return		The device ID. If the device is not found, 
			Error will be thrown.

</member>
        <member name="M:pj.VidDevManager.enumDev">
 Enum all video devices installed in the system.

 @return		The list of video device info

</member>
        <member name="M:pj.VidDevManager.getDevInfo(System.Int32)">
 Retrieve the video device info for the specified device index.     

 @param dev_id	The video device id
 
 @return		The list of video device info

</member>
        <member name="M:pj.VidDevManager.getDevCount">
 Get the number of video devices installed in the system.

 @return		The number of devices.

</member>
        <member name="M:pj.VidDevManager.refreshDevs">
Refresh the list of video devices installed in the system. This function
will only refresh the list of video device so all active video streams
will be unaffected. After refreshing the device list, application MUST
make sure to update all index references to video devices (i.e. all
variables of type pjmedia_vid_dev_index) before calling any function
that accepts video device index as its parameter.

</member>
        <member name="T:pj.VidDevManager">
Video device manager.

</member>
        <member name="F:pj.VideoSwitchParam.target_id">
Target device ID to switch to. Once the switching is successful, the
video stream will use this device and the old device will be closed.

</member>
        <member name="T:pj.VideoSwitchParam">
Parameter for switching device with PJMEDIA_VID_DEV_CAP_SWITCH capability.

</member>
        <member name="D:pj.VideoDevInfoVector">
Array of video device info 
</member>
        <member name="M:pj.VideoDevInfo.Dispose">
Destructor.

</member>
        <member name="M:pj.VideoDevInfo.fromPj(pjmedia_vid_dev_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Construct from pjmedia_vid_dev_info.

</member>
        <member name="F:pj.VideoDevInfo.fmt">
Array of supported video formats. Some fields in each supported video
format may be set to zero or of "unknown" value, to indicate that the
value is unknown or should be ignored. When these value are not set
to zero, it indicates that the exact format combination is being used.

</member>
        <member name="F:pj.VideoDevInfo.caps">
Device capabilities, as bitmask combination of #pjmedia_vid_dev_cap 

</member>
        <member name="F:pj.VideoDevInfo.dir">
The supported direction of the video device, i.e. whether it supports
capture only, render only, or both.

</member>
        <member name="F:pj.VideoDevInfo.driver">
The underlying driver name

</member>
        <member name="F:pj.VideoDevInfo.name">
The device name

</member>
        <member name="F:pj.VideoDevInfo.id">
The device ID

</member>
        <member name="T:pj.VideoDevInfo">
Video device information structure.

</member>
        <member name="M:pj.VideoPreview.stop">
Stop video preview.

</member>
        <member name="M:pj.VideoPreview.start(pj.VideoPreviewOpParam!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Start video preview window for the specified capture device.

 @param p		Video preview parameters. 

</member>
        <member name="M:pj.VideoPreview.hasNative">
 Determine if the specified video input device has built-in native
 preview capability. This is a convenience function that is equal to
 querying device's capability for PJMEDIA_VID_DEV_CAP_INPUT_PREVIEW
 capability.

 @return		true if it has.

</member>
        <member name="M:pj.VideoPreview.#ctor(System.Int32)">
Constructor

</member>
        <member name="T:pj.VideoPreview">
Video Preview

</member>
        <member name="M:pj.VideoPreviewOpParam.toPj">
Convert to pjsip

</member>
        <member name="M:pj.VideoPreviewOpParam.fromPj(pjsua_vid_preview_param!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Convert from pjsip

</member>
        <member name="M:pj.VideoPreviewOpParam.#ctor">
Default constructor initializes with default values.

</member>
        <member name="F:pj.VideoPreviewOpParam.window">
Optional output window to be used to display the video preview.
This parameter will only be used if the video device supports
PJMEDIA_VID_DEV_CAP_OUTPUT_WINDOW capability and the capability
is not read-only.

</member>
        <member name="F:pj.VideoPreviewOpParam.format">
Media format. If left unitialized, this parameter will not be used.

</member>
        <member name="F:pj.VideoPreviewOpParam.windowFlags">
 Window flags.  The value is a bitmask combination of
 \a pjmedia_vid_dev_wnd_flag.

 Default: 0.

</member>
        <member name="F:pj.VideoPreviewOpParam.show">
 Show window initially.

 Default: PJ_TRUE.

</member>
        <member name="F:pj.VideoPreviewOpParam.rendId">
 Device ID for the video renderer to be used for rendering the
 capture stream for preview. This parameter is ignored if native
 preview is being used.

 Default: PJMEDIA_VID_DEFAULT_RENDER_DEV

</member>
        <member name="T:pj.VideoPreviewOpParam">
This structure contains parameters for VideoPreview::start()

</member>
        <member name="M:pj.VideoWindow.setWindow(pj.VideoWindowHandle!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Set output window. This operation is valid only when the underlying
 video device supports PJMEDIA_VIDEO_DEV_CAP_OUTPUT_WINDOW capability AND
 allows the output window to be changed on-the-fly, otherwise Error will
 be thrown. Currently it is only supported on Android.

 @param win		The new output window.

</member>
        <member name="M:pj.VideoWindow.rotate(System.Int32)">
 Rotate the video window. This function will change the video orientation
 and also possibly the video window size (width and height get swapped).
 This operation is not valid for native windows (VideoWindowInfo.isNative
 =true), on which native windowing API must be used instead.

 @param angle		The rotation angle in degrees, must be
				multiple of 90.
				Specify positive value for clockwise rotation or
				negative value for counter-clockwise rotation.

</member>
        <member name="M:pj.VideoWindow.setSize(pj.MediaSize!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Resize window. This operation is not valid for native windows
 (VideoWindowInfo.isNative=true), on which native windowing API
 must be used instead.

 @param size		The new window size.


</member>
        <member name="M:pj.VideoWindow.setPos(pj.MediaCoordinate!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Set video window position. This operation is not valid for native windows
 (VideoWindowInfo.isNative=true), on which native windowing API
 must be used instead.

 @param pos		The window position.


</member>
        <member name="M:pj.VideoWindow.Show(System.Boolean)">
 Show or hide window. This operation is not valid for native windows
 (VideoWindowInfo.isNative=true), on which native windowing API
 must be used instead.

 @param show		Set to true to show the window, false to
 				hide the window.


</member>
        <member name="M:pj.VideoWindow.getInfo">
 Get window info.

 @return			video window info.

</member>
        <member name="M:pj.VideoWindow.#ctor(System.Int32)">
Constructor

</member>
        <member name="T:pj.VideoWindow">
Video window.

</member>
        <member name="F:pj.VideoWindowInfo.size">
Window size.

</member>
        <member name="F:pj.VideoWindowInfo.pos">
Window position.

</member>
        <member name="F:pj.VideoWindowInfo.show">
Window show status. The window is hidden if false.

</member>
        <member name="F:pj.VideoWindowInfo.renderDeviceId">
Renderer device ID.

</member>
        <member name="F:pj.VideoWindowInfo.winHandle">
Video window handle.

</member>
        <member name="F:pj.VideoWindowInfo.isNative">
Flag to indicate whether this window is a native window,
such as created by built-in preview device. If this field is
true, only the video window handle field of this
structure is valid.

</member>
        <member name="T:pj.VideoWindowInfo">
This structure describes video window info.

</member>
        <member name="F:pj.VideoWindowHandle.handle">
The window handle.

</member>
        <member name="F:pj.VideoWindowHandle.type">
The window handle type.

</member>
        <member name="T:pj.VideoWindowHandle">
Video window handle.

</member>
        <member name="T:pj.WindowHandle">
Window handle.

</member>
        <member name="T:pj.MediaSize">
Representation of media size.

</member>
        <member name="T:pj.MediaCoordinate">
Representation of media coordinate.

</member>
        <member name="M:pj.AudDevManager.Dispose">
Destructor.

</member>
        <member name="M:pj.AudDevManager.#ctor">
Constructor.

</member>
        <member name="M:pj.AudDevManager.getPlc">
 Get the audio packet loss concealment capability of the sound device
 being used. If sound device is currently active, the method will
 forward the request to the sound device. If sound device is currently
 inactive, and if application had previously set the setting and mark
 the setting as kept, then that setting will be returned. Otherwise,
 this method will raise error.

 This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_PLC
 capability in AudioDevInfo.caps flags, otherwise Error will be thrown.

 @return	    		The audio packet loss concealment feature.


</member>
        <member name="M:pj.AudDevManager.setPlc(System.Boolean,System.Boolean)">
 This will configure audio packet loss concealment capability to
 the sound device being used. If sound device is currently active,
 the method will forward the setting to the sound device instance
 to be applied immediately, if it supports it.

 This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_PLC
 capability in AudioDevInfo.caps flags, otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the sound device to be
 used.

 @param enable		Enable/disable packet loss concealment
				feature. Set true to enable.
 @param keep		Specify whether the setting is to be kept for
				future use.


</member>
        <member name="M:pj.AudDevManager.getCng">
 Get the audio comfort noise generation capability of the sound device
 being used. If sound device is currently active, the method will
 forward the request to the sound device. If sound device is currently
 inactive, and if application had previously set the setting and mark
 the setting as kept, then that setting will be returned. Otherwise,
 this method will raise error.

 This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_CNG
 capability in AudioDevInfo.caps flags, otherwise Error will be thrown.

 @return	    		The audio comfort noise generation feature.


</member>
        <member name="M:pj.AudDevManager.setCng(System.Boolean,System.Boolean)">
 This will configure audio comfort noise generation capability to
 the sound device being used. If sound device is currently active,
 the method will forward the setting to the sound device instance
 to be applied immediately, if it supports it.

 This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_CNG
 capability in AudioDevInfo.caps flags, otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the sound device to be
 used.

 @param enable		Enable/disable comfort noise generation
				feature. Set true to enable.
 @param keep		Specify whether the setting is to be kept for
				future use.


</member>
        <member name="M:pj.AudDevManager.getVad">
 Get the audio voice activity detection capability of the sound device
 being used. If sound device is currently active, the method will
 forward the request to the sound device. If sound device is currently
 inactive, and if application had previously set the setting and mark
 the setting as kept, then that setting will be returned. Otherwise,
 this method will raise error.

 This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_VAD
 capability in AudioDevInfo.caps flags, otherwise Error will be thrown.

 @return	    		The audio voice activity detection feature.


</member>
        <member name="M:pj.AudDevManager.setVad(System.Boolean,System.Boolean)">
 This will configure audio voice activity detection capability to
 the sound device being used. If sound device is currently active,
 the method will forward the setting to the sound device instance
 to be applied immediately, if it supports it.

 This method is only valid if the device has PJMEDIA_AUD_DEV_CAP_VAD
 capability in AudioDevInfo.caps flags, otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the sound device to be
 used.

 @param enable		Enable/disable voice activity detection
				feature. Set true to enable.
 @param keep		Specify whether the setting is to be kept for
				future use.


</member>
        <member name="M:pj.AudDevManager.getOutputRoute">
 Get the audio output route capability of the sound device being used.
 If sound device is currently active, the method will forward the
 request to the sound device. If sound device is currently inactive,
 and if application had previously set the setting and mark the setting
 as kept, then that setting will be returned. Otherwise, this method
 will raise error.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_OUTPUT_ROUTE capability in AudioDevInfo.caps
 flags, otherwise Error will be thrown.

 @return	    		The audio output route.


</member>
        <member name="M:pj.AudDevManager.setOutputRoute(pjmedia_aud_dev_route,System.Boolean)">
 This will configure audio output route capability to the sound device
 being used. If sound device is currently active, the method will
 forward the setting to the sound device instance to be applied
 immediately, if it supports it.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_OUTPUT_ROUTE capability in AudioDevInfo.caps
 flags, otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the sound device to be
 used.

 @param route		The audio output route.
 @param keep		Specify whether the setting is to be kept
 				for future use.


</member>
        <member name="M:pj.AudDevManager.getInputRoute">
 Get the audio input route capability of the sound device being used.
 If sound device is currently active, the method will forward the
 request to the sound device. If sound device is currently inactive,
 and if application had previously set the setting and mark the setting
 as kept, then that setting will be returned. Otherwise, this method
 will raise error.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_INPUT_ROUTE capability in AudioDevInfo.caps
 flags, otherwise Error will be thrown.

 @return	    		The audio input route.


</member>
        <member name="M:pj.AudDevManager.setInputRoute(pjmedia_aud_dev_route,System.Boolean)">
 This will configure audio input route capability to the sound device
 being used. If sound device is currently active, the method will
 forward the setting to the sound device instance to be applied
 immediately, if it supports it.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_INPUT_ROUTE capability in AudioDevInfo.caps
 flags, otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the sound device to be
 used.

 @param route		The audio input route.
 @param keep		Specify whether the setting is to be kept
 				for future use.


</member>
        <member name="M:pj.AudDevManager.getOutputSignal">
 Get the audio output signal level capability of the sound device being
 used. If sound device is currently active, the method will forward the
 request to the sound device. If sound device is currently inactive,
 and if application had previously set the setting and mark the setting
 as kept, then that setting will be returned. Otherwise, this method
 will raise error.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_OUTPUT_SIGNAL_METER capability in AudioDevInfo.caps
 flags, otherwise Error will be thrown.

 @return	    		The audio output signal level, in percent.


</member>
        <member name="M:pj.AudDevManager.getInputSignal">
 Get the audio input signal level capability of the sound device being
 used. If sound device is currently active, the method will forward the
 request to the sound device. If sound device is currently inactive,
 and if application had previously set the setting and mark the setting
 as kept, then that setting will be returned. Otherwise, this method
 will raise error.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_INPUT_SIGNAL_METER capability in AudioDevInfo.caps
 flags, otherwise Error will be thrown.

 @return	    		The audio input signal level, in percent.


</member>
        <member name="M:pj.AudDevManager.getOutputVolume">
 Get the audio output volume level capability of the sound device being
 used. If sound device is currently active, the method will forward the
 request to the sound device. If sound device is currently inactive,
 and if application had previously set the setting and mark the setting
 as kept, then that setting will be returned. Otherwise, this method
 will raise error.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_OUTPUT_VOLUME_SETTING capability in AudioDevInfo.caps
 flags, otherwise Error will be thrown.

 @return	    		The audio output volume level, in percent.


</member>
        <member name="M:pj.AudDevManager.setOutputVolume(System.UInt32,System.Boolean)">
 This will configure audio output volume level capability to the sound
 device being used. If sound device is currently active, the method will
 forward the setting to the sound device instance to be applied
 immediately, if it supports it.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_OUTPUT_VOLUME_SETTING capability in AudioDevInfo.caps
 flags, otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the sound device to be
 used.

 @param volume		The output volume level, in percent.
 @param keep		Specify whether the setting is to be kept
 				for future use.


</member>
        <member name="M:pj.AudDevManager.getInputVolume">
     * Get the audio input volume level capability of the sound device being
     * used. If sound device is currently active, the method will forward the
     * request to the sound device. If sound device is currently inactive,
     * and if application had previously set the setting and mark the setting
     * as kept, then that setting will be returned. Otherwise, this method
     * will raise error.
     *
     * This method is only valid if the device has
     * PJMEDIA_AUD_DEV_CAP_INPUT_VOLUME_SETTING capability in AudioDevInfo.caps
     * flags, otherwise Error will be thrown.     *

     * @return	    		The audio input volume level, in percent.
     *

</member>
        <member name="M:pj.AudDevManager.setInputVolume(System.UInt32,System.Boolean)">
 This will configure audio input volume level capability to the
 sound device being used.
 If sound device is currently active, the method will forward the
 setting to the sound device instance to be applied immediately,
 if it supports it.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_INPUT_VOLUME_SETTING capability in AudioDevInfo.caps
 flags, otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the sound device to be
 used.

 @param volume		The input volume level, in percent.
 @param keep		Specify whether the setting is to be kept for
 				future use.


</member>
        <member name="M:pj.AudDevManager.getOutputLatency">
 Get the audio output latency control or query capability of the sound
 device being used. If sound device is currently active, the method will
 forward the request to the sound device. If sound device is currently
 inactive, and if application had previously set the setting and mark the
 setting as kept, then that setting will be returned. Otherwise, this
 method will raise error.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_OUTPUT_LATENCY capability in AudioDevInfo.caps flags,
 otherwise Error will be thrown.

 @return	    		The audio output latency.


</member>
        <member name="M:pj.AudDevManager.setOutputLatency(System.UInt32,System.Boolean)">
 This will configure audio output latency control or query capability to
 the sound device being used. If sound device is currently active,
 the method will forward the setting to the sound device instance to be
 applied immediately, if it supports it.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_OUTPUT_LATENCY capability in AudioDevInfo.caps flags,
 otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the sound device to be
 used.

 @param latency_msec    	The output latency.
 @param keep		Specify whether the setting is to be kept
 				for future use.


</member>
        <member name="M:pj.AudDevManager.getInputLatency">
 Get the audio input latency control or query capability of the sound
 device being used. If sound device is currently active, the method will
 forward the request to the sound device. If sound device is currently
 inactive, and if application had previously set the setting and mark the
 setting as kept, then that setting will be returned. Otherwise, this
 method will raise error.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_INPUT_LATENCY capability in AudioDevInfo.caps flags,
 otherwise Error will be thrown.

 @return	    		The audio input latency.


</member>
        <member name="M:pj.AudDevManager.setInputLatency(System.UInt32,System.Boolean)">
 This will configure audio input latency control or query capability to
 the sound device being used. If sound device is currently active,
 the method will forward the setting to the sound device instance to be
 applied immediately, if it supports it.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_INPUT_LATENCY capability in AudioDevInfo.caps flags,
 otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the sound device to be
 used.

 @param latency_msec	The input latency.
 @param keep		Specify whether the setting is to be kept
				for future use.

</member>
        <member name="M:pj.AudDevManager.getExtFormat">
 Get the audio format capability (other than PCM) of the sound device
 being used. If sound device is currently active, the method will forward
 the request to the sound device. If sound device is currently inactive,
 and if application had previously set the setting and mark the setting
 as kept, then that setting will be returned. Otherwise, this method
 will raise error.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_EXT_FORMAT capability in AudioDevInfo.caps flags,
 otherwise Error will be thrown.

 @return	    		The audio format.


</member>
        <member name="M:pj.AudDevManager.setExtFormat(pj.MediaFormatAudio!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 This will configure audio format capability (other than PCM) to the
 sound device being used. If sound device is currently active, the method
 will forward the setting to the sound device instance to be applied
 immediately, if it supports it.

 This method is only valid if the device has
 PJMEDIA_AUD_DEV_CAP_EXT_FORMAT capability in AudioDevInfo.caps flags,
 otherwise Error will be thrown.

 Note that in case the setting is kept for future use, it will be applied
 to any devices, even when application has changed the sound device to be
 used.

 @param format		The audio format.
 @param keep		Specify whether the setting is to be kept for
 				future use.


</member>
        <member name="M:pj.AudDevManager.capName(pjmedia_aud_dev_cap)">
 Get string info for the specified capability.

 @param cap		The capability ID.

 @return			Capability name.

</member>
        <member name="M:pj.AudDevManager.lookupDev(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Lookup device index based on the driver and device name.

 @param drv_name		The driver name.
 @param dev_name		The device name.

 @return			The device ID. If the device is not found,
 				Error will be thrown.

</member>
        <member name="M:pj.AudDevManager.getDevInfo(System.Int32)">
 Get device information.

 @param id		The audio device ID.

 @return			The device information which will be filled in
 				by this method once it returns successfully.

</member>
        <member name="M:pj.AudDevManager.getDevCount">
 Get the number of sound devices installed in the system.

 @return 			The number of sound devices installed in the
 				system.


</member>
        <member name="M:pj.AudDevManager.refreshDevs">
 Refresh the list of sound devices installed in the system. This method
 will only refresh the list of audio device so all active audio streams
 will be unaffected. After refreshing the device list, application MUST
 make sure to update all index references to audio devices before calling
 any method that accepts audio device index as its parameter.


</member>
        <member name="M:pj.AudDevManager.sndIsActive">
Check whether the sound device is currently active. The sound device
may be inactive if the application has set the auto close feature to
non-zero (the sndAutoCloseTime setting in MediaConfig), or
if null sound device or no sound device has been configured via the
setNoDev() function.

</member>
        <member name="M:pj.AudDevManager.getEcTail">
 Get current echo canceller tail length.

 @return			The EC tail length in milliseconds,
				If AEC is disabled, the value will be zero.

</member>
        <member name="M:pj.AudDevManager.setEcOptions(System.UInt32,System.UInt32)">
 Change the echo cancellation settings.

 The behavior of this function depends on whether the sound device is
 currently active, and if it is, whether device or software AEC is
 being used.

 If the sound device is currently active, and if the device supports AEC,
 this function will forward the change request to the device and it will
 be up to the device on whether support the request. If software AEC is
 being used (the software EC will be used if the device does not support
 AEC), this function will change the software EC settings. In all cases,
 the setting will be saved for future opening of the sound device.

 If the sound device is not currently active, this will only change the
 default AEC settings and the setting will be applied next time the
 sound device is opened.

 @param tail_msec		The tail length, in miliseconds. Set to zero to
				disable AEC.
 @param options		Options to be passed to pjmedia_echo_create().
				Normally the value should be zero.


</member>
        <member name="M:pj.AudDevManager.setSndDevMode(System.UInt32)">
 Set sound device mode.
 
 @param mode		The sound device mode, as bitmask combination 
				of #pjsua_snd_dev_mode


</member>
        <member name="M:pj.AudDevManager.setNoDev">
 Disconnect the main conference bridge from any sound devices, and let
 application connect the bridge to it's own sound device/master port.

 @return			The port interface of the conference bridge,
				so that application can connect this to it's
				own sound device or master port.

</member>
        <member name="M:pj.AudDevManager.setNullDev">
 Set pjsua to use null sound device. The null sound device only provides
 the timing needed by the conference bridge, and will not interract with
 any hardware.


</member>
        <member name="M:pj.AudDevManager.enumDev">
 Enum all audio devices installed in the system.

 @return			The list of audio device info.

</member>
        <member name="M:pj.AudDevManager.setPlaybackDev(System.Int32)">
 Select or change playback sound device. Application may call this
 function at any time to replace current sound device. Calling this 
 method will not change the state of the sound device (opened/closed).
 Note that this method will override the mode set by setSndDevMode().

 @param playback_dev   	Device ID of the playback device.

</member>
        <member name="M:pj.AudDevManager.setCaptureDev(System.Int32)">
 Select or change capture sound device. Application may call this
 function at any time to replace current sound device. Calling this 
 method will not change the state of the sound device (opened/closed).
 Note that this method will override the mode set by setSndDevMode().

 @param capture_dev   	Device ID of the capture device.

</member>
        <member name="M:pj.AudDevManager.getPlaybackDevMedia">
 Get the AudioMedia of the speaker/playback audio device.

 @return			Audio media for the speaker/playback device.

</member>
        <member name="M:pj.AudDevManager.getPlaybackDev">
 Get currently active playback sound devices. If sound devices has not
 been created, it is possible that the function returns -1 as device IDs.

 @return 			Device ID of the playback device.

</member>
        <member name="M:pj.AudDevManager.getCaptureDevMedia">
 Get the AudioMedia of the capture audio device.

 @return			Audio media for the capture device.

</member>
        <member name="M:pj.AudDevManager.getCaptureDev">
 Get currently active capture sound devices. If sound devices has not been
 created, it is possible that the function returns -1 as device IDs.

 @return 			Device ID of the capture device.

</member>
        <member name="T:pj.AudDevManager">
Audio device manager.

</member>
        <member name="D:pj.AudioDevInfoVector">
Array of audio device info 
</member>
        <member name="M:pj.AudioDevInfo.Dispose">
Destructor.

</member>
        <member name="M:pj.AudioDevInfo.fromPj(pjmedia_aud_dev_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Construct from pjmedia_aud_dev_info.

</member>
        <member name="F:pj.AudioDevInfo.extFmt">
Array of supported extended audio formats

</member>
        <member name="F:pj.AudioDevInfo.routes">
Supported audio device routes, as bitmask combination of
pjmedia_aud_dev_route. The value may be zero if the device
does not support audio routing.

</member>
        <member name="F:pj.AudioDevInfo.caps">
Device capabilities, as bitmask combination of pjmedia_aud_dev_cap.

</member>
        <member name="F:pj.AudioDevInfo.driver">
The underlying driver name

</member>
        <member name="F:pj.AudioDevInfo.defaultSamplesPerSec">
Default sampling rate.

</member>
        <member name="F:pj.AudioDevInfo.outputCount">
Maximum number of output channels supported by this device. If the
value is zero, the device does not support output operation (i.e.
it is an input only device).

</member>
        <member name="F:pj.AudioDevInfo.inputCount">
Maximum number of input channels supported by this device. If the
value is zero, the device does not support input operation (i.e.
it is a playback only device).

</member>
        <member name="F:pj.AudioDevInfo.name">
The device name

</member>
        <member name="T:pj.AudioDevInfo">
Audio device information structure.

</member>
        <member name="M:pj.ToneGenerator.setDigitMap(std.vector&lt;pj.ToneDigitMapDigit,std.allocator&lt;pj.ToneDigitMapDigit&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Set digit map to be used by the tone generator.

 @param digit_map	    Digitmap to be used by the tone generator.

</member>
        <member name="M:pj.ToneGenerator.getDigitMap">
 Get the digit-map currently used by this tone generator.

 @return		    The digitmap currently used by the tone generator

</member>
        <member name="M:pj.ToneGenerator.playDigits(std.vector&lt;pj.ToneDigit,std.allocator&lt;pj.ToneDigit&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 Instruct the tone generator to play multiple MF digits with each of
 the digits having individual ON/OFF duration. Each of the digit in the
 digit array must have the corresponding descriptor in the digit map.
 The new tones will be appended to currently playing tones, unless
 stop() is called before calling this function. The playback will begin
 as soon as the tone generator is connected to a sink media.

 @param digits	    Array of MF digits.
 @param loop	    Play the tone in a loop.

</member>
        <member name="M:pj.ToneGenerator.play(std.vector&lt;pj.ToneDesc,std.allocator&lt;pj.ToneDesc&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
 Instruct the tone generator to play single or dual frequency tones
 with the specified duration. The new tones will be appended to
 currently playing tones, unless stop() is called before calling this
 function. The playback will begin as soon as the tone generator is
 connected to other media.

 @param tones	    Array of tones to be played.
 @param loop	    Play the tone in a loop.

</member>
        <member name="M:pj.ToneGenerator.rewind">
Rewind the playback. This will start the playback to the first
tone in the playback list.

</member>
        <member name="M:pj.ToneGenerator.stop">
Instruct the tone generator to stop current processing.

</member>
        <member name="M:pj.ToneGenerator.isBusy">
Check if the tone generator is still busy producing some tones.
@return		    Non-zero if busy.

</member>
        <member name="M:pj.ToneGenerator.createToneGenerator(System.UInt32,System.UInt32)">
Create tone generator.

</member>
        <member name="M:pj.ToneGenerator.Dispose">
Destructor.

</member>
        <member name="M:pj.ToneGenerator.#ctor">
Constructor.

</member>
        <member name="T:pj.ToneGenerator">
Tone generator.

</member>
        <member name="D:pj.ToneDigitMapVector">
Tone digit map

</member>
        <member name="T:pj.ToneDigitMapDigit">
A digit in tone digit map

</member>
        <member name="D:pj.ToneDigitVector">
Array of tone digits.

</member>
        <member name="T:pj.ToneDigit">
Tone digit (abstraction for pjmedia_tone_digit)

</member>
        <member name="D:pj.ToneDescVector">
Array of tone descriptor.

</member>
        <member name="T:pj.ToneDesc">
Tone descriptor (abstraction for pjmedia_tone_desc)

</member>
        <member name="F:pj.AudioMediaRecorder.recorderId">
Recorder Id.

</member>
        <member name="M:pj.AudioMediaRecorder.Dispose">
Destructor.

</member>
        <member name="M:pj.AudioMediaRecorder.typecastFromAudioMedia(pj.AudioMedia*)">
 Typecast from base class AudioMedia. This is useful for application
 written in language that does not support downcasting such as Python.

 @param media		The object to be downcasted

 @return			The object as AudioMediaRecorder instance

</member>
        <member name="M:pj.AudioMediaRecorder.createRecorder(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,System.Int32!System.Runtime.CompilerServices.IsLong,System.UInt32)">
 Create a file recorder, and automatically connect this recorder to
 the conference bridge. The recorder currently supports recording WAV
 file. The type of the recorder to use is determined by the extension of
 the file (e.g. ".wav").

 @param file_name	 Output file name. The function will determine the
			 default format to be used based on the file extension.
			 Currently ".wav" is supported on all platforms.
 @param enc_type	 Optionally specify the type of encoder to be used to
			 compress the media, if the file can support different
			 encodings. This value must be zero for now.
 @param max_size	 Maximum file size. Specify zero or -1 to remove size
			 limitation. This value must be zero or -1 for now.
 @param options	 Optional options, which can be used to specify the
 			 recording file format. Supported options are
 			 PJMEDIA_FILE_WRITE_PCM, PJMEDIA_FILE_WRITE_ALAW,
 			 and PJMEDIA_FILE_WRITE_ULAW. Default is zero or
 			 PJMEDIA_FILE_WRITE_PCM.

</member>
        <member name="M:pj.AudioMediaRecorder.#ctor">
Constructor.

</member>
        <member name="T:pj.AudioMediaRecorder">
Audio Media Recorder.

</member>
        <member name="M:pj.AudioMediaPlayer.eof_cb(pjmedia_port*,System.Void*)">
Low level PJMEDIA callback

</member>
        <member name="F:pj.AudioMediaPlayer.playerId">
Player Id.

</member>
        <member name="M:pj.AudioMediaPlayer.onEof">
 Register a callback to be called when the file player reading has
 reached the end of file, or when the file reading has reached the
 end of file of the last file for a playlist. If the file or playlist
 is set to play repeatedly, then the callback will be called multiple
 times.

 @return			If the callback returns false, the playback
 				will stop. Note that if application destroys
 				the player in the callback, it must return
 				false here.

</member>
        <member name="M:pj.AudioMediaPlayer.Dispose">
Destructor.

</member>
        <member name="M:pj.AudioMediaPlayer.typecastFromAudioMedia(pj.AudioMedia*)">
 Typecast from base class AudioMedia. This is useful for application
 written in language that does not support downcasting such as Python.

 @param media		The object to be downcasted

 @return			The object as AudioMediaPlayer instance

</member>
        <member name="M:pj.AudioMediaPlayer.setPos(System.UInt32)">
 Set playback position in samples. This operation is not valid for
 playlist.

 @param samples	   The desired playback position, in samples.

</member>
        <member name="M:pj.AudioMediaPlayer.getPos">
 Get current playback position in samples. This operation is not valid
 for playlist.

 @return		   Current playback position, in samples.

</member>
        <member name="M:pj.AudioMediaPlayer.getInfo">
 Get additional info about the player. This operation is only valid
 for player. For playlist, Error will be thrown.

 @return		the info.

</member>
        <member name="M:pj.AudioMediaPlayer.createPlaylist(std.vector&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;,std.allocator&lt;std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!">
 Create a file playlist media port, and automatically add the port
 to the conference bridge.

 @param file_names  Array of file names to be added to the play list.
			  Note that the files must have the same clock rate,
			  number of channels, and number of bits per sample.
 @param label	  Optional label to be set for the media port.
 @param options	  Optional option flag. Application may specify
			  PJMEDIA_FILE_NO_LOOP to prevent looping.

</member>
        <member name="M:pj.AudioMediaPlayer.createPlayer(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32)">
 Create a file player,  and automatically add this 
 player to the conference bridge.

 @param file_name	 The filename to be played. Currently only
			 WAV files are supported, and the WAV file MUST be
			 formatted as 16bit PCM mono/single channel (any
			 clock rate is supported).
 @param options	 Optional option flag. Application may specify
			 PJMEDIA_FILE_NO_LOOP to prevent playback loop.

</member>
        <member name="M:pj.AudioMediaPlayer.#ctor">
Constructor.

</member>
        <member name="T:pj.AudioMediaPlayer">
Audio Media Player.

</member>
        <member name="F:pj.AudioMediaPlayerInfo.sizeSamples">
The WAV payload size in samples.

</member>
        <member name="F:pj.AudioMediaPlayerInfo.sizeBytes">
The WAV payload size in bytes.

</member>
        <member name="F:pj.AudioMediaPlayerInfo.payloadBitsPerSample">
The number of bits per sample of the file payload. For example,
the value is 16 for PCM WAV and 8 for Alaw/Ulas WAV files.

</member>
        <member name="F:pj.AudioMediaPlayerInfo.formatId">
Format ID of the payload.

</member>
        <member name="T:pj.AudioMediaPlayerInfo">
This structure contains additional info about AudioMediaPlayer.

</member>
        <member name="D:pj.AudioMediaVector">
Array of Audio Media 
</member>
        <member name="M:pj.AudioMedia.unregisterMediaPort">
This method needs to be called by descendants of this class to remove
the media port from the conference bridge and Endpoint's media list.
Descendant should only call this method if it has registered the media
with the previous call to registerMediaPort().

</member>
        <member name="M:pj.AudioMedia.registerMediaPort(System.Void*)">
 This method needs to be called by descendants of this class to register
 the media port created to the conference bridge and Endpoint's
 media list.

 param port  the media port to be registered to the conference bridge.


</member>
        <member name="M:pj.AudioMedia.#ctor">
Default Constructor.

</member>
        <member name="F:pj.AudioMedia.id">
Conference port Id.

</member>
        <member name="M:pj.AudioMedia.Dispose">
Virtual Destructor

</member>
        <member name="M:pj.AudioMedia.typecastFromMedia(pj.Media*)">
 Typecast from base class Media. This is useful for application written
 in language that does not support downcasting such as Python.

 @param media		The object to be downcasted

 @return			The object as AudioMedia instance

</member>
        <member name="M:pj.AudioMedia.getTxLevel">
 Get the last transmitted signal level.

 @return			Signal level in percent.

</member>
        <member name="M:pj.AudioMedia.getRxLevel">
 Get the last received signal level.

 @return			Signal level in percent.

</member>
        <member name="M:pj.AudioMedia.adjustTxLevel(System.Single)">
 Adjust the signal level to be received from this media port (to
 the bridge) by making it louder or quieter.

 @param level		Signal level adjustment. Value 1.0 means no
				level adjustment, while value 0 means to mute
				the port.

</member>
        <member name="M:pj.AudioMedia.adjustRxLevel(System.Single)">
 Adjust the signal level to be transmitted from the bridge to this
 media port by making it louder or quieter.

 @param level		Signal level adjustment. Value 1.0 means no
				level adjustment, while value 0 means to mute
				the port.

</member>
        <member name="M:pj.AudioMedia.stopTransmit(pj.AudioMedia!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
  Stop media flow to destination/sink port.

 @param sink		The destination media.


</member>
        <member name="M:pj.AudioMedia.startTransmit(pj.AudioMedia!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
 Establish unidirectional media flow to sink. This media port
 will act as a source, and it may transmit to multiple destinations/sink.
 And if multiple sources are transmitting to the same sink, the media
 will be mixed together. Source and sink may refer to the same Media,
 effectively looping the media.

 If bidirectional media flow is desired, application needs to call
 this method twice, with the second one called from the opposite source
 media.

 @param sink		The destination Media.

</member>
        <member name="M:pj.AudioMedia.getPortInfoFromId(System.Int32)">
Get information from specific port id.

</member>
        <member name="M:pj.AudioMedia.getPortId">
Get port Id.

</member>
        <member name="M:pj.AudioMedia.getPortInfo">
Get information about the specified conference port.

</member>
        <member name="T:pj.AudioMedia">
Audio Media.

</member>
        <member name="F:pj.Media.type">
Media type.

</member>
        <member name="M:pj.Media.#ctor(pjmedia_type)">
Constructor.

</member>
        <member name="M:pj.Media.getType">
 Get type of the media.

 @return          The media type.

</member>
        <member name="M:pj.Media.Dispose">
Virtual destructor.

</member>
        <member name="T:pj.Media">
Media.

</member>
        <member name="D:pj.MediaPort">
Media port, corresponds to pjmedia_port

</member>
        <member name="M:pj.ConfPortInfo.fromPj(pjsua_conf_port_info!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Construct from pjsua_conf_port_info.

</member>
        <member name="F:pj.ConfPortInfo.listeners">
Array of listeners (in other words, ports where this port is
transmitting to.

</member>
        <member name="F:pj.ConfPortInfo.rxLevelAdj">
Rx level adjustment. Value 1.0 means no adjustment, value 0 means
the port is muted, value 2.0 means the level is amplified two times.

</member>
        <member name="F:pj.ConfPortInfo.txLevelAdj">
Tx level adjustment. Value 1.0 means no adjustment, value 0 means
the port is muted, value 2.0 means the level is amplified two times.

</member>
        <member name="F:pj.ConfPortInfo.format">
Media audio format information

</member>
        <member name="F:pj.ConfPortInfo.name">
Port name.

</member>
        <member name="F:pj.ConfPortInfo.portId">
Conference port number.

</member>
        <member name="T:pj.ConfPortInfo">
This structure descibes information about a particular media port that
has been registered into the conference bridge. 

</member>
        <member name="D:pj.MediaFormatVector">
Array of MediaFormat 
</member>
        <member name="M:pj.MediaFormatVideo.toPj">
Export to pjmedia_format.

</member>
        <member name="M:pj.MediaFormatVideo.fromPj(pjmedia_format!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Construct from pjmedia_format.

</member>
        <member name="T:pj.MediaFormatVideo">
This structure describe detail information about an video media.

</member>
        <member name="M:pj.MediaFormatAudio.toPj">
Export to pjmedia_format.

</member>
        <member name="M:pj.MediaFormatAudio.fromPj(pjmedia_format!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Construct from pjmedia_format.

</member>
        <member name="T:pj.MediaFormatAudio">
This structure describe detail information about an audio media.

</member>
        <member name="F:pj.MediaFormat.type">
The top-most type of the media, as an information.

</member>
        <member name="F:pj.MediaFormat.id">
 The format id that specifies the audio sample or video pixel format.
 Some well known formats ids are declared in pjmedia_format_id
 enumeration.

 @see pjmedia_format_id

</member>
        <member name="T:pj.MediaFormat">
This structure contains all the information needed to completely describe
a media.

</member>
        <member name="D:pj_int64_t">
@file pjsua2/media.hpp
@brief PJSUA2 media operations


@file pjsua2/presence.hpp
@brief PJSUA2 Presence Operations


@file pjsua2/account.hpp
@brief PJSUA2 Account operations

</member>
        <member name="M:Nequeo.Net.PjSip.MediaBase.#ctor(&lt;unknown type&gt;)">
            <summary>
Media.
</summary>
            <param name="mediaType">The media type.</param>
            <summary>
Media.
</summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaBase.GetType">
            <summary>
Get type of the media.
</summary>
            <returns>The media type</returns>
            <summary>
Get type of the media.
</summary>
            <returns>The media type</returns>
        </member>
        <member name="M:Nequeo.Net.PjSip.MediaBase.Dispose">
            <summary>
Media. deconstructor.
</summary>
            <summary>
Media.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaBase">
            <summary>
Media.
</summary>
        </member>
        <member name="T:Nequeo.Net.PjSip.MediaType">
            <summary>
The top-most type of the media, as an information.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_TYPE_UNKNOWN">
            <summary>
The media type is unknown or unsupported.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_TYPE_APPLICATION">
            <summary>
The media is application.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_TYPE_VIDEO">
            <summary>
The media is video.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_TYPE_AUDIO">
            <summary>
The media is audio
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.PJMEDIA_TYPE_NONE">
            <summary>
Type is not specified.
</summary>
        </member>
        <!-- Discarding badly formed XML document comment for member 'F:pjsua_call_media.tp'. -->
        <!-- Discarding badly formed XML document comment for member 'F:pjsua_call.med_update_success'. -->
        <!-- Discarding badly formed XML document comment for member 'F:pjsua_call.hanging_up'. -->
        <!-- Discarding badly formed XML document comment for member 'F:pjsua_acc.via_addr'. -->
        <!-- Discarding badly formed XML document comment for member 'F:pj.AccountNatConfig.sipOutboundInstanceId'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pj.Endpoint.libIsThreadRegistered'. -->
        <!-- Discarding badly formed XML document comment for member 'F:pj.AccountNatConfig.sipOutboundInstanceId'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pj.Endpoint.libIsThreadRegistered'. -->
        <!-- Discarding badly formed XML document comment for member 'F:pj.AccountNatConfig.sipOutboundInstanceId'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pj.Endpoint.libIsThreadRegistered'. -->
        <!-- Discarding badly formed XML document comment for member 'F:pj.AccountNatConfig.sipOutboundInstanceId'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pj.Endpoint.libIsThreadRegistered'. -->
        <!-- Discarding badly formed XML document comment for member 'F:pj.AccountNatConfig.sipOutboundInstanceId'. -->
        <!-- Discarding badly formed XML document comment for member 'M:pj.Endpoint.libIsThreadRegistered'. -->
    </members>
</doc>